
Week12GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08008ff0  08008ff0  00018ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009648  08009648  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009648  08009648  00019648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009650  08009650  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000088  080096dc  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080096dc  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011877  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023be  00000000  00000000  0003192b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00033cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00034cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182c9  00000000  00000000  00035bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115a0  00000000  00000000  0004dea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c5d1  00000000  00000000  0005f441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fba12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  000fba68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008fd4 	.word	0x08008fd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008fd4 	.word	0x08008fd4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b96e 	b.w	8000f20 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9d08      	ldr	r5, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	468c      	mov	ip, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8083 	bne.w	8000d72 <__udivmoddi4+0x116>
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	4617      	mov	r7, r2
 8000c70:	d947      	bls.n	8000d02 <__udivmoddi4+0xa6>
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	b142      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c78:	f1c2 0020 	rsb	r0, r2, #32
 8000c7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c80:	4091      	lsls	r1, r2
 8000c82:	4097      	lsls	r7, r2
 8000c84:	ea40 0c01 	orr.w	ip, r0, r1
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbbc f6f8 	udiv	r6, ip, r8
 8000c94:	fa1f fe87 	uxth.w	lr, r7
 8000c98:	fb08 c116 	mls	r1, r8, r6, ip
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 8119 	bcs.w	8000ee4 <__udivmoddi4+0x288>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8116 	bls.w	8000ee4 <__udivmoddi4+0x288>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	443b      	add	r3, r7
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8105 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	f240 8102 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	443c      	add	r4, r7
 8000ce8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cec:	eba4 040e 	sub.w	r4, r4, lr
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b902      	cbnz	r2, 8000d06 <__udivmoddi4+0xaa>
 8000d04:	deff      	udf	#255	; 0xff
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d150      	bne.n	8000db0 <__udivmoddi4+0x154>
 8000d0e:	1bcb      	subs	r3, r1, r7
 8000d10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d14:	fa1f f887 	uxth.w	r8, r7
 8000d18:	2601      	movs	r6, #1
 8000d1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1e:	0c21      	lsrs	r1, r4, #16
 8000d20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d28:	fb08 f30c 	mul.w	r3, r8, ip
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000d30:	1879      	adds	r1, r7, r1
 8000d32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0xe2>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	f200 80e9 	bhi.w	8000f10 <__udivmoddi4+0x2b4>
 8000d3e:	4684      	mov	ip, r0
 8000d40:	1ac9      	subs	r1, r1, r3
 8000d42:	b2a3      	uxth	r3, r4
 8000d44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d50:	fb08 f800 	mul.w	r8, r8, r0
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x10c>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x10a>
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	f200 80d9 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d66:	4618      	mov	r0, r3
 8000d68:	eba4 0408 	sub.w	r4, r4, r8
 8000d6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d70:	e7bf      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x12e>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80b1 	beq.w	8000ede <__udivmoddi4+0x282>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x1cc>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0x140>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80b8 	bhi.w	8000f0c <__udivmoddi4+0x2b0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	468c      	mov	ip, r1
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0a8      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000daa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dae:	e7a5      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f603 	lsr.w	r6, r0, r3
 8000db8:	4097      	lsls	r7, r2
 8000dba:	fa01 f002 	lsl.w	r0, r1, r2
 8000dbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc2:	40d9      	lsrs	r1, r3
 8000dc4:	4330      	orrs	r0, r6
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f108 	mul.w	r1, r6, r8
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	fa04 f402 	lsl.w	r4, r4, r2
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x19c>
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dea:	f080 808d 	bcs.w	8000f08 <__udivmoddi4+0x2ac>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 808a 	bls.w	8000f08 <__udivmoddi4+0x2ac>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b281      	uxth	r1, r0
 8000dfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e08:	fb00 f308 	mul.w	r3, r0, r8
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x1c4>
 8000e10:	1879      	adds	r1, r7, r1
 8000e12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e16:	d273      	bcs.n	8000f00 <__udivmoddi4+0x2a4>
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d971      	bls.n	8000f00 <__udivmoddi4+0x2a4>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4439      	add	r1, r7
 8000e20:	1acb      	subs	r3, r1, r3
 8000e22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e26:	e778      	b.n	8000d1a <__udivmoddi4+0xbe>
 8000e28:	f1c6 0c20 	rsb	ip, r6, #32
 8000e2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e34:	431c      	orrs	r4, r3
 8000e36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e46:	431f      	orrs	r7, r3
 8000e48:	0c3b      	lsrs	r3, r7, #16
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fa1f f884 	uxth.w	r8, r4
 8000e52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	fa02 f206 	lsl.w	r2, r2, r6
 8000e64:	fa00 f306 	lsl.w	r3, r0, r6
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x220>
 8000e6a:	1861      	adds	r1, r4, r1
 8000e6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e70:	d248      	bcs.n	8000f04 <__udivmoddi4+0x2a8>
 8000e72:	458a      	cmp	sl, r1
 8000e74:	d946      	bls.n	8000f04 <__udivmoddi4+0x2a8>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4421      	add	r1, r4
 8000e7c:	eba1 010a 	sub.w	r1, r1, sl
 8000e80:	b2bf      	uxth	r7, r7
 8000e82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8e:	fb00 f808 	mul.w	r8, r0, r8
 8000e92:	45b8      	cmp	r8, r7
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x24a>
 8000e96:	19e7      	adds	r7, r4, r7
 8000e98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e9c:	d22e      	bcs.n	8000efc <__udivmoddi4+0x2a0>
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d92c      	bls.n	8000efc <__udivmoddi4+0x2a0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4427      	add	r7, r4
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	eba7 0708 	sub.w	r7, r7, r8
 8000eae:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb2:	454f      	cmp	r7, r9
 8000eb4:	46c6      	mov	lr, r8
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	d31a      	bcc.n	8000ef0 <__udivmoddi4+0x294>
 8000eba:	d017      	beq.n	8000eec <__udivmoddi4+0x290>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x27a>
 8000ebe:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eca:	40f2      	lsrs	r2, r6
 8000ecc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ed0:	40f7      	lsrs	r7, r6
 8000ed2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	4631      	mov	r1, r6
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e70b      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e9      	b.n	8000cbc <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fd      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000eec:	4543      	cmp	r3, r8
 8000eee:	d2e5      	bcs.n	8000ebc <__udivmoddi4+0x260>
 8000ef0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7df      	b.n	8000ebc <__udivmoddi4+0x260>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e7d2      	b.n	8000ea6 <__udivmoddi4+0x24a>
 8000f00:	4660      	mov	r0, ip
 8000f02:	e78d      	b.n	8000e20 <__udivmoddi4+0x1c4>
 8000f04:	4681      	mov	r9, r0
 8000f06:	e7b9      	b.n	8000e7c <__udivmoddi4+0x220>
 8000f08:	4666      	mov	r6, ip
 8000f0a:	e775      	b.n	8000df8 <__udivmoddi4+0x19c>
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	e74a      	b.n	8000da6 <__udivmoddi4+0x14a>
 8000f10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f14:	4439      	add	r1, r7
 8000f16:	e713      	b.n	8000d40 <__udivmoddi4+0xe4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	443c      	add	r4, r7
 8000f1c:	e724      	b.n	8000d68 <__udivmoddi4+0x10c>
 8000f1e:	bf00      	nop

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	0000      	movs	r0, r0
	...

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f2c:	b0bb      	sub	sp, #236	; 0xec
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f002 fd34 	bl	800399c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f002 f800 	bl	8002f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f002 f992 	bl	8003260 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3c:	f002 f970 	bl	8003220 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f40:	f002 f944 	bl	80031cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f44:	f002 f860 	bl	8003008 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000f48:	f002 f898 	bl	800307c <MX_SPI3_Init>
  MX_TIM3_Init();
 8000f4c:	f002 f8ce 	bl	80030ec <MX_TIM3_Init>
  MX_TIM11_Init();
 8000f50:	f002 f918 	bl	8003184 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f54:	48c3      	ldr	r0, [pc, #780]	; (8001264 <main+0x33c>)
 8000f56:	f005 f8e9 	bl	800612c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000f5a:	48c3      	ldr	r0, [pc, #780]	; (8001268 <main+0x340>)
 8000f5c:	f005 f940 	bl	80061e0 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	49c2      	ldr	r1, [pc, #776]	; (800126c <main+0x344>)
 8000f64:	48c2      	ldr	r0, [pc, #776]	; (8001270 <main+0x348>)
 8000f66:	f002 ff0f 	bl	8003d88 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f70:	48c0      	ldr	r0, [pc, #768]	; (8001274 <main+0x34c>)
 8000f72:	f004 f859 	bl	8005028 <HAL_GPIO_WritePin>
	{
	char temp[]="\r\n\r\nHELLO WORLD\r\n please type something to test System\r\n\r\n\r\n";
 8000f76:	4bc0      	ldr	r3, [pc, #768]	; (8001278 <main+0x350>)
 8000f78:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f8e:	c407      	stmia	r4!, {r0, r1, r2}
 8000f90:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8000f92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f922 	bl	80001e0 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	48b5      	ldr	r0, [pc, #724]	; (800127c <main+0x354>)
 8000fa8:	f005 fd59 	bl	8006a5e <HAL_UART_Transmit>
//		Variable
		static uint64_t timestamp = 0;
		static uint64_t Graphtimestamp = 0;

//		IT init
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000fac:	2220      	movs	r2, #32
 8000fae:	49b4      	ldr	r1, [pc, #720]	; (8001280 <main+0x358>)
 8000fb0:	48b2      	ldr	r0, [pc, #712]	; (800127c <main+0x354>)
 8000fb2:	f005 fde6 	bl	8006b82 <HAL_UART_Receive_IT>

//		IT 1 char
		int16_t inputchar = UARTRecieveIT();
 8000fb6:	f002 fa67 	bl	8003488 <UARTRecieveIT>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
		if(inputchar!=-1)
 8000fc0:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d01f      	beq.n	800100a <main+0xe2>
		{
			char TxDataBuffer[100] = { 0 };
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000fd0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fd4:	2260      	movs	r2, #96	; 0x60
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f006 fb8f 	bl	80076fc <memset>
			sprintf(TxDataBuffer, "\r\nReceivedChar:[%c]\r\n", inputchar);
 8000fde:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 8000fe2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fe6:	49a7      	ldr	r1, [pc, #668]	; (8001284 <main+0x35c>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f006 fb8f 	bl	800770c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8f4 	bl	80001e0 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	489d      	ldr	r0, [pc, #628]	; (800127c <main+0x354>)
 8001006:	f005 fd2a 	bl	8006a5e <HAL_UART_Transmit>
		}

//		State
		char TxDataBuffer[100] = { 0 };
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2260      	movs	r2, #96	; 0x60
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f006 fb70 	bl	80076fc <memset>

		switch(System_State)
 800101c:	4b9a      	ldr	r3, [pc, #616]	; (8001288 <main+0x360>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b08      	cmp	r3, #8
 8001022:	f201 8281 	bhi.w	8002528 <main+0x1600>
 8001026:	a201      	add	r2, pc, #4	; (adr r2, 800102c <main+0x104>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	08001051 	.word	0x08001051
 8001030:	08001061 	.word	0x08001061
 8001034:	08001093 	.word	0x08001093
 8001038:	0800119b 	.word	0x0800119b
 800103c:	080011cd 	.word	0x080011cd
 8001040:	080017d7 	.word	0x080017d7
 8001044:	08001809 	.word	0x08001809
 8001048:	08001e63 	.word	0x08001e63
 800104c:	08001e93 	.word	0x08001e93
		{
			case System_Start:
				System_State = System_Main_Print;
 8001050:	4b8d      	ldr	r3, [pc, #564]	; (8001288 <main+0x360>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
				run = 1;
 8001056:	4b8d      	ldr	r3, [pc, #564]	; (800128c <main+0x364>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
				break;
 800105c:	f001 ba64 	b.w	8002528 <main+0x1600>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			case System_Main_Print:
				sprintf(TxDataBuffer, ":MainMenu: \r\n a. Sine wave configuration \r\n s. Ramp wave configuration \r\n d. Square wave configuration \r\n\r\n\r\n");
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	498a      	ldr	r1, [pc, #552]	; (8001290 <main+0x368>)
 8001066:	4618      	mov	r0, r3
 8001068:	f006 fb50 	bl	800770c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f8b5 	bl	80001e0 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	f107 011c 	add.w	r1, r7, #28
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	487e      	ldr	r0, [pc, #504]	; (800127c <main+0x354>)
 8001084:	f005 fceb 	bl	8006a5e <HAL_UART_Transmit>
				System_State = System_Main_input;
 8001088:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <main+0x360>)
 800108a:	2202      	movs	r2, #2
 800108c:	701a      	strb	r2, [r3, #0]
				break;
 800108e:	f001 ba4b 	b.w	8002528 <main+0x1600>
			case System_Main_input:
				switch(inputchar)
 8001092:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8001096:	2b73      	cmp	r3, #115	; 0x73
 8001098:	d02a      	beq.n	80010f0 <main+0x1c8>
 800109a:	2b73      	cmp	r3, #115	; 0x73
 800109c:	dc62      	bgt.n	8001164 <main+0x23c>
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d03e      	beq.n	8001120 <main+0x1f8>
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	dc5e      	bgt.n	8001164 <main+0x23c>
 80010a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010aa:	d073      	beq.n	8001194 <main+0x26c>
 80010ac:	2b61      	cmp	r3, #97	; 0x61
 80010ae:	d159      	bne.n	8001164 <main+0x23c>
				{
				case 'a':
					System_State = System_SIN_Print;
 80010b0:	4b75      	ldr	r3, [pc, #468]	; (8001288 <main+0x360>)
 80010b2:	2203      	movs	r2, #3
 80010b4:	701a      	strb	r2, [r3, #0]
					mode = 1;
 80010b6:	4b77      	ldr	r3, [pc, #476]	; (8001294 <main+0x36c>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
					run = 0;
 80010bc:	4b73      	ldr	r3, [pc, #460]	; (800128c <main+0x364>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]

					SIN_Freq = 0;
 80010c2:	4b75      	ldr	r3, [pc, #468]	; (8001298 <main+0x370>)
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
					SIN_Amplitude = 0;
 80010ca:	4b74      	ldr	r3, [pc, #464]	; (800129c <main+0x374>)
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
					SIN_High = 3.3;
 80010d2:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <main+0x378>)
 80010d4:	4a73      	ldr	r2, [pc, #460]	; (80012a4 <main+0x37c>)
 80010d6:	601a      	str	r2, [r3, #0]
					SIN_Low = 0;
 80010d8:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <main+0x380>)
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

					Graphtimestamp = micros();
 80010e0:	f002 f9b8 	bl	8003454 <micros>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4970      	ldr	r1, [pc, #448]	; (80012ac <main+0x384>)
 80010ea:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 80010ee:	e052      	b.n	8001196 <main+0x26e>
				case 's':
					System_State = System_Ramp_Print;
 80010f0:	4b65      	ldr	r3, [pc, #404]	; (8001288 <main+0x360>)
 80010f2:	2205      	movs	r2, #5
 80010f4:	701a      	strb	r2, [r3, #0]
					mode = 2;
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <main+0x36c>)
 80010f8:	2202      	movs	r2, #2
 80010fa:	601a      	str	r2, [r3, #0]
					run = 0;
 80010fc:	4b63      	ldr	r3, [pc, #396]	; (800128c <main+0x364>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]

					SAW_Freq = 0;
 8001102:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <main+0x388>)
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
					SAW_mode = 0;
 800110a:	4b6a      	ldr	r3, [pc, #424]	; (80012b4 <main+0x38c>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
					SAW_High = 3.3;
 8001110:	4b69      	ldr	r3, [pc, #420]	; (80012b8 <main+0x390>)
 8001112:	4a64      	ldr	r2, [pc, #400]	; (80012a4 <main+0x37c>)
 8001114:	601a      	str	r2, [r3, #0]
					SAW_Low = 0;
 8001116:	4b69      	ldr	r3, [pc, #420]	; (80012bc <main+0x394>)
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

					break;
 800111e:	e03a      	b.n	8001196 <main+0x26e>
				case 'd':
					System_State = System_Sqr_Print;
 8001120:	4b59      	ldr	r3, [pc, #356]	; (8001288 <main+0x360>)
 8001122:	2207      	movs	r2, #7
 8001124:	701a      	strb	r2, [r3, #0]
					mode = 3;
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <main+0x36c>)
 8001128:	2203      	movs	r2, #3
 800112a:	601a      	str	r2, [r3, #0]
					run = 0;
 800112c:	4b57      	ldr	r3, [pc, #348]	; (800128c <main+0x364>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]

					SQR_Freq = 0;
 8001132:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <main+0x398>)
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
					duty_cycle = 50;
 800113a:	4b62      	ldr	r3, [pc, #392]	; (80012c4 <main+0x39c>)
 800113c:	2232      	movs	r2, #50	; 0x32
 800113e:	601a      	str	r2, [r3, #0]
					SQR_mode = 0;
 8001140:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <main+0x3a0>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
					SQR_High = 3.3;
 8001146:	4b61      	ldr	r3, [pc, #388]	; (80012cc <main+0x3a4>)
 8001148:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <main+0x37c>)
 800114a:	601a      	str	r2, [r3, #0]
					SQR_Low = 0;
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <main+0x3a8>)
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

					Graphtimestamp = micros();
 8001154:	f002 f97e 	bl	8003454 <micros>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4953      	ldr	r1, [pc, #332]	; (80012ac <main+0x384>)
 800115e:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8001162:	e018      	b.n	8001196 <main+0x26e>
				case -1:
					break;
				default:
					sprintf(TxDataBuffer, "Please press the correct button \r\n");
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	495a      	ldr	r1, [pc, #360]	; (80012d4 <main+0x3ac>)
 800116a:	4618      	mov	r0, r3
 800116c:	f006 face 	bl	800770c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f833 	bl	80001e0 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	f107 011c 	add.w	r1, r7, #28
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	483d      	ldr	r0, [pc, #244]	; (800127c <main+0x354>)
 8001188:	f005 fc69 	bl	8006a5e <HAL_UART_Transmit>
					System_State = System_Main_Print;
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <main+0x360>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
					break;
 8001192:	e000      	b.n	8001196 <main+0x26e>
					break;
 8001194:	bf00      	nop
				}
				break;
 8001196:	f001 b9c7 	b.w	8002528 <main+0x1600>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			case System_SIN_Print:
				sprintf(TxDataBuffer, ":SINMenu: \r\n a. + 0.1 Hz       s. - 0.1 Hz \r\n d. High + 0.1 V   z. High - 0.1 V \r\n x. Low + 0.1 V    c. Low - 0.1 V \r\n w. On/Off         q. Back \r\n\r\n\r\n");
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	494e      	ldr	r1, [pc, #312]	; (80012d8 <main+0x3b0>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 fab3 	bl	800770c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f818 	bl	80001e0 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f107 011c 	add.w	r1, r7, #28
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	482f      	ldr	r0, [pc, #188]	; (800127c <main+0x354>)
 80011be:	f005 fc4e 	bl	8006a5e <HAL_UART_Transmit>
				System_State = System_SIN_input;
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <main+0x360>)
 80011c4:	2204      	movs	r2, #4
 80011c6:	701a      	strb	r2, [r3, #0]
				break;
 80011c8:	f001 b9ae 	b.w	8002528 <main+0x1600>
			case System_SIN_input:
				switch(inputchar)
 80011cc:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	f000 82f9 	beq.w	80017ca <main+0x8a2>
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	f2c0 82dd 	blt.w	800179a <main+0x872>
 80011e0:	2b7a      	cmp	r3, #122	; 0x7a
 80011e2:	f300 82da 	bgt.w	800179a <main+0x872>
 80011e6:	2b61      	cmp	r3, #97	; 0x61
 80011e8:	f2c0 82d7 	blt.w	800179a <main+0x872>
 80011ec:	3b61      	subs	r3, #97	; 0x61
 80011ee:	2b19      	cmp	r3, #25
 80011f0:	f200 82d3 	bhi.w	800179a <main+0x872>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <main+0x2d4>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	080012dd 	.word	0x080012dd
 8001200:	0800179b 	.word	0x0800179b
 8001204:	08001649 	.word	0x08001649
 8001208:	0800142b 	.word	0x0800142b
 800120c:	0800179b 	.word	0x0800179b
 8001210:	0800179b 	.word	0x0800179b
 8001214:	0800179b 	.word	0x0800179b
 8001218:	0800179b 	.word	0x0800179b
 800121c:	0800179b 	.word	0x0800179b
 8001220:	0800179b 	.word	0x0800179b
 8001224:	0800179b 	.word	0x0800179b
 8001228:	0800179b 	.word	0x0800179b
 800122c:	0800179b 	.word	0x0800179b
 8001230:	0800179b 	.word	0x0800179b
 8001234:	0800179b 	.word	0x0800179b
 8001238:	0800179b 	.word	0x0800179b
 800123c:	08001787 	.word	0x08001787
 8001240:	0800179b 	.word	0x0800179b
 8001244:	08001383 	.word	0x08001383
 8001248:	0800179b 	.word	0x0800179b
 800124c:	0800179b 	.word	0x0800179b
 8001250:	0800179b 	.word	0x0800179b
 8001254:	080016e3 	.word	0x080016e3
 8001258:	08001567 	.word	0x08001567
 800125c:	0800179b 	.word	0x0800179b
 8001260:	080014c3 	.word	0x080014c3
 8001264:	20000138 	.word	0x20000138
 8001268:	20000220 	.word	0x20000220
 800126c:	200000d4 	.word	0x200000d4
 8001270:	200001d8 	.word	0x200001d8
 8001274:	40020000 	.word	0x40020000
 8001278:	080093dc 	.word	0x080093dc
 800127c:	200002c8 	.word	0x200002c8
 8001280:	200000f0 	.word	0x200000f0
 8001284:	08008ff0 	.word	0x08008ff0
 8001288:	20000110 	.word	0x20000110
 800128c:	200000a4 	.word	0x200000a4
 8001290:	08009008 	.word	0x08009008
 8001294:	200000a8 	.word	0x200000a8
 8001298:	200000ac 	.word	0x200000ac
 800129c:	200000b0 	.word	0x200000b0
 80012a0:	20000000 	.word	0x20000000
 80012a4:	40533333 	.word	0x40533333
 80012a8:	200000b4 	.word	0x200000b4
 80012ac:	20000118 	.word	0x20000118
 80012b0:	200000b8 	.word	0x200000b8
 80012b4:	200000bc 	.word	0x200000bc
 80012b8:	20000004 	.word	0x20000004
 80012bc:	200000c4 	.word	0x200000c4
 80012c0:	200000c8 	.word	0x200000c8
 80012c4:	20000008 	.word	0x20000008
 80012c8:	200000cc 	.word	0x200000cc
 80012cc:	2000000c 	.word	0x2000000c
 80012d0:	200000d0 	.word	0x200000d0
 80012d4:	08009078 	.word	0x08009078
 80012d8:	0800909c 	.word	0x0800909c
				{
				case 'a':
					Graphtimestamp = micros();
 80012dc:	f002 f8ba 	bl	8003454 <micros>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	49bc      	ldr	r1, [pc, #752]	; (80015d8 <main+0x6b0>)
 80012e6:	e9c1 2300 	strd	r2, r3, [r1]
					if(SIN_Freq + 0.1 <= 10)
 80012ea:	4bbc      	ldr	r3, [pc, #752]	; (80015dc <main+0x6b4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f932 	bl	8000558 <__aeabi_f2d>
 80012f4:	a3b4      	add	r3, pc, #720	; (adr r3, 80015c8 <main+0x6a0>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7fe ffcf 	bl	800029c <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4bb5      	ldr	r3, [pc, #724]	; (80015e0 <main+0x6b8>)
 800130c:	f7ff fbf8 	bl	8000b00 <__aeabi_dcmple>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d013      	beq.n	800133e <main+0x416>
					{
						SIN_Freq += 0.1;
 8001316:	4bb1      	ldr	r3, [pc, #708]	; (80015dc <main+0x6b4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f91c 	bl	8000558 <__aeabi_f2d>
 8001320:	a3a9      	add	r3, pc, #676	; (adr r3, 80015c8 <main+0x6a0>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7fe ffb9 	bl	800029c <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc2b 	bl	8000b8c <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	4aa8      	ldr	r2, [pc, #672]	; (80015dc <main+0x6b4>)
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	e01d      	b.n	800137a <main+0x452>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001344:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001348:	2260      	movs	r2, #96	; 0x60
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f006 f9d5 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Frequency is at Maximum \r\n");
 8001352:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001356:	49a3      	ldr	r1, [pc, #652]	; (80015e4 <main+0x6bc>)
 8001358:	4618      	mov	r0, r3
 800135a:	f006 f9d7 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800135e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ff3c 	bl	80001e0 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	489c      	ldr	r0, [pc, #624]	; (80015e8 <main+0x6c0>)
 8001376:	f005 fb72 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_SIN_Print;
 800137a:	4b9c      	ldr	r3, [pc, #624]	; (80015ec <main+0x6c4>)
 800137c:	2203      	movs	r2, #3
 800137e:	701a      	strb	r2, [r3, #0]
					break;
 8001380:	e227      	b.n	80017d2 <main+0x8aa>
				case 's':
					Graphtimestamp = micros();
 8001382:	f002 f867 	bl	8003454 <micros>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4993      	ldr	r1, [pc, #588]	; (80015d8 <main+0x6b0>)
 800138c:	e9c1 2300 	strd	r2, r3, [r1]
					if(SIN_Freq - 0.1 >= 0)
 8001390:	4b92      	ldr	r3, [pc, #584]	; (80015dc <main+0x6b4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8df 	bl	8000558 <__aeabi_f2d>
 800139a:	a38b      	add	r3, pc, #556	; (adr r3, 80015c8 <main+0x6a0>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7fe ff7a 	bl	8000298 <__aeabi_dsub>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	f7ff fbae 	bl	8000b14 <__aeabi_dcmpge>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d013      	beq.n	80013e6 <main+0x4be>
					{
						SIN_Freq -= 0.1;
 80013be:	4b87      	ldr	r3, [pc, #540]	; (80015dc <main+0x6b4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8c8 	bl	8000558 <__aeabi_f2d>
 80013c8:	a37f      	add	r3, pc, #508	; (adr r3, 80015c8 <main+0x6a0>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7fe ff63 	bl	8000298 <__aeabi_dsub>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fbd7 	bl	8000b8c <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a7e      	ldr	r2, [pc, #504]	; (80015dc <main+0x6b4>)
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e01d      	b.n	8001422 <main+0x4fa>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80013ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013f0:	2260      	movs	r2, #96	; 0x60
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f006 f981 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Frequency is at Minimum \r\n");
 80013fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013fe:	497c      	ldr	r1, [pc, #496]	; (80015f0 <main+0x6c8>)
 8001400:	4618      	mov	r0, r3
 8001402:	f006 f983 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001406:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe fee8 	bl	80001e0 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141c:	4872      	ldr	r0, [pc, #456]	; (80015e8 <main+0x6c0>)
 800141e:	f005 fb1e 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_SIN_Print;
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <main+0x6c4>)
 8001424:	2203      	movs	r2, #3
 8001426:	701a      	strb	r2, [r3, #0]
					break;
 8001428:	e1d3      	b.n	80017d2 <main+0x8aa>
				case 'd':
					if(SIN_High + 0.1 <= 3.3)
 800142a:	4b72      	ldr	r3, [pc, #456]	; (80015f4 <main+0x6cc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f892 	bl	8000558 <__aeabi_f2d>
 8001434:	a364      	add	r3, pc, #400	; (adr r3, 80015c8 <main+0x6a0>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7fe ff2f 	bl	800029c <__adddf3>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	a362      	add	r3, pc, #392	; (adr r3, 80015d0 <main+0x6a8>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff fb58 	bl	8000b00 <__aeabi_dcmple>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d013      	beq.n	800147e <main+0x556>
					{
						SIN_High += 0.1;
 8001456:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <main+0x6cc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f87c 	bl	8000558 <__aeabi_f2d>
 8001460:	a359      	add	r3, pc, #356	; (adr r3, 80015c8 <main+0x6a0>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7fe ff19 	bl	800029c <__adddf3>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fb8b 	bl	8000b8c <__aeabi_d2f>
 8001476:	4603      	mov	r3, r0
 8001478:	4a5e      	ldr	r2, [pc, #376]	; (80015f4 <main+0x6cc>)
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e01d      	b.n	80014ba <main+0x592>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001484:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001488:	2260      	movs	r2, #96	; 0x60
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f006 f935 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage High is at Maximum \r\n");
 8001492:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001496:	4958      	ldr	r1, [pc, #352]	; (80015f8 <main+0x6d0>)
 8001498:	4618      	mov	r0, r3
 800149a:	f006 f937 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800149e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fe9c 	bl	80001e0 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80014b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b4:	484c      	ldr	r0, [pc, #304]	; (80015e8 <main+0x6c0>)
 80014b6:	f005 fad2 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_SIN_Print;
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <main+0x6c4>)
 80014bc:	2203      	movs	r2, #3
 80014be:	701a      	strb	r2, [r3, #0]
					break;
 80014c0:	e187      	b.n	80017d2 <main+0x8aa>
				case 'z':
					if(SIN_High - 0.1 >= SIN_Low)
 80014c2:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <main+0x6cc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f846 	bl	8000558 <__aeabi_f2d>
 80014cc:	a33e      	add	r3, pc, #248	; (adr r3, 80015c8 <main+0x6a0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7fe fee1 	bl	8000298 <__aeabi_dsub>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4614      	mov	r4, r2
 80014dc:	461d      	mov	r5, r3
 80014de:	4b47      	ldr	r3, [pc, #284]	; (80015fc <main+0x6d4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f838 	bl	8000558 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7ff fb10 	bl	8000b14 <__aeabi_dcmpge>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d013      	beq.n	8001522 <main+0x5fa>
					{
						SIN_High -= 0.1;
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <main+0x6cc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f82a 	bl	8000558 <__aeabi_f2d>
 8001504:	a330      	add	r3, pc, #192	; (adr r3, 80015c8 <main+0x6a0>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7fe fec5 	bl	8000298 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb39 	bl	8000b8c <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	4a35      	ldr	r2, [pc, #212]	; (80015f4 <main+0x6cc>)
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e01d      	b.n	800155e <main+0x636>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001528:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800152c:	2260      	movs	r2, #96	; 0x60
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f006 f8e3 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage High is at Voltage Low \r\n");
 8001536:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800153a:	4931      	ldr	r1, [pc, #196]	; (8001600 <main+0x6d8>)
 800153c:	4618      	mov	r0, r3
 800153e:	f006 f8e5 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001542:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fe4a 	bl	80001e0 <strlen>
 800154c:	4603      	mov	r3, r0
 800154e:	b29a      	uxth	r2, r3
 8001550:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <main+0x6c0>)
 800155a:	f005 fa80 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_SIN_Print;
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <main+0x6c4>)
 8001560:	2203      	movs	r2, #3
 8001562:	701a      	strb	r2, [r3, #0]
					break;
 8001564:	e135      	b.n	80017d2 <main+0x8aa>
				case 'x':
					if(SIN_Low + 0.1 <= SIN_High)
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <main+0x6d4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fff4 	bl	8000558 <__aeabi_f2d>
 8001570:	a315      	add	r3, pc, #84	; (adr r3, 80015c8 <main+0x6a0>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7fe fe91 	bl	800029c <__adddf3>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4614      	mov	r4, r2
 8001580:	461d      	mov	r5, r3
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <main+0x6cc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ffe6 	bl	8000558 <__aeabi_f2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4620      	mov	r0, r4
 8001592:	4629      	mov	r1, r5
 8001594:	f7ff fab4 	bl	8000b00 <__aeabi_dcmple>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d032      	beq.n	8001604 <main+0x6dc>
					{
						SIN_Low += 0.1;
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <main+0x6d4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffd8 	bl	8000558 <__aeabi_f2d>
 80015a8:	a307      	add	r3, pc, #28	; (adr r3, 80015c8 <main+0x6a0>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7fe fe75 	bl	800029c <__adddf3>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff fae7 	bl	8000b8c <__aeabi_d2f>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <main+0x6d4>)
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e03c      	b.n	8001640 <main+0x718>
 80015c6:	bf00      	nop
 80015c8:	9999999a 	.word	0x9999999a
 80015cc:	3fb99999 	.word	0x3fb99999
 80015d0:	66666666 	.word	0x66666666
 80015d4:	400a6666 	.word	0x400a6666
 80015d8:	20000118 	.word	0x20000118
 80015dc:	200000ac 	.word	0x200000ac
 80015e0:	40240000 	.word	0x40240000
 80015e4:	08009134 	.word	0x08009134
 80015e8:	200002c8 	.word	0x200002c8
 80015ec:	20000110 	.word	0x20000110
 80015f0:	08009150 	.word	0x08009150
 80015f4:	20000000 	.word	0x20000000
 80015f8:	0800916c 	.word	0x0800916c
 80015fc:	200000b4 	.word	0x200000b4
 8001600:	0800918c 	.word	0x0800918c
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800160a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800160e:	2260      	movs	r2, #96	; 0x60
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f006 f872 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage Low is at Voltage High \r\n");
 8001618:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800161c:	49c8      	ldr	r1, [pc, #800]	; (8001940 <main+0xa18>)
 800161e:	4618      	mov	r0, r3
 8001620:	f006 f874 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001624:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fdd9 	bl	80001e0 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	48c2      	ldr	r0, [pc, #776]	; (8001944 <main+0xa1c>)
 800163c:	f005 fa0f 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_SIN_Print;
 8001640:	4bc1      	ldr	r3, [pc, #772]	; (8001948 <main+0xa20>)
 8001642:	2203      	movs	r2, #3
 8001644:	701a      	strb	r2, [r3, #0]
					break;
 8001646:	e0c4      	b.n	80017d2 <main+0x8aa>
				case 'c':
					if(SIN_Low - 0.1 >= 0)
 8001648:	4bc0      	ldr	r3, [pc, #768]	; (800194c <main+0xa24>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff83 	bl	8000558 <__aeabi_f2d>
 8001652:	a3b9      	add	r3, pc, #740	; (adr r3, 8001938 <main+0xa10>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe fe1e 	bl	8000298 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	f7ff fa52 	bl	8000b14 <__aeabi_dcmpge>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d013      	beq.n	800169e <main+0x776>
					{
						SIN_Low -= 0.1;
 8001676:	4bb5      	ldr	r3, [pc, #724]	; (800194c <main+0xa24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff6c 	bl	8000558 <__aeabi_f2d>
 8001680:	a3ad      	add	r3, pc, #692	; (adr r3, 8001938 <main+0xa10>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe fe07 	bl	8000298 <__aeabi_dsub>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fa7b 	bl	8000b8c <__aeabi_d2f>
 8001696:	4603      	mov	r3, r0
 8001698:	4aac      	ldr	r2, [pc, #688]	; (800194c <main+0xa24>)
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e01d      	b.n	80016da <main+0x7b2>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016a8:	2260      	movs	r2, #96	; 0x60
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f006 f825 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage Low is at Minimum \r\n");
 80016b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016b6:	49a6      	ldr	r1, [pc, #664]	; (8001950 <main+0xa28>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f006 f827 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fd8c 	bl	80001e0 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80016d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d4:	489b      	ldr	r0, [pc, #620]	; (8001944 <main+0xa1c>)
 80016d6:	f005 f9c2 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_SIN_Print;
 80016da:	4b9b      	ldr	r3, [pc, #620]	; (8001948 <main+0xa20>)
 80016dc:	2203      	movs	r2, #3
 80016de:	701a      	strb	r2, [r3, #0]
					break;
 80016e0:	e077      	b.n	80017d2 <main+0x8aa>
				case 'w':
					if(run == 1)
 80016e2:	4b9c      	ldr	r3, [pc, #624]	; (8001954 <main+0xa2c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d124      	bne.n	8001734 <main+0x80c>
					{
						run = 0;
 80016ea:	4b9a      	ldr	r3, [pc, #616]	; (8001954 <main+0xa2c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016fa:	2260      	movs	r2, #96	; 0x60
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f005 fffc 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Turning wave off\r\n");
 8001704:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001708:	4993      	ldr	r1, [pc, #588]	; (8001958 <main+0xa30>)
 800170a:	4618      	mov	r0, r3
 800170c:	f005 fffe 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001710:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fd63 	bl	80001e0 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	b29a      	uxth	r2, r3
 800171e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001726:	4887      	ldr	r0, [pc, #540]	; (8001944 <main+0xa1c>)
 8001728:	f005 f999 	bl	8006a5e <HAL_UART_Transmit>
						System_State = System_SIN_Print;
 800172c:	4b86      	ldr	r3, [pc, #536]	; (8001948 <main+0xa20>)
 800172e:	2203      	movs	r2, #3
 8001730:	701a      	strb	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
						sprintf(TxDataBuffer, "Turning wave on\r\n");
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						System_State = System_SIN_Print;
					}
					break;
 8001732:	e04d      	b.n	80017d0 <main+0x8a8>
					else if(run == 0)
 8001734:	4b87      	ldr	r3, [pc, #540]	; (8001954 <main+0xa2c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d149      	bne.n	80017d0 <main+0x8a8>
						run = 1;
 800173c:	4b85      	ldr	r3, [pc, #532]	; (8001954 <main+0xa2c>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001748:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800174c:	2260      	movs	r2, #96	; 0x60
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f005 ffd3 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Turning wave on\r\n");
 8001756:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800175a:	4980      	ldr	r1, [pc, #512]	; (800195c <main+0xa34>)
 800175c:	4618      	mov	r0, r3
 800175e:	f005 ffd5 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001762:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fd3a 	bl	80001e0 <strlen>
 800176c:	4603      	mov	r3, r0
 800176e:	b29a      	uxth	r2, r3
 8001770:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001778:	4872      	ldr	r0, [pc, #456]	; (8001944 <main+0xa1c>)
 800177a:	f005 f970 	bl	8006a5e <HAL_UART_Transmit>
						System_State = System_SIN_Print;
 800177e:	4b72      	ldr	r3, [pc, #456]	; (8001948 <main+0xa20>)
 8001780:	2203      	movs	r2, #3
 8001782:	701a      	strb	r2, [r3, #0]
					break;
 8001784:	e024      	b.n	80017d0 <main+0x8a8>
				case 'q':
					System_State = System_Main_Print;
 8001786:	4b70      	ldr	r3, [pc, #448]	; (8001948 <main+0xa20>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
					mode = 0;
 800178c:	4b74      	ldr	r3, [pc, #464]	; (8001960 <main+0xa38>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
					run = 0;
 8001792:	4b70      	ldr	r3, [pc, #448]	; (8001954 <main+0xa2c>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
					break;
 8001798:	e01b      	b.n	80017d2 <main+0x8aa>
				case -1:
					break;
				default:
					sprintf(TxDataBuffer, "Please press the correct button \r\n");
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4971      	ldr	r1, [pc, #452]	; (8001964 <main+0xa3c>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 ffb3 	bl	800770c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fd18 	bl	80001e0 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f107 011c 	add.w	r1, r7, #28
 80017b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017bc:	4861      	ldr	r0, [pc, #388]	; (8001944 <main+0xa1c>)
 80017be:	f005 f94e 	bl	8006a5e <HAL_UART_Transmit>
					System_State = System_SIN_Print;
 80017c2:	4b61      	ldr	r3, [pc, #388]	; (8001948 <main+0xa20>)
 80017c4:	2203      	movs	r2, #3
 80017c6:	701a      	strb	r2, [r3, #0]
					break;
 80017c8:	e003      	b.n	80017d2 <main+0x8aa>
					break;
 80017ca:	bf00      	nop
 80017cc:	f000 beac 	b.w	8002528 <main+0x1600>
					break;
 80017d0:	bf00      	nop
				}
				break;
 80017d2:	f000 bea9 	b.w	8002528 <main+0x1600>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			case System_Ramp_Print:
				sprintf(TxDataBuffer, ":RampMenu: \r\n a. + 0.1 Hz       s. - 0.1 Hz \r\n d. High + 0.1 V   z. High - 0.1 V \r\n x. Low + 0.1 V    c. Low - 0.1 V \r\n e. Ramp Style \r\n w. On/Off         q. Back \r\n\r\n\r\n");
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4963      	ldr	r1, [pc, #396]	; (8001968 <main+0xa40>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f005 ff95 	bl	800770c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fcfa 	bl	80001e0 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f107 011c 	add.w	r1, r7, #28
 80017f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f8:	4852      	ldr	r0, [pc, #328]	; (8001944 <main+0xa1c>)
 80017fa:	f005 f930 	bl	8006a5e <HAL_UART_Transmit>
				System_State = System_Ramp_input;
 80017fe:	4b52      	ldr	r3, [pc, #328]	; (8001948 <main+0xa20>)
 8001800:	2206      	movs	r2, #6
 8001802:	701a      	strb	r2, [r3, #0]
				break;
 8001804:	f000 be90 	b.w	8002528 <main+0x1600>
			case System_Ramp_input:
				switch(inputchar)
 8001808:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	f000 8321 	beq.w	8001e56 <main+0xf2e>
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	f2c0 8305 	blt.w	8001e26 <main+0xefe>
 800181c:	2b7a      	cmp	r3, #122	; 0x7a
 800181e:	f300 8302 	bgt.w	8001e26 <main+0xefe>
 8001822:	2b61      	cmp	r3, #97	; 0x61
 8001824:	f2c0 82ff 	blt.w	8001e26 <main+0xefe>
 8001828:	3b61      	subs	r3, #97	; 0x61
 800182a:	2b19      	cmp	r3, #25
 800182c:	f200 82fb 	bhi.w	8001e26 <main+0xefe>
 8001830:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <main+0x910>)
 8001832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001836:	bf00      	nop
 8001838:	080018a1 	.word	0x080018a1
 800183c:	08001e27 	.word	0x08001e27
 8001840:	08001bf3 	.word	0x08001bf3
 8001844:	08001a13 	.word	0x08001a13
 8001848:	08001cc9 	.word	0x08001cc9
 800184c:	08001e27 	.word	0x08001e27
 8001850:	08001e27 	.word	0x08001e27
 8001854:	08001e27 	.word	0x08001e27
 8001858:	08001e27 	.word	0x08001e27
 800185c:	08001e27 	.word	0x08001e27
 8001860:	08001e27 	.word	0x08001e27
 8001864:	08001e27 	.word	0x08001e27
 8001868:	08001e27 	.word	0x08001e27
 800186c:	08001e27 	.word	0x08001e27
 8001870:	08001e27 	.word	0x08001e27
 8001874:	08001e27 	.word	0x08001e27
 8001878:	08001e13 	.word	0x08001e13
 800187c:	08001e27 	.word	0x08001e27
 8001880:	08001979 	.word	0x08001979
 8001884:	08001e27 	.word	0x08001e27
 8001888:	08001e27 	.word	0x08001e27
 800188c:	08001e27 	.word	0x08001e27
 8001890:	08001d6f 	.word	0x08001d6f
 8001894:	08001b4f 	.word	0x08001b4f
 8001898:	08001e27 	.word	0x08001e27
 800189c:	08001aab 	.word	0x08001aab
				{
				case 'a':
					if(SAW_Freq + 0.1 <= 10)
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <main+0xa44>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe57 	bl	8000558 <__aeabi_f2d>
 80018aa:	a323      	add	r3, pc, #140	; (adr r3, 8001938 <main+0xa10>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fcf4 	bl	800029c <__adddf3>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <main+0xa48>)
 80018c2:	f7ff f91d 	bl	8000b00 <__aeabi_dcmple>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <main+0x9cc>
					{
						SAW_Freq += 0.1;
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <main+0xa44>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe41 	bl	8000558 <__aeabi_f2d>
 80018d6:	a318      	add	r3, pc, #96	; (adr r3, 8001938 <main+0xa10>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fcde 	bl	800029c <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f950 	bl	8000b8c <__aeabi_d2f>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a1f      	ldr	r2, [pc, #124]	; (800196c <main+0xa44>)
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <main+0xa08>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018fe:	2260      	movs	r2, #96	; 0x60
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f005 fefa 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Frequency is at Maximum \r\n");
 8001908:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800190c:	4919      	ldr	r1, [pc, #100]	; (8001974 <main+0xa4c>)
 800190e:	4618      	mov	r0, r3
 8001910:	f005 fefc 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001914:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc61 	bl	80001e0 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	b29a      	uxth	r2, r3
 8001922:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <main+0xa1c>)
 800192c:	f005 f897 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Ramp_Print;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <main+0xa20>)
 8001932:	2205      	movs	r2, #5
 8001934:	701a      	strb	r2, [r3, #0]
					break;
 8001936:	e293      	b.n	8001e60 <main+0xf38>
 8001938:	9999999a 	.word	0x9999999a
 800193c:	3fb99999 	.word	0x3fb99999
 8001940:	080091b0 	.word	0x080091b0
 8001944:	200002c8 	.word	0x200002c8
 8001948:	20000110 	.word	0x20000110
 800194c:	200000b4 	.word	0x200000b4
 8001950:	080091d4 	.word	0x080091d4
 8001954:	200000a4 	.word	0x200000a4
 8001958:	080091f4 	.word	0x080091f4
 800195c:	08009208 	.word	0x08009208
 8001960:	200000a8 	.word	0x200000a8
 8001964:	08009078 	.word	0x08009078
 8001968:	0800921c 	.word	0x0800921c
 800196c:	200000b8 	.word	0x200000b8
 8001970:	40240000 	.word	0x40240000
 8001974:	08009134 	.word	0x08009134
				case 's':
					if(SAW_Freq - 0.1 >= 0)
 8001978:	4bc9      	ldr	r3, [pc, #804]	; (8001ca0 <main+0xd78>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdeb 	bl	8000558 <__aeabi_f2d>
 8001982:	a3c3      	add	r3, pc, #780	; (adr r3, 8001c90 <main+0xd68>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe fc86 	bl	8000298 <__aeabi_dsub>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	f7ff f8ba 	bl	8000b14 <__aeabi_dcmpge>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d013      	beq.n	80019ce <main+0xaa6>
					{
						SAW_Freq -= 0.1;
 80019a6:	4bbe      	ldr	r3, [pc, #760]	; (8001ca0 <main+0xd78>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdd4 	bl	8000558 <__aeabi_f2d>
 80019b0:	a3b7      	add	r3, pc, #732	; (adr r3, 8001c90 <main+0xd68>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe fc6f 	bl	8000298 <__aeabi_dsub>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f8e3 	bl	8000b8c <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4ab5      	ldr	r2, [pc, #724]	; (8001ca0 <main+0xd78>)
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e01d      	b.n	8001a0a <main+0xae2>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019d8:	2260      	movs	r2, #96	; 0x60
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f005 fe8d 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Frequency is at Minimum \r\n");
 80019e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019e6:	49af      	ldr	r1, [pc, #700]	; (8001ca4 <main+0xd7c>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f005 fe8f 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80019ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fbf4 	bl	80001e0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a04:	48a8      	ldr	r0, [pc, #672]	; (8001ca8 <main+0xd80>)
 8001a06:	f005 f82a 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Ramp_Print;
 8001a0a:	4ba8      	ldr	r3, [pc, #672]	; (8001cac <main+0xd84>)
 8001a0c:	2205      	movs	r2, #5
 8001a0e:	701a      	strb	r2, [r3, #0]
					break;
 8001a10:	e226      	b.n	8001e60 <main+0xf38>
				case 'd':
					if(SAW_High + 0.1 <= 3.3)
 8001a12:	4ba7      	ldr	r3, [pc, #668]	; (8001cb0 <main+0xd88>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd9e 	bl	8000558 <__aeabi_f2d>
 8001a1c:	a39c      	add	r3, pc, #624	; (adr r3, 8001c90 <main+0xd68>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fc3b 	bl	800029c <__adddf3>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	a39a      	add	r3, pc, #616	; (adr r3, 8001c98 <main+0xd70>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7ff f864 	bl	8000b00 <__aeabi_dcmple>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d013      	beq.n	8001a66 <main+0xb3e>
					{
						SAW_High += 0.1;
 8001a3e:	4b9c      	ldr	r3, [pc, #624]	; (8001cb0 <main+0xd88>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd88 	bl	8000558 <__aeabi_f2d>
 8001a48:	a391      	add	r3, pc, #580	; (adr r3, 8001c90 <main+0xd68>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fc25 	bl	800029c <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff f897 	bl	8000b8c <__aeabi_d2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a93      	ldr	r2, [pc, #588]	; (8001cb0 <main+0xd88>)
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e01d      	b.n	8001aa2 <main+0xb7a>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a70:	2260      	movs	r2, #96	; 0x60
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f005 fe41 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage High is at Maximum \r\n");
 8001a7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a7e:	498d      	ldr	r1, [pc, #564]	; (8001cb4 <main+0xd8c>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f005 fe43 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fba8 	bl	80001e0 <strlen>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9c:	4882      	ldr	r0, [pc, #520]	; (8001ca8 <main+0xd80>)
 8001a9e:	f004 ffde 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Ramp_Print;
 8001aa2:	4b82      	ldr	r3, [pc, #520]	; (8001cac <main+0xd84>)
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	701a      	strb	r2, [r3, #0]
					break;
 8001aa8:	e1da      	b.n	8001e60 <main+0xf38>
				case 'z':
					if(SAW_High - 0.1 >= SAW_Low)
 8001aaa:	4b81      	ldr	r3, [pc, #516]	; (8001cb0 <main+0xd88>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd52 	bl	8000558 <__aeabi_f2d>
 8001ab4:	a376      	add	r3, pc, #472	; (adr r3, 8001c90 <main+0xd68>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fbed 	bl	8000298 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4614      	mov	r4, r2
 8001ac4:	461d      	mov	r5, r3
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <main+0xd90>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd44 	bl	8000558 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7ff f81c 	bl	8000b14 <__aeabi_dcmpge>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d013      	beq.n	8001b0a <main+0xbe2>
					{
						SAW_High -= 0.1;
 8001ae2:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <main+0xd88>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd36 	bl	8000558 <__aeabi_f2d>
 8001aec:	a368      	add	r3, pc, #416	; (adr r3, 8001c90 <main+0xd68>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fbd1 	bl	8000298 <__aeabi_dsub>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff f845 	bl	8000b8c <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a6a      	ldr	r2, [pc, #424]	; (8001cb0 <main+0xd88>)
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e01d      	b.n	8001b46 <main+0xc1e>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b14:	2260      	movs	r2, #96	; 0x60
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f005 fdef 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage High is at Voltage Low \r\n");
 8001b1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b22:	4966      	ldr	r1, [pc, #408]	; (8001cbc <main+0xd94>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f005 fdf1 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fb56 	bl	80001e0 <strlen>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b40:	4859      	ldr	r0, [pc, #356]	; (8001ca8 <main+0xd80>)
 8001b42:	f004 ff8c 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Ramp_Print;
 8001b46:	4b59      	ldr	r3, [pc, #356]	; (8001cac <main+0xd84>)
 8001b48:	2205      	movs	r2, #5
 8001b4a:	701a      	strb	r2, [r3, #0]
					break;
 8001b4c:	e188      	b.n	8001e60 <main+0xf38>
				case 'x':
					if(SAW_Low + 0.1 <= SAW_High)
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	; (8001cb8 <main+0xd90>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd00 	bl	8000558 <__aeabi_f2d>
 8001b58:	a34d      	add	r3, pc, #308	; (adr r3, 8001c90 <main+0xd68>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fb9d 	bl	800029c <__adddf3>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4614      	mov	r4, r2
 8001b68:	461d      	mov	r5, r3
 8001b6a:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <main+0xd88>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcf2 	bl	8000558 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe ffc0 	bl	8000b00 <__aeabi_dcmple>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d013      	beq.n	8001bae <main+0xc86>
					{
						SAW_Low += 0.1;
 8001b86:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <main+0xd90>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fce4 	bl	8000558 <__aeabi_f2d>
 8001b90:	a33f      	add	r3, pc, #252	; (adr r3, 8001c90 <main+0xd68>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fb81 	bl	800029c <__adddf3>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7fe fff3 	bl	8000b8c <__aeabi_d2f>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a43      	ldr	r2, [pc, #268]	; (8001cb8 <main+0xd90>)
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e01d      	b.n	8001bea <main+0xcc2>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bb8:	2260      	movs	r2, #96	; 0x60
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f005 fd9d 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage Low is at Voltage High \r\n");
 8001bc2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bc6:	493e      	ldr	r1, [pc, #248]	; (8001cc0 <main+0xd98>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 fd9f 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001bce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fb04 	bl	80001e0 <strlen>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be4:	4830      	ldr	r0, [pc, #192]	; (8001ca8 <main+0xd80>)
 8001be6:	f004 ff3a 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Ramp_Print;
 8001bea:	4b30      	ldr	r3, [pc, #192]	; (8001cac <main+0xd84>)
 8001bec:	2205      	movs	r2, #5
 8001bee:	701a      	strb	r2, [r3, #0]
					break;
 8001bf0:	e136      	b.n	8001e60 <main+0xf38>
				case 'c':
					if(SAW_Low - 0.1 >= 0)
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <main+0xd90>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fcae 	bl	8000558 <__aeabi_f2d>
 8001bfc:	a324      	add	r3, pc, #144	; (adr r3, 8001c90 <main+0xd68>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	f7fe fb49 	bl	8000298 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	f7fe ff7d 	bl	8000b14 <__aeabi_dcmpge>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <main+0xd20>
					{
						SAW_Low -= 0.1;
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <main+0xd90>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc97 	bl	8000558 <__aeabi_f2d>
 8001c2a:	a319      	add	r3, pc, #100	; (adr r3, 8001c90 <main+0xd68>)
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	f7fe fb32 	bl	8000298 <__aeabi_dsub>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ffa6 	bl	8000b8c <__aeabi_d2f>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <main+0xd90>)
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e01d      	b.n	8001c84 <main+0xd5c>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c52:	2260      	movs	r2, #96	; 0x60
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f005 fd50 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage Low is at Minimum \r\n");
 8001c5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c60:	4918      	ldr	r1, [pc, #96]	; (8001cc4 <main+0xd9c>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f005 fd52 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fab7 	bl	80001e0 <strlen>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <main+0xd80>)
 8001c80:	f004 feed 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Ramp_Print;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <main+0xd84>)
 8001c86:	2205      	movs	r2, #5
 8001c88:	701a      	strb	r2, [r3, #0]
					break;
 8001c8a:	e0e9      	b.n	8001e60 <main+0xf38>
 8001c8c:	f3af 8000 	nop.w
 8001c90:	9999999a 	.word	0x9999999a
 8001c94:	3fb99999 	.word	0x3fb99999
 8001c98:	66666666 	.word	0x66666666
 8001c9c:	400a6666 	.word	0x400a6666
 8001ca0:	200000b8 	.word	0x200000b8
 8001ca4:	08009150 	.word	0x08009150
 8001ca8:	200002c8 	.word	0x200002c8
 8001cac:	20000110 	.word	0x20000110
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	0800916c 	.word	0x0800916c
 8001cb8:	200000c4 	.word	0x200000c4
 8001cbc:	0800918c 	.word	0x0800918c
 8001cc0:	080091b0 	.word	0x080091b0
 8001cc4:	080091d4 	.word	0x080091d4
				case 'e':
					if(SAW_mode == 1)
 8001cc8:	4bc5      	ldr	r3, [pc, #788]	; (8001fe0 <main+0x10b8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d124      	bne.n	8001d1a <main+0xdf2>
					{
						SAW_mode = 0;
 8001cd0:	4bc3      	ldr	r3, [pc, #780]	; (8001fe0 <main+0x10b8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cdc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ce0:	2260      	movs	r2, #96	; 0x60
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 fd09 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Forward ramp\r\n");
 8001cea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cee:	49bd      	ldr	r1, [pc, #756]	; (8001fe4 <main+0x10bc>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f005 fd0b 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001cf6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fa70 	bl	80001e0 <strlen>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0c:	48b6      	ldr	r0, [pc, #728]	; (8001fe8 <main+0x10c0>)
 8001d0e:	f004 fea6 	bl	8006a5e <HAL_UART_Transmit>
						System_State = System_Ramp_Print;
 8001d12:	4bb6      	ldr	r3, [pc, #728]	; (8001fec <main+0x10c4>)
 8001d14:	2205      	movs	r2, #5
 8001d16:	701a      	strb	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
						sprintf(TxDataBuffer, "Backward ramp\r\n");
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						System_State = System_Ramp_Print;
					}
					break;
 8001d18:	e09f      	b.n	8001e5a <main+0xf32>
					else if(SAW_mode == 0)
 8001d1a:	4bb1      	ldr	r3, [pc, #708]	; (8001fe0 <main+0x10b8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 809b 	bne.w	8001e5a <main+0xf32>
						SAW_mode = 1;
 8001d24:	4bae      	ldr	r3, [pc, #696]	; (8001fe0 <main+0x10b8>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d30:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d34:	2260      	movs	r2, #96	; 0x60
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f005 fcdf 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Backward ramp\r\n");
 8001d3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d42:	49ab      	ldr	r1, [pc, #684]	; (8001ff0 <main+0x10c8>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f005 fce1 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fa46 	bl	80001e0 <strlen>
 8001d54:	4603      	mov	r3, r0
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d60:	48a1      	ldr	r0, [pc, #644]	; (8001fe8 <main+0x10c0>)
 8001d62:	f004 fe7c 	bl	8006a5e <HAL_UART_Transmit>
						System_State = System_Ramp_Print;
 8001d66:	4ba1      	ldr	r3, [pc, #644]	; (8001fec <main+0x10c4>)
 8001d68:	2205      	movs	r2, #5
 8001d6a:	701a      	strb	r2, [r3, #0]
					break;
 8001d6c:	e075      	b.n	8001e5a <main+0xf32>
				case 'w':
					if(run == 1)
 8001d6e:	4ba1      	ldr	r3, [pc, #644]	; (8001ff4 <main+0x10cc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d124      	bne.n	8001dc0 <main+0xe98>
					{
						run = 0;
 8001d76:	4b9f      	ldr	r3, [pc, #636]	; (8001ff4 <main+0x10cc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d86:	2260      	movs	r2, #96	; 0x60
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f005 fcb6 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Turning wave off\r\n");
 8001d90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d94:	4998      	ldr	r1, [pc, #608]	; (8001ff8 <main+0x10d0>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 fcb8 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fa1d 	bl	80001e0 <strlen>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	488d      	ldr	r0, [pc, #564]	; (8001fe8 <main+0x10c0>)
 8001db4:	f004 fe53 	bl	8006a5e <HAL_UART_Transmit>
						System_State = System_Ramp_Print;
 8001db8:	4b8c      	ldr	r3, [pc, #560]	; (8001fec <main+0x10c4>)
 8001dba:	2205      	movs	r2, #5
 8001dbc:	701a      	strb	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
						sprintf(TxDataBuffer, "Turning wave on\r\n");
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						System_State = System_Ramp_Print;
					}
					break;
 8001dbe:	e04e      	b.n	8001e5e <main+0xf36>
					else if(run == 0)
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ff4 <main+0x10cc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d14a      	bne.n	8001e5e <main+0xf36>
						run = 1;
 8001dc8:	4b8a      	ldr	r3, [pc, #552]	; (8001ff4 <main+0x10cc>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dd4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001dd8:	2260      	movs	r2, #96	; 0x60
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f005 fc8d 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Turning wave on\r\n");
 8001de2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001de6:	4985      	ldr	r1, [pc, #532]	; (8001ffc <main+0x10d4>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f005 fc8f 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001dee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe f9f4 	bl	80001e0 <strlen>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e04:	4878      	ldr	r0, [pc, #480]	; (8001fe8 <main+0x10c0>)
 8001e06:	f004 fe2a 	bl	8006a5e <HAL_UART_Transmit>
						System_State = System_Ramp_Print;
 8001e0a:	4b78      	ldr	r3, [pc, #480]	; (8001fec <main+0x10c4>)
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	701a      	strb	r2, [r3, #0]
					break;
 8001e10:	e025      	b.n	8001e5e <main+0xf36>
				case 'q':
					System_State = System_Main_Print;
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <main+0x10c4>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
					mode = 0;
 8001e18:	4b79      	ldr	r3, [pc, #484]	; (8002000 <main+0x10d8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
					run = 0;
 8001e1e:	4b75      	ldr	r3, [pc, #468]	; (8001ff4 <main+0x10cc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
					break;
 8001e24:	e01c      	b.n	8001e60 <main+0xf38>
				case -1:
					break;
				default:
					sprintf(TxDataBuffer, "Please press the correct button \r\n");
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4976      	ldr	r1, [pc, #472]	; (8002004 <main+0x10dc>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f005 fc6d 	bl	800770c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe f9d2 	bl	80001e0 <strlen>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	f107 011c 	add.w	r1, r7, #28
 8001e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e48:	4867      	ldr	r0, [pc, #412]	; (8001fe8 <main+0x10c0>)
 8001e4a:	f004 fe08 	bl	8006a5e <HAL_UART_Transmit>
					System_State = System_Ramp_Print;
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <main+0x10c4>)
 8001e50:	2205      	movs	r2, #5
 8001e52:	701a      	strb	r2, [r3, #0]
					break;
 8001e54:	e004      	b.n	8001e60 <main+0xf38>
					break;
 8001e56:	bf00      	nop
 8001e58:	e366      	b.n	8002528 <main+0x1600>
					break;
 8001e5a:	bf00      	nop
 8001e5c:	e364      	b.n	8002528 <main+0x1600>
					break;
 8001e5e:	bf00      	nop
				}
				break;
 8001e60:	e362      	b.n	8002528 <main+0x1600>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			case System_Sqr_Print:
				sprintf(TxDataBuffer, ":SquareMenu: \r\n a. + 0.1 Hz       s. - 0.1 Hz \r\n d. High + 0.1 V   z. High - 0.1 V \r\n x. Low + 0.1 V    c. Low - 0.1 V \r\n e. Duty + 5       r. Duty - 5 \r\n w. On/Off         q. Back \r\n\r\n\r\n");
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4968      	ldr	r1, [pc, #416]	; (8002008 <main+0x10e0>)
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f005 fc4f 	bl	800770c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe f9b4 	bl	80001e0 <strlen>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f107 011c 	add.w	r1, r7, #28
 8001e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e84:	4858      	ldr	r0, [pc, #352]	; (8001fe8 <main+0x10c0>)
 8001e86:	f004 fdea 	bl	8006a5e <HAL_UART_Transmit>
				System_State = System_Sqr_input;
 8001e8a:	4b58      	ldr	r3, [pc, #352]	; (8001fec <main+0x10c4>)
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	701a      	strb	r2, [r3, #0]
				break;
 8001e90:	e34a      	b.n	8002528 <main+0x1600>
			case System_Sqr_input:
				switch(inputchar)
 8001e92:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8001e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9a:	f000 8341 	beq.w	8002520 <main+0x15f8>
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	f2c0 8325 	blt.w	80024f0 <main+0x15c8>
 8001ea6:	2b7a      	cmp	r3, #122	; 0x7a
 8001ea8:	f300 8322 	bgt.w	80024f0 <main+0x15c8>
 8001eac:	2b61      	cmp	r3, #97	; 0x61
 8001eae:	f2c0 831f 	blt.w	80024f0 <main+0x15c8>
 8001eb2:	3b61      	subs	r3, #97	; 0x61
 8001eb4:	2b19      	cmp	r3, #25
 8001eb6:	f200 831b 	bhi.w	80024f0 <main+0x15c8>
 8001eba:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <main+0xf98>)
 8001ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec0:	08001f29 	.word	0x08001f29
 8001ec4:	080024f1 	.word	0x080024f1
 8001ec8:	080022af 	.word	0x080022af
 8001ecc:	080020cf 	.word	0x080020cf
 8001ed0:	08002389 	.word	0x08002389
 8001ed4:	080024f1 	.word	0x080024f1
 8001ed8:	080024f1 	.word	0x080024f1
 8001edc:	080024f1 	.word	0x080024f1
 8001ee0:	080024f1 	.word	0x080024f1
 8001ee4:	080024f1 	.word	0x080024f1
 8001ee8:	080024f1 	.word	0x080024f1
 8001eec:	080024f1 	.word	0x080024f1
 8001ef0:	080024f1 	.word	0x080024f1
 8001ef4:	080024f1 	.word	0x080024f1
 8001ef8:	080024f1 	.word	0x080024f1
 8001efc:	080024f1 	.word	0x080024f1
 8001f00:	080024dd 	.word	0x080024dd
 8001f04:	080023e1 	.word	0x080023e1
 8001f08:	08002021 	.word	0x08002021
 8001f0c:	080024f1 	.word	0x080024f1
 8001f10:	080024f1 	.word	0x080024f1
 8001f14:	080024f1 	.word	0x080024f1
 8001f18:	08002439 	.word	0x08002439
 8001f1c:	0800220b 	.word	0x0800220b
 8001f20:	080024f1 	.word	0x080024f1
 8001f24:	08002167 	.word	0x08002167
				{
				case 'a':
					Graphtimestamp = micros();
 8001f28:	f001 fa94 	bl	8003454 <micros>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4936      	ldr	r1, [pc, #216]	; (800200c <main+0x10e4>)
 8001f32:	e9c1 2300 	strd	r2, r3, [r1]
					SQR_mode = 0;
 8001f36:	4b36      	ldr	r3, [pc, #216]	; (8002010 <main+0x10e8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
					if(SQR_Freq + 0.1 <= 10)
 8001f3c:	4b35      	ldr	r3, [pc, #212]	; (8002014 <main+0x10ec>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fb09 	bl	8000558 <__aeabi_f2d>
 8001f46:	a324      	add	r3, pc, #144	; (adr r3, 8001fd8 <main+0x10b0>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe f9a6 	bl	800029c <__adddf3>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <main+0x10f0>)
 8001f5e:	f7fe fdcf 	bl	8000b00 <__aeabi_dcmple>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <main+0x1068>
					{
						SQR_Freq += 0.1;
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <main+0x10ec>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe faf3 	bl	8000558 <__aeabi_f2d>
 8001f72:	a319      	add	r3, pc, #100	; (adr r3, 8001fd8 <main+0x10b0>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe f990 	bl	800029c <__adddf3>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fe02 	bl	8000b8c <__aeabi_d2f>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4a22      	ldr	r2, [pc, #136]	; (8002014 <main+0x10ec>)
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e01d      	b.n	8001fcc <main+0x10a4>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f9a:	2260      	movs	r2, #96	; 0x60
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f005 fbac 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Frequency is at Maximum \r\n");
 8001fa4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fa8:	491c      	ldr	r1, [pc, #112]	; (800201c <main+0x10f4>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f005 fbae 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001fb0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe f913 	bl	80001e0 <strlen>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <main+0x10c0>)
 8001fc8:	f004 fd49 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Sqr_Print;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <main+0x10c4>)
 8001fce:	2207      	movs	r2, #7
 8001fd0:	701a      	strb	r2, [r3, #0]
					break;
 8001fd2:	e2a8      	b.n	8002526 <main+0x15fe>
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	9999999a 	.word	0x9999999a
 8001fdc:	3fb99999 	.word	0x3fb99999
 8001fe0:	200000bc 	.word	0x200000bc
 8001fe4:	080092c8 	.word	0x080092c8
 8001fe8:	200002c8 	.word	0x200002c8
 8001fec:	20000110 	.word	0x20000110
 8001ff0:	080092d8 	.word	0x080092d8
 8001ff4:	200000a4 	.word	0x200000a4
 8001ff8:	080091f4 	.word	0x080091f4
 8001ffc:	08009208 	.word	0x08009208
 8002000:	200000a8 	.word	0x200000a8
 8002004:	08009078 	.word	0x08009078
 8002008:	080092e8 	.word	0x080092e8
 800200c:	20000118 	.word	0x20000118
 8002010:	200000cc 	.word	0x200000cc
 8002014:	200000c8 	.word	0x200000c8
 8002018:	40240000 	.word	0x40240000
 800201c:	08009134 	.word	0x08009134
				case 's':
					Graphtimestamp = micros();
 8002020:	f001 fa18 	bl	8003454 <micros>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	49bb      	ldr	r1, [pc, #748]	; (8002318 <main+0x13f0>)
 800202a:	e9c1 2300 	strd	r2, r3, [r1]
					SQR_mode = 0;
 800202e:	4bbb      	ldr	r3, [pc, #748]	; (800231c <main+0x13f4>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
					if(SQR_Freq - 0.1 >= 0)
 8002034:	4bba      	ldr	r3, [pc, #744]	; (8002320 <main+0x13f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa8d 	bl	8000558 <__aeabi_f2d>
 800203e:	a3b2      	add	r3, pc, #712	; (adr r3, 8002308 <main+0x13e0>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe f928 	bl	8000298 <__aeabi_dsub>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	f7fe fd5c 	bl	8000b14 <__aeabi_dcmpge>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d013      	beq.n	800208a <main+0x1162>
					{
						SQR_Freq -= 0.1;
 8002062:	4baf      	ldr	r3, [pc, #700]	; (8002320 <main+0x13f8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa76 	bl	8000558 <__aeabi_f2d>
 800206c:	a3a6      	add	r3, pc, #664	; (adr r3, 8002308 <main+0x13e0>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe f911 	bl	8000298 <__aeabi_dsub>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fd85 	bl	8000b8c <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	4aa6      	ldr	r2, [pc, #664]	; (8002320 <main+0x13f8>)
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e01d      	b.n	80020c6 <main+0x119e>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002090:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002094:	2260      	movs	r2, #96	; 0x60
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f005 fb2f 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Frequency is at Minimum \r\n");
 800209e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020a2:	49a0      	ldr	r1, [pc, #640]	; (8002324 <main+0x13fc>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f005 fb31 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80020aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f896 	bl	80001e0 <strlen>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80020bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c0:	4899      	ldr	r0, [pc, #612]	; (8002328 <main+0x1400>)
 80020c2:	f004 fccc 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Sqr_Print;
 80020c6:	4b99      	ldr	r3, [pc, #612]	; (800232c <main+0x1404>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	701a      	strb	r2, [r3, #0]
					break;
 80020cc:	e22b      	b.n	8002526 <main+0x15fe>
				case 'd':
					if(SQR_High + 0.1 <= 3.3)
 80020ce:	4b98      	ldr	r3, [pc, #608]	; (8002330 <main+0x1408>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fa40 	bl	8000558 <__aeabi_f2d>
 80020d8:	a38b      	add	r3, pc, #556	; (adr r3, 8002308 <main+0x13e0>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe f8dd 	bl	800029c <__adddf3>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	a389      	add	r3, pc, #548	; (adr r3, 8002310 <main+0x13e8>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fd06 	bl	8000b00 <__aeabi_dcmple>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d013      	beq.n	8002122 <main+0x11fa>
					{
						SQR_High += 0.1;
 80020fa:	4b8d      	ldr	r3, [pc, #564]	; (8002330 <main+0x1408>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fa2a 	bl	8000558 <__aeabi_f2d>
 8002104:	a380      	add	r3, pc, #512	; (adr r3, 8002308 <main+0x13e0>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe f8c7 	bl	800029c <__adddf3>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f7fe fd39 	bl	8000b8c <__aeabi_d2f>
 800211a:	4603      	mov	r3, r0
 800211c:	4a84      	ldr	r2, [pc, #528]	; (8002330 <main+0x1408>)
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e01d      	b.n	800215e <main+0x1236>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002128:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800212c:	2260      	movs	r2, #96	; 0x60
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f005 fae3 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage High is at Maximum \r\n");
 8002136:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800213a:	497e      	ldr	r1, [pc, #504]	; (8002334 <main+0x140c>)
 800213c:	4618      	mov	r0, r3
 800213e:	f005 fae5 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002142:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f84a 	bl	80001e0 <strlen>
 800214c:	4603      	mov	r3, r0
 800214e:	b29a      	uxth	r2, r3
 8002150:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002158:	4873      	ldr	r0, [pc, #460]	; (8002328 <main+0x1400>)
 800215a:	f004 fc80 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Sqr_Print;
 800215e:	4b73      	ldr	r3, [pc, #460]	; (800232c <main+0x1404>)
 8002160:	2207      	movs	r2, #7
 8002162:	701a      	strb	r2, [r3, #0]
					break;
 8002164:	e1df      	b.n	8002526 <main+0x15fe>
				case 'z':
					if(SQR_High - 0.1 >= SQR_Low)
 8002166:	4b72      	ldr	r3, [pc, #456]	; (8002330 <main+0x1408>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe f9f4 	bl	8000558 <__aeabi_f2d>
 8002170:	a365      	add	r3, pc, #404	; (adr r3, 8002308 <main+0x13e0>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe f88f 	bl	8000298 <__aeabi_dsub>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4614      	mov	r4, r2
 8002180:	461d      	mov	r5, r3
 8002182:	4b6d      	ldr	r3, [pc, #436]	; (8002338 <main+0x1410>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9e6 	bl	8000558 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4620      	mov	r0, r4
 8002192:	4629      	mov	r1, r5
 8002194:	f7fe fcbe 	bl	8000b14 <__aeabi_dcmpge>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d013      	beq.n	80021c6 <main+0x129e>
					{
						SQR_High -= 0.1;
 800219e:	4b64      	ldr	r3, [pc, #400]	; (8002330 <main+0x1408>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9d8 	bl	8000558 <__aeabi_f2d>
 80021a8:	a357      	add	r3, pc, #348	; (adr r3, 8002308 <main+0x13e0>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f873 	bl	8000298 <__aeabi_dsub>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fce7 	bl	8000b8c <__aeabi_d2f>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a5b      	ldr	r2, [pc, #364]	; (8002330 <main+0x1408>)
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	e01d      	b.n	8002202 <main+0x12da>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021d0:	2260      	movs	r2, #96	; 0x60
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f005 fa91 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage High is at Voltage Low \r\n");
 80021da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021de:	4957      	ldr	r1, [pc, #348]	; (800233c <main+0x1414>)
 80021e0:	4618      	mov	r0, r3
 80021e2:	f005 fa93 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80021e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fd fff8 	bl	80001e0 <strlen>
 80021f0:	4603      	mov	r3, r0
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80021f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fc:	484a      	ldr	r0, [pc, #296]	; (8002328 <main+0x1400>)
 80021fe:	f004 fc2e 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Sqr_Print;
 8002202:	4b4a      	ldr	r3, [pc, #296]	; (800232c <main+0x1404>)
 8002204:	2207      	movs	r2, #7
 8002206:	701a      	strb	r2, [r3, #0]
					break;
 8002208:	e18d      	b.n	8002526 <main+0x15fe>
				case 'x':
					if(SQR_Low + 0.1 <= SQR_High)
 800220a:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <main+0x1410>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f9a2 	bl	8000558 <__aeabi_f2d>
 8002214:	a33c      	add	r3, pc, #240	; (adr r3, 8002308 <main+0x13e0>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fe f83f 	bl	800029c <__adddf3>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4614      	mov	r4, r2
 8002224:	461d      	mov	r5, r3
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <main+0x1408>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f994 	bl	8000558 <__aeabi_f2d>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fe fc62 	bl	8000b00 <__aeabi_dcmple>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d013      	beq.n	800226a <main+0x1342>
					{
						SQR_Low += 0.1;
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <main+0x1410>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f986 	bl	8000558 <__aeabi_f2d>
 800224c:	a32e      	add	r3, pc, #184	; (adr r3, 8002308 <main+0x13e0>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f823 	bl	800029c <__adddf3>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fc95 	bl	8000b8c <__aeabi_d2f>
 8002262:	4603      	mov	r3, r0
 8002264:	4a34      	ldr	r2, [pc, #208]	; (8002338 <main+0x1410>)
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e01d      	b.n	80022a6 <main+0x137e>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002270:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002274:	2260      	movs	r2, #96	; 0x60
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f005 fa3f 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage Low is at Voltage High \r\n");
 800227e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002282:	492f      	ldr	r1, [pc, #188]	; (8002340 <main+0x1418>)
 8002284:	4618      	mov	r0, r3
 8002286:	f005 fa41 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800228a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800228e:	4618      	mov	r0, r3
 8002290:	f7fd ffa6 	bl	80001e0 <strlen>
 8002294:	4603      	mov	r3, r0
 8002296:	b29a      	uxth	r2, r3
 8002298:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800229c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a0:	4821      	ldr	r0, [pc, #132]	; (8002328 <main+0x1400>)
 80022a2:	f004 fbdc 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Sqr_Print;
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <main+0x1404>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	701a      	strb	r2, [r3, #0]
					break;
 80022ac:	e13b      	b.n	8002526 <main+0x15fe>
				case 'c':
					if(SQR_Low - 0.1 >= 0)
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <main+0x1410>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f950 	bl	8000558 <__aeabi_f2d>
 80022b8:	a313      	add	r3, pc, #76	; (adr r3, 8002308 <main+0x13e0>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fd ffeb 	bl	8000298 <__aeabi_dsub>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	f7fe fc1f 	bl	8000b14 <__aeabi_dcmpge>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d033      	beq.n	8002344 <main+0x141c>
					{
						SQR_Low -= 0.1;
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <main+0x1410>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f939 	bl	8000558 <__aeabi_f2d>
 80022e6:	a308      	add	r3, pc, #32	; (adr r3, 8002308 <main+0x13e0>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fd ffd4 	bl	8000298 <__aeabi_dsub>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fc48 	bl	8000b8c <__aeabi_d2f>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <main+0x1410>)
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e03d      	b.n	8002380 <main+0x1458>
 8002304:	f3af 8000 	nop.w
 8002308:	9999999a 	.word	0x9999999a
 800230c:	3fb99999 	.word	0x3fb99999
 8002310:	66666666 	.word	0x66666666
 8002314:	400a6666 	.word	0x400a6666
 8002318:	20000118 	.word	0x20000118
 800231c:	200000cc 	.word	0x200000cc
 8002320:	200000c8 	.word	0x200000c8
 8002324:	08009150 	.word	0x08009150
 8002328:	200002c8 	.word	0x200002c8
 800232c:	20000110 	.word	0x20000110
 8002330:	2000000c 	.word	0x2000000c
 8002334:	0800916c 	.word	0x0800916c
 8002338:	200000d0 	.word	0x200000d0
 800233c:	0800918c 	.word	0x0800918c
 8002340:	080091b0 	.word	0x080091b0
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800234a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800234e:	2260      	movs	r2, #96	; 0x60
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f005 f9d2 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Voltage Low is at Minimum \r\n");
 8002358:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800235c:	49ae      	ldr	r1, [pc, #696]	; (8002618 <main+0x16f0>)
 800235e:	4618      	mov	r0, r3
 8002360:	f005 f9d4 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002364:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002368:	4618      	mov	r0, r3
 800236a:	f7fd ff39 	bl	80001e0 <strlen>
 800236e:	4603      	mov	r3, r0
 8002370:	b29a      	uxth	r2, r3
 8002372:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237a:	48a8      	ldr	r0, [pc, #672]	; (800261c <main+0x16f4>)
 800237c:	f004 fb6f 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Sqr_Print;
 8002380:	4ba7      	ldr	r3, [pc, #668]	; (8002620 <main+0x16f8>)
 8002382:	2207      	movs	r2, #7
 8002384:	701a      	strb	r2, [r3, #0]
					break;
 8002386:	e0ce      	b.n	8002526 <main+0x15fe>
				case 'e':
					if(duty_cycle + 5 <= 100)
 8002388:	4ba6      	ldr	r3, [pc, #664]	; (8002624 <main+0x16fc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b5f      	cmp	r3, #95	; 0x5f
 800238e:	dc05      	bgt.n	800239c <main+0x1474>
					{
						duty_cycle += 5;
 8002390:	4ba4      	ldr	r3, [pc, #656]	; (8002624 <main+0x16fc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3305      	adds	r3, #5
 8002396:	4aa3      	ldr	r2, [pc, #652]	; (8002624 <main+0x16fc>)
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <main+0x14b0>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80023a6:	2260      	movs	r2, #96	; 0x60
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 f9a6 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Duty cycle is at Maximum \r\n");
 80023b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023b4:	499c      	ldr	r1, [pc, #624]	; (8002628 <main+0x1700>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f005 f9a8 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80023bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fd ff0d 	bl	80001e0 <strlen>
 80023c6:	4603      	mov	r3, r0
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	4892      	ldr	r0, [pc, #584]	; (800261c <main+0x16f4>)
 80023d4:	f004 fb43 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Sqr_Print;
 80023d8:	4b91      	ldr	r3, [pc, #580]	; (8002620 <main+0x16f8>)
 80023da:	2207      	movs	r2, #7
 80023dc:	701a      	strb	r2, [r3, #0]
					break;
 80023de:	e0a2      	b.n	8002526 <main+0x15fe>
				case 'r':
					if(duty_cycle - 5 >= 0)
 80023e0:	4b90      	ldr	r3, [pc, #576]	; (8002624 <main+0x16fc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	dd05      	ble.n	80023f4 <main+0x14cc>
					{
						duty_cycle -= 5;
 80023e8:	4b8e      	ldr	r3, [pc, #568]	; (8002624 <main+0x16fc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3b05      	subs	r3, #5
 80023ee:	4a8d      	ldr	r2, [pc, #564]	; (8002624 <main+0x16fc>)
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <main+0x1508>
//						sprintf(TxDataBuffer, "Frequency is %d Hz \r\n" , LED_Frequency);
//						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
					}
					else
					{
						char TxDataBuffer[100] = { 0 };
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80023fe:	2260      	movs	r2, #96	; 0x60
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f005 f97a 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Duty cycle is at Minimum \r\n");
 8002408:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800240c:	4987      	ldr	r1, [pc, #540]	; (800262c <main+0x1704>)
 800240e:	4618      	mov	r0, r3
 8002410:	f005 f97c 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002414:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002418:	4618      	mov	r0, r3
 800241a:	f7fd fee1 	bl	80001e0 <strlen>
 800241e:	4603      	mov	r3, r0
 8002420:	b29a      	uxth	r2, r3
 8002422:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	487c      	ldr	r0, [pc, #496]	; (800261c <main+0x16f4>)
 800242c:	f004 fb17 	bl	8006a5e <HAL_UART_Transmit>
					}
					System_State = System_Sqr_Print;
 8002430:	4b7b      	ldr	r3, [pc, #492]	; (8002620 <main+0x16f8>)
 8002432:	2207      	movs	r2, #7
 8002434:	701a      	strb	r2, [r3, #0]
					break;
 8002436:	e076      	b.n	8002526 <main+0x15fe>
				case 'w':
					if(run == 1)
 8002438:	4b7d      	ldr	r3, [pc, #500]	; (8002630 <main+0x1708>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d124      	bne.n	800248a <main+0x1562>
					{
						run = 0;
 8002440:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <main+0x1708>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
 8002446:	2300      	movs	r3, #0
 8002448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800244c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002450:	2260      	movs	r2, #96	; 0x60
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f005 f951 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Turning wave off\r\n");
 800245a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800245e:	4975      	ldr	r1, [pc, #468]	; (8002634 <main+0x170c>)
 8002460:	4618      	mov	r0, r3
 8002462:	f005 f953 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002466:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd feb8 	bl	80001e0 <strlen>
 8002470:	4603      	mov	r3, r0
 8002472:	b29a      	uxth	r2, r3
 8002474:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247c:	4867      	ldr	r0, [pc, #412]	; (800261c <main+0x16f4>)
 800247e:	f004 faee 	bl	8006a5e <HAL_UART_Transmit>
						System_State = System_Sqr_Print;
 8002482:	4b67      	ldr	r3, [pc, #412]	; (8002620 <main+0x16f8>)
 8002484:	2207      	movs	r2, #7
 8002486:	701a      	strb	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
						sprintf(TxDataBuffer, "Turning wave on\r\n");
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						System_State = System_Sqr_Print;
					}
					break;
 8002488:	e04c      	b.n	8002524 <main+0x15fc>
					else if(run == 0)
 800248a:	4b69      	ldr	r3, [pc, #420]	; (8002630 <main+0x1708>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d148      	bne.n	8002524 <main+0x15fc>
						run = 1;
 8002492:	4b67      	ldr	r3, [pc, #412]	; (8002630 <main+0x1708>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
						char TxDataBuffer[100] = { 0 };
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800249e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80024a2:	2260      	movs	r2, #96	; 0x60
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 f928 	bl	80076fc <memset>
						sprintf(TxDataBuffer, "Turning wave on\r\n");
 80024ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024b0:	4961      	ldr	r1, [pc, #388]	; (8002638 <main+0x1710>)
 80024b2:	4618      	mov	r0, r3
 80024b4:	f005 f92a 	bl	800770c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80024b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd fe8f 	bl	80001e0 <strlen>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ce:	4853      	ldr	r0, [pc, #332]	; (800261c <main+0x16f4>)
 80024d0:	f004 fac5 	bl	8006a5e <HAL_UART_Transmit>
						System_State = System_Sqr_Print;
 80024d4:	4b52      	ldr	r3, [pc, #328]	; (8002620 <main+0x16f8>)
 80024d6:	2207      	movs	r2, #7
 80024d8:	701a      	strb	r2, [r3, #0]
					break;
 80024da:	e023      	b.n	8002524 <main+0x15fc>
				case 'q':
					System_State = System_Main_Print;
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <main+0x16f8>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
					mode = 0;
 80024e2:	4b56      	ldr	r3, [pc, #344]	; (800263c <main+0x1714>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
					run = 0;
 80024e8:	4b51      	ldr	r3, [pc, #324]	; (8002630 <main+0x1708>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
					break;
 80024ee:	e01a      	b.n	8002526 <main+0x15fe>
				case -1:
					break;
				default:
					sprintf(TxDataBuffer, "Please press the correct button \r\n");
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	4952      	ldr	r1, [pc, #328]	; (8002640 <main+0x1718>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	f005 f908 	bl	800770c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	4618      	mov	r0, r3
 8002502:	f7fd fe6d 	bl	80001e0 <strlen>
 8002506:	4603      	mov	r3, r0
 8002508:	b29a      	uxth	r2, r3
 800250a:	f107 011c 	add.w	r1, r7, #28
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	4842      	ldr	r0, [pc, #264]	; (800261c <main+0x16f4>)
 8002514:	f004 faa3 	bl	8006a5e <HAL_UART_Transmit>
					System_State = System_Sqr_Print;
 8002518:	4b41      	ldr	r3, [pc, #260]	; (8002620 <main+0x16f8>)
 800251a:	2207      	movs	r2, #7
 800251c:	701a      	strb	r2, [r3, #0]
					break;
 800251e:	e002      	b.n	8002526 <main+0x15fe>
					break;
 8002520:	bf00      	nop
 8002522:	e000      	b.n	8002526 <main+0x15fe>
					break;
 8002524:	bf00      	nop
				}
				break;
 8002526:	bf00      	nop

		}

//		run
		if (micros() - timestamp > 1000)
 8002528:	f000 ff94 	bl	8003454 <micros>
 800252c:	4b45      	ldr	r3, [pc, #276]	; (8002644 <main+0x171c>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	ebb0 0a02 	subs.w	sl, r0, r2
 8002536:	eb61 0b03 	sbc.w	fp, r1, r3
 800253a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	455b      	cmp	r3, fp
 8002544:	bf08      	it	eq
 8002546:	4552      	cmpeq	r2, sl
 8002548:	f080 84b4 	bcs.w	8002eb4 <main+0x1f8c>
		{
			timestamp = micros();
 800254c:	f000 ff82 	bl	8003454 <micros>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	493b      	ldr	r1, [pc, #236]	; (8002644 <main+0x171c>)
 8002556:	e9c1 2300 	strd	r2, r3, [r1]
			if(run == 1)
 800255a:	4b35      	ldr	r3, [pc, #212]	; (8002630 <main+0x1708>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 8484 	bne.w	8002e6c <main+0x1f44>
			{
				if(mode == 1)
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <main+0x1714>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	f040 8101 	bne.w	8002770 <main+0x1848>
				{
					SIN_Amplitude = (((SIN_High - SIN_Low)/3.3)*4095.0)/2.0;
 800256e:	4b36      	ldr	r3, [pc, #216]	; (8002648 <main+0x1720>)
 8002570:	ed93 7a00 	vldr	s14, [r3]
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <main+0x1724>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257e:	ee17 0a90 	vmov	r0, s15
 8002582:	f7fd ffe9 	bl	8000558 <__aeabi_f2d>
 8002586:	a31e      	add	r3, pc, #120	; (adr r3, 8002600 <main+0x16d8>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f7fe f966 	bl	800085c <__aeabi_ddiv>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	a31b      	add	r3, pc, #108	; (adr r3, 8002608 <main+0x16e0>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f7fe f833 	bl	8000608 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b2:	f7fe f953 	bl	800085c <__aeabi_ddiv>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f7fe fae5 	bl	8000b8c <__aeabi_d2f>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a22      	ldr	r2, [pc, #136]	; (8002650 <main+0x1728>)
 80025c6:	6013      	str	r3, [r2, #0]
//					SinFunction
					if(SIN_Freq <= 0.1)
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <main+0x172c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ffc3 	bl	8000558 <__aeabi_f2d>
 80025d2:	a30f      	add	r3, pc, #60	; (adr r3, 8002610 <main+0x16e8>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	f7fe fa92 	bl	8000b00 <__aeabi_dcmple>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03e      	beq.n	8002660 <main+0x1738>
					{
//						dataOut = (SIN_Amplitude + ((SIN_Low/3.3)*4095.0));
						uintdataOut = dataOut;
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <main+0x1730>)
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ec:	ee17 3a90 	vmov	r3, s15
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <main+0x1734>)
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	f000 bc47 	b.w	8002e88 <main+0x1f60>
 80025fa:	bf00      	nop
 80025fc:	f3af 8000 	nop.w
 8002600:	66666666 	.word	0x66666666
 8002604:	400a6666 	.word	0x400a6666
 8002608:	00000000 	.word	0x00000000
 800260c:	40affe00 	.word	0x40affe00
 8002610:	9999999a 	.word	0x9999999a
 8002614:	3fb99999 	.word	0x3fb99999
 8002618:	080091d4 	.word	0x080091d4
 800261c:	200002c8 	.word	0x200002c8
 8002620:	20000110 	.word	0x20000110
 8002624:	20000008 	.word	0x20000008
 8002628:	080093a4 	.word	0x080093a4
 800262c:	080093c0 	.word	0x080093c0
 8002630:	200000a4 	.word	0x200000a4
 8002634:	080091f4 	.word	0x080091f4
 8002638:	08009208 	.word	0x08009208
 800263c:	200000a8 	.word	0x200000a8
 8002640:	08009078 	.word	0x08009078
 8002644:	20000120 	.word	0x20000120
 8002648:	20000000 	.word	0x20000000
 800264c:	200000b4 	.word	0x200000b4
 8002650:	200000b0 	.word	0x200000b0
 8002654:	200000ac 	.word	0x200000ac
 8002658:	200000e8 	.word	0x200000e8
 800265c:	200000ec 	.word	0x200000ec
					}
					else
					{
						dataOut = SIN_Amplitude*sin(2*M_PI*SIN_Freq*((micros() - Graphtimestamp)/1000000.0));
 8002660:	4bcb      	ldr	r3, [pc, #812]	; (8002990 <main+0x1a68>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff77 	bl	8000558 <__aeabi_f2d>
 800266a:	4604      	mov	r4, r0
 800266c:	460d      	mov	r5, r1
 800266e:	4bc9      	ldr	r3, [pc, #804]	; (8002994 <main+0x1a6c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff70 	bl	8000558 <__aeabi_f2d>
 8002678:	a3b9      	add	r3, pc, #740	; (adr r3, 8002960 <main+0x1a38>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fd ffc3 	bl	8000608 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4690      	mov	r8, r2
 8002688:	4699      	mov	r9, r3
 800268a:	f000 fee3 	bl	8003454 <micros>
 800268e:	4bc2      	ldr	r3, [pc, #776]	; (8002998 <main+0x1a70>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	1a86      	subs	r6, r0, r2
 8002696:	613e      	str	r6, [r7, #16]
 8002698:	eb61 0303 	sbc.w	r3, r1, r3
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a2:	f7fd ff7b 	bl	800059c <__aeabi_ul2d>
 80026a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8002968 <main+0x1a40>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fe f8d6 	bl	800085c <__aeabi_ddiv>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4640      	mov	r0, r8
 80026b6:	4649      	mov	r1, r9
 80026b8:	f7fd ffa6 	bl	8000608 <__aeabi_dmul>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	ec43 2b17 	vmov	d7, r2, r3
 80026c4:	eeb0 0a47 	vmov.f32	s0, s14
 80026c8:	eef0 0a67 	vmov.f32	s1, s15
 80026cc:	f005 fc4c 	bl	8007f68 <sin>
 80026d0:	ec53 2b10 	vmov	r2, r3, d0
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd ff96 	bl	8000608 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe fa52 	bl	8000b8c <__aeabi_d2f>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4aac      	ldr	r2, [pc, #688]	; (800299c <main+0x1a74>)
 80026ec:	6013      	str	r3, [r2, #0]
						dataOut += (SIN_Amplitude + ((SIN_Low/3.3)*4095.0));
 80026ee:	4bab      	ldr	r3, [pc, #684]	; (800299c <main+0x1a74>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd ff30 	bl	8000558 <__aeabi_f2d>
 80026f8:	4680      	mov	r8, r0
 80026fa:	4689      	mov	r9, r1
 80026fc:	4ba4      	ldr	r3, [pc, #656]	; (8002990 <main+0x1a68>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd ff29 	bl	8000558 <__aeabi_f2d>
 8002706:	4604      	mov	r4, r0
 8002708:	460d      	mov	r5, r1
 800270a:	4ba5      	ldr	r3, [pc, #660]	; (80029a0 <main+0x1a78>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff22 	bl	8000558 <__aeabi_f2d>
 8002714:	a396      	add	r3, pc, #600	; (adr r3, 8002970 <main+0x1a48>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fe f89f 	bl	800085c <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	a394      	add	r3, pc, #592	; (adr r3, 8002978 <main+0x1a50>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff6c 	bl	8000608 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fd fdb0 	bl	800029c <__adddf3>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4640      	mov	r0, r8
 8002742:	4649      	mov	r1, r9
 8002744:	f7fd fdaa 	bl	800029c <__adddf3>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f7fe fa1c 	bl	8000b8c <__aeabi_d2f>
 8002754:	4603      	mov	r3, r0
 8002756:	4a91      	ldr	r2, [pc, #580]	; (800299c <main+0x1a74>)
 8002758:	6013      	str	r3, [r2, #0]
						uintdataOut = dataOut;
 800275a:	4b90      	ldr	r3, [pc, #576]	; (800299c <main+0x1a74>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002764:	ee17 3a90 	vmov	r3, s15
 8002768:	b29a      	uxth	r2, r3
 800276a:	4b8e      	ldr	r3, [pc, #568]	; (80029a4 <main+0x1a7c>)
 800276c:	801a      	strh	r2, [r3, #0]
 800276e:	e38b      	b.n	8002e88 <main+0x1f60>
					}
				}
				else if(mode == 2)
 8002770:	4b8d      	ldr	r3, [pc, #564]	; (80029a8 <main+0x1a80>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b02      	cmp	r3, #2
 8002776:	f040 81ee 	bne.w	8002b56 <main+0x1c2e>
				{
					SAW_Amplitude = ((SAW_High-SAW_Low)/3.3)*4095;
 800277a:	4b8c      	ldr	r3, [pc, #560]	; (80029ac <main+0x1a84>)
 800277c:	ed93 7a00 	vldr	s14, [r3]
 8002780:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <main+0x1a88>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278a:	ee17 0a90 	vmov	r0, s15
 800278e:	f7fd fee3 	bl	8000558 <__aeabi_f2d>
 8002792:	a377      	add	r3, pc, #476	; (adr r3, 8002970 <main+0x1a48>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fe f860 	bl	800085c <__aeabi_ddiv>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	a374      	add	r3, pc, #464	; (adr r3, 8002978 <main+0x1a50>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fd ff2d 	bl	8000608 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fe f9e9 	bl	8000b8c <__aeabi_d2f>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a7d      	ldr	r2, [pc, #500]	; (80029b4 <main+0x1a8c>)
 80027be:	6013      	str	r3, [r2, #0]
//					Ramp
					if(SAW_Freq <= 0.1)
 80027c0:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <main+0x1a90>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd fec7 	bl	8000558 <__aeabi_f2d>
 80027ca:	a36d      	add	r3, pc, #436	; (adr r3, 8002980 <main+0x1a58>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fe f996 	bl	8000b00 <__aeabi_dcmple>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <main+0x18c8>
					{
//						dataOut = ((SAW_Low/3.3)*4095.0) + (SAW_Amplitude/2.0);
						uintdataOut = dataOut;
 80027da:	4b70      	ldr	r3, [pc, #448]	; (800299c <main+0x1a74>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e4:	ee17 3a90 	vmov	r3, s15
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	4b6e      	ldr	r3, [pc, #440]	; (80029a4 <main+0x1a7c>)
 80027ec:	801a      	strh	r2, [r3, #0]
 80027ee:	e34b      	b.n	8002e88 <main+0x1f60>

					}
					else
					{
						if(SAW_mode == 0)
 80027f0:	4b72      	ldr	r3, [pc, #456]	; (80029bc <main+0x1a94>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 80ee 	bne.w	80029d6 <main+0x1aae>
						{
							dataOut += (SAW_Amplitude / (1/SAW_Freq)) * 0.001;
 80027fa:	4b68      	ldr	r3, [pc, #416]	; (800299c <main+0x1a74>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd feaa 	bl	8000558 <__aeabi_f2d>
 8002804:	4604      	mov	r4, r0
 8002806:	460d      	mov	r5, r1
 8002808:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <main+0x1a8c>)
 800280a:	ed93 7a00 	vldr	s14, [r3]
 800280e:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <main+0x1a90>)
 8002810:	edd3 6a00 	vldr	s13, [r3]
 8002814:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002818:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800281c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002820:	ee16 0a90 	vmov	r0, s13
 8002824:	f7fd fe98 	bl	8000558 <__aeabi_f2d>
 8002828:	a357      	add	r3, pc, #348	; (adr r3, 8002988 <main+0x1a60>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	f7fd feeb 	bl	8000608 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4620      	mov	r0, r4
 8002838:	4629      	mov	r1, r5
 800283a:	f7fd fd2f 	bl	800029c <__adddf3>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f7fe f9a1 	bl	8000b8c <__aeabi_d2f>
 800284a:	4603      	mov	r3, r0
 800284c:	4a53      	ldr	r2, [pc, #332]	; (800299c <main+0x1a74>)
 800284e:	6013      	str	r3, [r2, #0]
							if(dataOut >= ((SAW_High/3.3)*4095.0))
 8002850:	4b52      	ldr	r3, [pc, #328]	; (800299c <main+0x1a74>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe7f 	bl	8000558 <__aeabi_f2d>
 800285a:	4604      	mov	r4, r0
 800285c:	460d      	mov	r5, r1
 800285e:	4b53      	ldr	r3, [pc, #332]	; (80029ac <main+0x1a84>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe78 	bl	8000558 <__aeabi_f2d>
 8002868:	a341      	add	r3, pc, #260	; (adr r3, 8002970 <main+0x1a48>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd fff5 	bl	800085c <__aeabi_ddiv>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	a33f      	add	r3, pc, #252	; (adr r3, 8002978 <main+0x1a50>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fd fec2 	bl	8000608 <__aeabi_dmul>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4620      	mov	r0, r4
 800288a:	4629      	mov	r1, r5
 800288c:	f7fe f942 	bl	8000b14 <__aeabi_dcmpge>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8094 	beq.w	80029c0 <main+0x1a98>
							{
								dataOut = ((SAW_High/3.3)*4095.0);
 8002898:	4b44      	ldr	r3, [pc, #272]	; (80029ac <main+0x1a84>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe5b 	bl	8000558 <__aeabi_f2d>
 80028a2:	a333      	add	r3, pc, #204	; (adr r3, 8002970 <main+0x1a48>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd ffd8 	bl	800085c <__aeabi_ddiv>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	a330      	add	r3, pc, #192	; (adr r3, 8002978 <main+0x1a50>)
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	f7fd fea5 	bl	8000608 <__aeabi_dmul>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	f7fe f961 	bl	8000b8c <__aeabi_d2f>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4a33      	ldr	r2, [pc, #204]	; (800299c <main+0x1a74>)
 80028ce:	6013      	str	r3, [r2, #0]
								uintdataOut = dataOut;
 80028d0:	4b32      	ldr	r3, [pc, #200]	; (800299c <main+0x1a74>)
 80028d2:	edd3 7a00 	vldr	s15, [r3]
 80028d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028da:	ee17 3a90 	vmov	r3, s15
 80028de:	b29a      	uxth	r2, r3
 80028e0:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <main+0x1a7c>)
 80028e2:	801a      	strh	r2, [r3, #0]
								dataOut = ((SAW_Low/3.3)*4095.0) - ((SAW_Amplitude / (1/SAW_Freq)) * 0.001);
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <main+0x1a88>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fe35 	bl	8000558 <__aeabi_f2d>
 80028ee:	a320      	add	r3, pc, #128	; (adr r3, 8002970 <main+0x1a48>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd ffb2 	bl	800085c <__aeabi_ddiv>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	a31d      	add	r3, pc, #116	; (adr r3, 8002978 <main+0x1a50>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fe7f 	bl	8000608 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4614      	mov	r4, r2
 8002910:	461d      	mov	r5, r3
 8002912:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <main+0x1a8c>)
 8002914:	ed93 7a00 	vldr	s14, [r3]
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <main+0x1a90>)
 800291a:	edd3 6a00 	vldr	s13, [r3]
 800291e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002922:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002926:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800292a:	ee16 0a90 	vmov	r0, s13
 800292e:	f7fd fe13 	bl	8000558 <__aeabi_f2d>
 8002932:	a315      	add	r3, pc, #84	; (adr r3, 8002988 <main+0x1a60>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd fe66 	bl	8000608 <__aeabi_dmul>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fca8 	bl	8000298 <__aeabi_dsub>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f91c 	bl	8000b8c <__aeabi_d2f>
 8002954:	4603      	mov	r3, r0
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <main+0x1a74>)
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e295      	b.n	8002e88 <main+0x1f60>
 800295c:	f3af 8000 	nop.w
 8002960:	54442d18 	.word	0x54442d18
 8002964:	401921fb 	.word	0x401921fb
 8002968:	00000000 	.word	0x00000000
 800296c:	412e8480 	.word	0x412e8480
 8002970:	66666666 	.word	0x66666666
 8002974:	400a6666 	.word	0x400a6666
 8002978:	00000000 	.word	0x00000000
 800297c:	40affe00 	.word	0x40affe00
 8002980:	9999999a 	.word	0x9999999a
 8002984:	3fb99999 	.word	0x3fb99999
 8002988:	d2f1a9fc 	.word	0xd2f1a9fc
 800298c:	3f50624d 	.word	0x3f50624d
 8002990:	200000b0 	.word	0x200000b0
 8002994:	200000ac 	.word	0x200000ac
 8002998:	20000118 	.word	0x20000118
 800299c:	200000e8 	.word	0x200000e8
 80029a0:	200000b4 	.word	0x200000b4
 80029a4:	200000ec 	.word	0x200000ec
 80029a8:	200000a8 	.word	0x200000a8
 80029ac:	20000004 	.word	0x20000004
 80029b0:	200000c4 	.word	0x200000c4
 80029b4:	200000c0 	.word	0x200000c0
 80029b8:	200000b8 	.word	0x200000b8
 80029bc:	200000bc 	.word	0x200000bc
							}
							else
							{
								uintdataOut = dataOut;
 80029c0:	4ba7      	ldr	r3, [pc, #668]	; (8002c60 <main+0x1d38>)
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ca:	ee17 3a90 	vmov	r3, s15
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	4ba4      	ldr	r3, [pc, #656]	; (8002c64 <main+0x1d3c>)
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	e258      	b.n	8002e88 <main+0x1f60>
							}
						}
						else if(SAW_mode == 1)
 80029d6:	4ba4      	ldr	r3, [pc, #656]	; (8002c68 <main+0x1d40>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	f040 8254 	bne.w	8002e88 <main+0x1f60>
						{
							dataOut -= (SAW_Amplitude / (1/SAW_Freq)) * 0.001;
 80029e0:	4b9f      	ldr	r3, [pc, #636]	; (8002c60 <main+0x1d38>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fdb7 	bl	8000558 <__aeabi_f2d>
 80029ea:	4604      	mov	r4, r0
 80029ec:	460d      	mov	r5, r1
 80029ee:	4b9f      	ldr	r3, [pc, #636]	; (8002c6c <main+0x1d44>)
 80029f0:	ed93 7a00 	vldr	s14, [r3]
 80029f4:	4b9e      	ldr	r3, [pc, #632]	; (8002c70 <main+0x1d48>)
 80029f6:	edd3 6a00 	vldr	s13, [r3]
 80029fa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80029fe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002a02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a06:	ee16 0a90 	vmov	r0, s13
 8002a0a:	f7fd fda5 	bl	8000558 <__aeabi_f2d>
 8002a0e:	a38c      	add	r3, pc, #560	; (adr r3, 8002c40 <main+0x1d18>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fdf8 	bl	8000608 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fc3a 	bl	8000298 <__aeabi_dsub>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7fe f8ae 	bl	8000b8c <__aeabi_d2f>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a8b      	ldr	r2, [pc, #556]	; (8002c60 <main+0x1d38>)
 8002a34:	6013      	str	r3, [r2, #0]
							if(dataOut <= ((SAW_Low/3.3)*4095.0))
 8002a36:	4b8a      	ldr	r3, [pc, #552]	; (8002c60 <main+0x1d38>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fd8c 	bl	8000558 <__aeabi_f2d>
 8002a40:	4604      	mov	r4, r0
 8002a42:	460d      	mov	r5, r1
 8002a44:	4b8b      	ldr	r3, [pc, #556]	; (8002c74 <main+0x1d4c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fd85 	bl	8000558 <__aeabi_f2d>
 8002a4e:	a37e      	add	r3, pc, #504	; (adr r3, 8002c48 <main+0x1d20>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd ff02 	bl	800085c <__aeabi_ddiv>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	a37b      	add	r3, pc, #492	; (adr r3, 8002c50 <main+0x1d28>)
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a66:	f7fd fdcf 	bl	8000608 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	f7fe f845 	bl	8000b00 <__aeabi_dcmple>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d061      	beq.n	8002b40 <main+0x1c18>
							{
								dataOut = ((SAW_Low/3.3)*4095.0);
 8002a7c:	4b7d      	ldr	r3, [pc, #500]	; (8002c74 <main+0x1d4c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd69 	bl	8000558 <__aeabi_f2d>
 8002a86:	a370      	add	r3, pc, #448	; (adr r3, 8002c48 <main+0x1d20>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fee6 	bl	800085c <__aeabi_ddiv>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	a36d      	add	r3, pc, #436	; (adr r3, 8002c50 <main+0x1d28>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	f7fd fdb3 	bl	8000608 <__aeabi_dmul>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7fe f86f 	bl	8000b8c <__aeabi_d2f>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4a6b      	ldr	r2, [pc, #428]	; (8002c60 <main+0x1d38>)
 8002ab2:	6013      	str	r3, [r2, #0]
								uintdataOut = dataOut;
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <main+0x1d38>)
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002abe:	ee17 3a90 	vmov	r3, s15
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <main+0x1d3c>)
 8002ac6:	801a      	strh	r2, [r3, #0]
								dataOut = ((SAW_High/3.3)*4095.0) + ((SAW_Amplitude / (1/SAW_Freq)) * 0.001);
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <main+0x1d50>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fd43 	bl	8000558 <__aeabi_f2d>
 8002ad2:	a35d      	add	r3, pc, #372	; (adr r3, 8002c48 <main+0x1d20>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fec0 	bl	800085c <__aeabi_ddiv>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	a35a      	add	r3, pc, #360	; (adr r3, 8002c50 <main+0x1d28>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fd8d 	bl	8000608 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4614      	mov	r4, r2
 8002af4:	461d      	mov	r5, r3
 8002af6:	4b5d      	ldr	r3, [pc, #372]	; (8002c6c <main+0x1d44>)
 8002af8:	ed93 7a00 	vldr	s14, [r3]
 8002afc:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <main+0x1d48>)
 8002afe:	edd3 6a00 	vldr	s13, [r3]
 8002b02:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b06:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002b0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b0e:	ee16 0a90 	vmov	r0, s13
 8002b12:	f7fd fd21 	bl	8000558 <__aeabi_f2d>
 8002b16:	a34a      	add	r3, pc, #296	; (adr r3, 8002c40 <main+0x1d18>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fd74 	bl	8000608 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4620      	mov	r0, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	f7fd fbb8 	bl	800029c <__adddf3>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fe f82a 	bl	8000b8c <__aeabi_d2f>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a49      	ldr	r2, [pc, #292]	; (8002c60 <main+0x1d38>)
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e1a3      	b.n	8002e88 <main+0x1f60>
							}
							else
							{
								uintdataOut = dataOut;
 8002b40:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <main+0x1d38>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b4a:	ee17 3a90 	vmov	r3, s15
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <main+0x1d3c>)
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	e198      	b.n	8002e88 <main+0x1f60>
							}
						}
					}
				}
				else if(mode == 3)
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <main+0x1d54>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	f040 8194 	bne.w	8002e88 <main+0x1f60>
				{
//					Square
					if(SQR_Freq < 0.1)
 8002b60:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <main+0x1d58>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fcf7 	bl	8000558 <__aeabi_f2d>
 8002b6a:	a33b      	add	r3, pc, #236	; (adr r3, 8002c58 <main+0x1d30>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd ffbc 	bl	8000aec <__aeabi_dcmplt>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <main+0x1c68>
					{
//						dataOut = 0;
						uintdataOut = dataOut;
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <main+0x1d38>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b84:	ee17 3a90 	vmov	r3, s15
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <main+0x1d3c>)
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	e17b      	b.n	8002e88 <main+0x1f60>
					}
					else
					{
						if(duty_cycle == 0)
 8002b90:	4b3c      	ldr	r3, [pc, #240]	; (8002c84 <main+0x1d5c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d126      	bne.n	8002be6 <main+0x1cbe>
						{
							dataOut = ((SQR_Low/3.3)*4095.0);
 8002b98:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <main+0x1d60>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fcdb 	bl	8000558 <__aeabi_f2d>
 8002ba2:	a329      	add	r3, pc, #164	; (adr r3, 8002c48 <main+0x1d20>)
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f7fd fe58 	bl	800085c <__aeabi_ddiv>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	a326      	add	r3, pc, #152	; (adr r3, 8002c50 <main+0x1d28>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f7fd fd25 	bl	8000608 <__aeabi_dmul>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f7fd ffe1 	bl	8000b8c <__aeabi_d2f>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <main+0x1d38>)
 8002bce:	6013      	str	r3, [r2, #0]
							uintdataOut = dataOut;
 8002bd0:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <main+0x1d38>)
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bda:	ee17 3a90 	vmov	r3, s15
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <main+0x1d3c>)
 8002be2:	801a      	strh	r2, [r3, #0]
 8002be4:	e150      	b.n	8002e88 <main+0x1f60>
						}
						else if(duty_cycle == 100)
 8002be6:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <main+0x1d5c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d150      	bne.n	8002c90 <main+0x1d68>
						{
							dataOut = ((SQR_High/3.3)*4095.0);
 8002bee:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <main+0x1d64>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fcb0 	bl	8000558 <__aeabi_f2d>
 8002bf8:	a313      	add	r3, pc, #76	; (adr r3, 8002c48 <main+0x1d20>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	f7fd fe2d 	bl	800085c <__aeabi_ddiv>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	a311      	add	r3, pc, #68	; (adr r3, 8002c50 <main+0x1d28>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f7fd fcfa 	bl	8000608 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fd ffb6 	bl	8000b8c <__aeabi_d2f>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <main+0x1d38>)
 8002c24:	6013      	str	r3, [r2, #0]
							uintdataOut = dataOut;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <main+0x1d38>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c30:	ee17 3a90 	vmov	r3, s15
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <main+0x1d3c>)
 8002c38:	801a      	strh	r2, [r3, #0]
 8002c3a:	e125      	b.n	8002e88 <main+0x1f60>
 8002c3c:	f3af 8000 	nop.w
 8002c40:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c44:	3f50624d 	.word	0x3f50624d
 8002c48:	66666666 	.word	0x66666666
 8002c4c:	400a6666 	.word	0x400a6666
 8002c50:	00000000 	.word	0x00000000
 8002c54:	40affe00 	.word	0x40affe00
 8002c58:	9999999a 	.word	0x9999999a
 8002c5c:	3fb99999 	.word	0x3fb99999
 8002c60:	200000e8 	.word	0x200000e8
 8002c64:	200000ec 	.word	0x200000ec
 8002c68:	200000bc 	.word	0x200000bc
 8002c6c:	200000c0 	.word	0x200000c0
 8002c70:	200000b8 	.word	0x200000b8
 8002c74:	200000c4 	.word	0x200000c4
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	200000a8 	.word	0x200000a8
 8002c80:	200000c8 	.word	0x200000c8
 8002c84:	20000008 	.word	0x20000008
 8002c88:	200000d0 	.word	0x200000d0
 8002c8c:	2000000c 	.word	0x2000000c
						}
						else if(micros() - Graphtimestamp >= ((duty_cycle/100.0)*(1/SQR_Freq))*1000000 && SQR_mode == 1)
 8002c90:	f000 fbe0 	bl	8003454 <micros>
 8002c94:	4b9a      	ldr	r3, [pc, #616]	; (8002f00 <main+0x1fd8>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	1a84      	subs	r4, r0, r2
 8002c9c:	60bc      	str	r4, [r7, #8]
 8002c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ca8:	f7fd fc78 	bl	800059c <__aeabi_ul2d>
 8002cac:	4680      	mov	r8, r0
 8002cae:	4689      	mov	r9, r1
 8002cb0:	4b94      	ldr	r3, [pc, #592]	; (8002f04 <main+0x1fdc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fc3d 	bl	8000534 <__aeabi_i2d>
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	4b92      	ldr	r3, [pc, #584]	; (8002f08 <main+0x1fe0>)
 8002cc0:	f7fd fdcc 	bl	800085c <__aeabi_ddiv>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	4b8f      	ldr	r3, [pc, #572]	; (8002f0c <main+0x1fe4>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cda:	ee16 0a90 	vmov	r0, s13
 8002cde:	f7fd fc3b 	bl	8000558 <__aeabi_f2d>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	4629      	mov	r1, r5
 8002cea:	f7fd fc8d 	bl	8000608 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	a37a      	add	r3, pc, #488	; (adr r3, 8002ee0 <main+0x1fb8>)
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd fc84 	bl	8000608 <__aeabi_dmul>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4640      	mov	r0, r8
 8002d06:	4649      	mov	r1, r9
 8002d08:	f7fd ff04 	bl	8000b14 <__aeabi_dcmpge>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d034      	beq.n	8002d7c <main+0x1e54>
 8002d12:	4b7f      	ldr	r3, [pc, #508]	; (8002f10 <main+0x1fe8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d130      	bne.n	8002d7c <main+0x1e54>
						{
							Graphtimestamp = micros();
 8002d1a:	f000 fb9b 	bl	8003454 <micros>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4977      	ldr	r1, [pc, #476]	; (8002f00 <main+0x1fd8>)
 8002d24:	e9c1 2300 	strd	r2, r3, [r1]
							dataOut = ((SQR_Low/3.3)*4095.0);
 8002d28:	4b7a      	ldr	r3, [pc, #488]	; (8002f14 <main+0x1fec>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fc13 	bl	8000558 <__aeabi_f2d>
 8002d32:	a36d      	add	r3, pc, #436	; (adr r3, 8002ee8 <main+0x1fc0>)
 8002d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d38:	f7fd fd90 	bl	800085c <__aeabi_ddiv>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	a36a      	add	r3, pc, #424	; (adr r3, 8002ef0 <main+0x1fc8>)
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f7fd fc5d 	bl	8000608 <__aeabi_dmul>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7fd ff19 	bl	8000b8c <__aeabi_d2f>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <main+0x1ff0>)
 8002d5e:	6013      	str	r3, [r2, #0]
							uintdataOut = dataOut;
 8002d60:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <main+0x1ff0>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d6a:	ee17 3a90 	vmov	r3, s15
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <main+0x1ff4>)
 8002d72:	801a      	strh	r2, [r3, #0]
							SQR_mode = 0;
 8002d74:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <main+0x1fe8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e085      	b.n	8002e88 <main+0x1f60>

						}
						else if(micros() - Graphtimestamp >= (((100 - duty_cycle)/100.0)*(1/SQR_Freq))*1000000 && SQR_mode == 0)
 8002d7c:	f000 fb6a 	bl	8003454 <micros>
 8002d80:	4b5f      	ldr	r3, [pc, #380]	; (8002f00 <main+0x1fd8>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	1a84      	subs	r4, r0, r2
 8002d88:	603c      	str	r4, [r7, #0]
 8002d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d94:	f7fd fc02 	bl	800059c <__aeabi_ul2d>
 8002d98:	4680      	mov	r8, r0
 8002d9a:	4689      	mov	r9, r1
 8002d9c:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <main+0x1fdc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fbc5 	bl	8000534 <__aeabi_i2d>
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <main+0x1fe0>)
 8002db0:	f7fd fd54 	bl	800085c <__aeabi_ddiv>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4614      	mov	r4, r2
 8002dba:	461d      	mov	r5, r3
 8002dbc:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <main+0x1fe4>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dc6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002dca:	ee16 0a90 	vmov	r0, s13
 8002dce:	f7fd fbc3 	bl	8000558 <__aeabi_f2d>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	4629      	mov	r1, r5
 8002dda:	f7fd fc15 	bl	8000608 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	a33e      	add	r3, pc, #248	; (adr r3, 8002ee0 <main+0x1fb8>)
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f7fd fc0c 	bl	8000608 <__aeabi_dmul>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4640      	mov	r0, r8
 8002df6:	4649      	mov	r1, r9
 8002df8:	f7fd fe8c 	bl	8000b14 <__aeabi_dcmpge>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d042      	beq.n	8002e88 <main+0x1f60>
 8002e02:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <main+0x1fe8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d13e      	bne.n	8002e88 <main+0x1f60>
						{
							Graphtimestamp = micros();
 8002e0a:	f000 fb23 	bl	8003454 <micros>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	493b      	ldr	r1, [pc, #236]	; (8002f00 <main+0x1fd8>)
 8002e14:	e9c1 2300 	strd	r2, r3, [r1]
							dataOut = ((SQR_High/3.3)*4095.0);
 8002e18:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <main+0x1ff8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb9b 	bl	8000558 <__aeabi_f2d>
 8002e22:	a331      	add	r3, pc, #196	; (adr r3, 8002ee8 <main+0x1fc0>)
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f7fd fd18 	bl	800085c <__aeabi_ddiv>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	a32e      	add	r3, pc, #184	; (adr r3, 8002ef0 <main+0x1fc8>)
 8002e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3a:	f7fd fbe5 	bl	8000608 <__aeabi_dmul>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	f7fd fea1 	bl	8000b8c <__aeabi_d2f>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4a32      	ldr	r2, [pc, #200]	; (8002f18 <main+0x1ff0>)
 8002e4e:	6013      	str	r3, [r2, #0]
							uintdataOut = dataOut;
 8002e50:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <main+0x1ff0>)
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5a:	ee17 3a90 	vmov	r3, s15
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <main+0x1ff4>)
 8002e62:	801a      	strh	r2, [r3, #0]
							SQR_mode = 1;
 8002e64:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <main+0x1fe8>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e00d      	b.n	8002e88 <main+0x1f60>
					}
				}
			}
			else
			{
				dataOut = 0;
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <main+0x1ff0>)
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
				uintdataOut = dataOut;
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <main+0x1ff0>)
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e7e:	ee17 3a90 	vmov	r3, s15
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <main+0x1ff4>)
 8002e86:	801a      	strh	r2, [r3, #0]
			}
			if (hspi3.State == HAL_SPI_STATE_READY
 8002e88:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <main+0x1ffc>)
 8002e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10f      	bne.n	8002eb4 <main+0x1f8c>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8002e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e98:	4823      	ldr	r0, [pc, #140]	; (8002f28 <main+0x2000>)
 8002e9a:	f002 f8ad 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <main+0x1f8c>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, uintdataOut);
 8002ea4:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <main+0x2004>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <main+0x1ff4>)
 8002eaa:	8812      	ldrh	r2, [r2, #0]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fa76 	bl	80033a0 <MCP4922SetOutput>
			}
		}
		VADCin = (ADCin)*(3.3/4095.0);
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <main+0x2008>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd fb3b 	bl	8000534 <__aeabi_i2d>
 8002ebe:	a30e      	add	r3, pc, #56	; (adr r3, 8002ef8 <main+0x1fd0>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fba0 	bl	8000608 <__aeabi_dmul>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f7fd fe5c 	bl	8000b8c <__aeabi_d2f>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <main+0x200c>)
 8002ed8:	6013      	str	r3, [r2, #0]
	{
 8002eda:	f7fe b867 	b.w	8000fac <main+0x84>
 8002ede:	bf00      	nop
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	412e8480 	.word	0x412e8480
 8002ee8:	66666666 	.word	0x66666666
 8002eec:	400a6666 	.word	0x400a6666
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	40affe00 	.word	0x40affe00
 8002ef8:	e734d9b4 	.word	0xe734d9b4
 8002efc:	3f4a680c 	.word	0x3f4a680c
 8002f00:	20000118 	.word	0x20000118
 8002f04:	20000008 	.word	0x20000008
 8002f08:	40590000 	.word	0x40590000
 8002f0c:	200000c8 	.word	0x200000c8
 8002f10:	200000cc 	.word	0x200000cc
 8002f14:	200000d0 	.word	0x200000d0
 8002f18:	200000e8 	.word	0x200000e8
 8002f1c:	200000ec 	.word	0x200000ec
 8002f20:	2000000c 	.word	0x2000000c
 8002f24:	20000180 	.word	0x20000180
 8002f28:	40020400 	.word	0x40020400
 8002f2c:	20000010 	.word	0x20000010
 8002f30:	200000d4 	.word	0x200000d4
 8002f34:	200000d8 	.word	0x200000d8

08002f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b094      	sub	sp, #80	; 0x50
 8002f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f3e:	f107 0320 	add.w	r3, r7, #32
 8002f42:	2230      	movs	r2, #48	; 0x30
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f004 fbd8 	bl	80076fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <SystemClock_Config+0xc8>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	4a26      	ldr	r2, [pc, #152]	; (8003000 <SystemClock_Config+0xc8>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <SystemClock_Config+0xc8>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <SystemClock_Config+0xcc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a20      	ldr	r2, [pc, #128]	; (8003004 <SystemClock_Config+0xcc>)
 8002f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <SystemClock_Config+0xcc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f94:	2302      	movs	r3, #2
 8002f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002fa8:	2308      	movs	r3, #8
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002fac:	2364      	movs	r3, #100	; 0x64
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fb8:	f107 0320 	add.w	r3, r7, #32
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f002 f84d 	bl	800505c <HAL_RCC_OscConfig>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fc8:	f000 fa8e 	bl	80034e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fcc:	230f      	movs	r3, #15
 8002fce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fe2:	f107 030c 	add.w	r3, r7, #12
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 faaf 	bl	800554c <HAL_RCC_ClockConfig>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ff4:	f000 fa78 	bl	80034e8 <Error_Handler>
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3750      	adds	r7, #80	; 0x50
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	40007000 	.word	0x40007000

08003008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <MX_ADC1_Init+0x6c>)
 800300e:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <MX_ADC1_Init+0x70>)
 8003010:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <MX_ADC1_Init+0x6c>)
 8003014:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <MX_ADC1_Init+0x6c>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <MX_ADC1_Init+0x6c>)
 8003022:	2201      	movs	r2, #1
 8003024:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003026:	4b13      	ldr	r3, [pc, #76]	; (8003074 <MX_ADC1_Init+0x6c>)
 8003028:	2200      	movs	r2, #0
 800302a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <MX_ADC1_Init+0x6c>)
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <MX_ADC1_Init+0x6c>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <MX_ADC1_Init+0x6c>)
 800303e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <MX_ADC1_Init+0x6c>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <MX_ADC1_Init+0x6c>)
 800304c:	2201      	movs	r2, #1
 800304e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <MX_ADC1_Init+0x6c>)
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <MX_ADC1_Init+0x6c>)
 800305a:	2201      	movs	r2, #1
 800305c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800305e:	4805      	ldr	r0, [pc, #20]	; (8003074 <MX_ADC1_Init+0x6c>)
 8003060:	f000 fd0e 	bl	8003a80 <HAL_ADC_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_ADC1_Init+0x66>
  {
    Error_Handler();
 800306a:	f000 fa3d 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200001d8 	.word	0x200001d8
 8003078:	40012000 	.word	0x40012000

0800307c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <MX_SPI3_Init+0x68>)
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <MX_SPI3_Init+0x6c>)
 8003084:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <MX_SPI3_Init+0x68>)
 8003088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800308c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <MX_SPI3_Init+0x68>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <MX_SPI3_Init+0x68>)
 8003096:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800309a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <MX_SPI3_Init+0x68>)
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <MX_SPI3_Init+0x68>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <MX_SPI3_Init+0x68>)
 80030aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <MX_SPI3_Init+0x68>)
 80030b2:	2220      	movs	r2, #32
 80030b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <MX_SPI3_Init+0x68>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <MX_SPI3_Init+0x68>)
 80030be:	2200      	movs	r2, #0
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <MX_SPI3_Init+0x68>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <MX_SPI3_Init+0x68>)
 80030ca:	220a      	movs	r2, #10
 80030cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80030ce:	4805      	ldr	r0, [pc, #20]	; (80030e4 <MX_SPI3_Init+0x68>)
 80030d0:	f002 fc38 	bl	8005944 <HAL_SPI_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80030da:	f000 fa05 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000180 	.word	0x20000180
 80030e8:	40003c00 	.word	0x40003c00

080030ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003100:	463b      	mov	r3, r7
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003108:	4b1c      	ldr	r3, [pc, #112]	; (800317c <MX_TIM3_Init+0x90>)
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <MX_TIM3_Init+0x94>)
 800310c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <MX_TIM3_Init+0x90>)
 8003110:	2263      	movs	r2, #99	; 0x63
 8003112:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003114:	4b19      	ldr	r3, [pc, #100]	; (800317c <MX_TIM3_Init+0x90>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800311a:	4b18      	ldr	r3, [pc, #96]	; (800317c <MX_TIM3_Init+0x90>)
 800311c:	2264      	movs	r2, #100	; 0x64
 800311e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003120:	4b16      	ldr	r3, [pc, #88]	; (800317c <MX_TIM3_Init+0x90>)
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <MX_TIM3_Init+0x90>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800312c:	4813      	ldr	r0, [pc, #76]	; (800317c <MX_TIM3_Init+0x90>)
 800312e:	f002 ffad 	bl	800608c <HAL_TIM_Base_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8003138:	f000 f9d6 	bl	80034e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800313c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4619      	mov	r1, r3
 8003148:	480c      	ldr	r0, [pc, #48]	; (800317c <MX_TIM3_Init+0x90>)
 800314a:	f003 f9b3 	bl	80064b4 <HAL_TIM_ConfigClockSource>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003154:	f000 f9c8 	bl	80034e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003158:	2320      	movs	r3, #32
 800315a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003160:	463b      	mov	r3, r7
 8003162:	4619      	mov	r1, r3
 8003164:	4805      	ldr	r0, [pc, #20]	; (800317c <MX_TIM3_Init+0x90>)
 8003166:	f003 fbab 	bl	80068c0 <HAL_TIMEx_MasterConfigSynchronization>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003170:	f000 f9ba 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003174:	bf00      	nop
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000138 	.word	0x20000138
 8003180:	40000400 	.word	0x40000400

08003184 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_TIM11_Init+0x40>)
 800318a:	4a0f      	ldr	r2, [pc, #60]	; (80031c8 <MX_TIM11_Init+0x44>)
 800318c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <MX_TIM11_Init+0x40>)
 8003190:	2263      	movs	r2, #99	; 0x63
 8003192:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <MX_TIM11_Init+0x40>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <MX_TIM11_Init+0x40>)
 800319c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <MX_TIM11_Init+0x40>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_TIM11_Init+0x40>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80031ae:	4805      	ldr	r0, [pc, #20]	; (80031c4 <MX_TIM11_Init+0x40>)
 80031b0:	f002 ff6c 	bl	800608c <HAL_TIM_Base_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80031ba:	f000 f995 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000220 	.word	0x20000220
 80031c8:	40014800 	.word	0x40014800

080031cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <MX_USART2_UART_Init+0x4c>)
 80031d2:	4a12      	ldr	r2, [pc, #72]	; (800321c <MX_USART2_UART_Init+0x50>)
 80031d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <MX_USART2_UART_Init+0x4c>)
 80031d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031de:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <MX_USART2_UART_Init+0x4c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <MX_USART2_UART_Init+0x4c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <MX_USART2_UART_Init+0x4c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <MX_USART2_UART_Init+0x4c>)
 80031f2:	220c      	movs	r2, #12
 80031f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <MX_USART2_UART_Init+0x4c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <MX_USART2_UART_Init+0x4c>)
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003202:	4805      	ldr	r0, [pc, #20]	; (8003218 <MX_USART2_UART_Init+0x4c>)
 8003204:	f003 fbde 	bl	80069c4 <HAL_UART_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800320e:	f000 f96b 	bl	80034e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	200002c8 	.word	0x200002c8
 800321c:	40004400 	.word	0x40004400

08003220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <MX_DMA_Init+0x3c>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a0b      	ldr	r2, [pc, #44]	; (800325c <MX_DMA_Init+0x3c>)
 8003230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <MX_DMA_Init+0x3c>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	2038      	movs	r0, #56	; 0x38
 8003248:	f001 f919 	bl	800447e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800324c:	2038      	movs	r0, #56	; 0x38
 800324e:	f001 f932 	bl	80044b6 <HAL_NVIC_EnableIRQ>

}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800

08003260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003266:	f107 0314 	add.w	r3, r7, #20
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	4b44      	ldr	r3, [pc, #272]	; (800338c <MX_GPIO_Init+0x12c>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a43      	ldr	r2, [pc, #268]	; (800338c <MX_GPIO_Init+0x12c>)
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <MX_GPIO_Init+0x12c>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <MX_GPIO_Init+0x12c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a3c      	ldr	r2, [pc, #240]	; (800338c <MX_GPIO_Init+0x12c>)
 800329c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <MX_GPIO_Init+0x12c>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <MX_GPIO_Init+0x12c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a35      	ldr	r2, [pc, #212]	; (800338c <MX_GPIO_Init+0x12c>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b33      	ldr	r3, [pc, #204]	; (800338c <MX_GPIO_Init+0x12c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	4b2f      	ldr	r3, [pc, #188]	; (800338c <MX_GPIO_Init+0x12c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a2e      	ldr	r2, [pc, #184]	; (800338c <MX_GPIO_Init+0x12c>)
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b2c      	ldr	r3, [pc, #176]	; (800338c <MX_GPIO_Init+0x12c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2120      	movs	r1, #32
 80032ea:	4829      	ldr	r0, [pc, #164]	; (8003390 <MX_GPIO_Init+0x130>)
 80032ec:	f001 fe9c 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80032f0:	2201      	movs	r2, #1
 80032f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032f6:	4827      	ldr	r0, [pc, #156]	; (8003394 <MX_GPIO_Init+0x134>)
 80032f8:	f001 fe96 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 80032fc:	2201      	movs	r2, #1
 80032fe:	2180      	movs	r1, #128	; 0x80
 8003300:	4825      	ldr	r0, [pc, #148]	; (8003398 <MX_GPIO_Init+0x138>)
 8003302:	f001 fe91 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8003306:	2201      	movs	r2, #1
 8003308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800330c:	4820      	ldr	r0, [pc, #128]	; (8003390 <MX_GPIO_Init+0x130>)
 800330e:	f001 fe8b 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <MX_GPIO_Init+0x13c>)
 800331a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4619      	mov	r1, r3
 8003326:	481c      	ldr	r0, [pc, #112]	; (8003398 <MX_GPIO_Init+0x138>)
 8003328:	f001 fce2 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 800332c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003332:	2301      	movs	r3, #1
 8003334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	4619      	mov	r1, r3
 8003344:	4812      	ldr	r0, [pc, #72]	; (8003390 <MX_GPIO_Init+0x130>)
 8003346:	f001 fcd3 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 800334a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003350:	2301      	movs	r3, #1
 8003352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003358:	2300      	movs	r3, #0
 800335a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	480c      	ldr	r0, [pc, #48]	; (8003394 <MX_GPIO_Init+0x134>)
 8003364:	f001 fcc4 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336c:	2301      	movs	r3, #1
 800336e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	4806      	ldr	r0, [pc, #24]	; (8003398 <MX_GPIO_Init+0x138>)
 8003380:	f001 fcb6 	bl	8004cf0 <HAL_GPIO_Init>

}
 8003384:	bf00      	nop
 8003386:	3728      	adds	r7, #40	; 0x28
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	40020000 	.word	0x40020000
 8003394:	40020400 	.word	0x40020400
 8003398:	40020800 	.word	0x40020800
 800339c:	10210000 	.word	0x10210000

080033a0 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	460a      	mov	r2, r1
 80033aa:	71fb      	strb	r3, [r7, #7]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 80033b0:	88bb      	ldrh	r3, [r7, #4]
 80033b2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	031b      	lsls	r3, r3, #12
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80033c0:	2200      	movs	r2, #0
 80033c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033c6:	4807      	ldr	r0, [pc, #28]	; (80033e4 <MCP4922SetOutput+0x44>)
 80033c8:	f001 fe2e 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	2201      	movs	r2, #1
 80033d2:	4619      	mov	r1, r3
 80033d4:	4804      	ldr	r0, [pc, #16]	; (80033e8 <MCP4922SetOutput+0x48>)
 80033d6:	f002 fb3f 	bl	8005a58 <HAL_SPI_Transmit_IT>
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40020400 	.word	0x40020400
 80033e8:	20000180 	.word	0x20000180

080033ec <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a06      	ldr	r2, [pc, #24]	; (8003410 <HAL_SPI_TxCpltCallback+0x24>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d105      	bne.n	8003408 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80033fc:	2201      	movs	r2, #1
 80033fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003402:	4804      	ldr	r0, [pc, #16]	; (8003414 <HAL_SPI_TxCpltCallback+0x28>)
 8003404:	f001 fe10 	bl	8005028 <HAL_GPIO_WritePin>
	}
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000180 	.word	0x20000180
 8003414:	40020400 	.word	0x40020400

08003418 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b4b0      	push	{r4, r5, r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10c      	bne.n	8003442 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	1814      	adds	r4, r2, r0
 8003438:	eb43 0501 	adc.w	r5, r3, r1
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800343e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bcb0      	pop	{r4, r5, r7}
 800344a:	4770      	bx	lr
 800344c:	20000220 	.word	0x20000220
 8003450:	200000e0 	.word	0x200000e0

08003454 <micros>:

inline uint64_t micros()
{
 8003454:	b4b0      	push	{r4, r5, r7}
 8003456:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <micros+0x2c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	4618      	mov	r0, r3
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <micros+0x30>)
 8003466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346a:	1884      	adds	r4, r0, r2
 800346c:	eb41 0503 	adc.w	r5, r1, r3
 8003470:	4622      	mov	r2, r4
 8003472:	462b      	mov	r3, r5
}
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	bcb0      	pop	{r4, r5, r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000220 	.word	0x20000220
 8003484:	200000e0 	.word	0x200000e0

08003488 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 800348e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003492:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <UARTRecieveIT+0x54>)
 8003496:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003498:	461a      	mov	r2, r3
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <UARTRecieveIT+0x54>)
 800349c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <UARTRecieveIT+0x58>)
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d010      	beq.n	80034cc <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <UARTRecieveIT+0x58>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <UARTRecieveIT+0x5c>)
 80034b0:	5cd3      	ldrb	r3, [r2, r3]
 80034b2:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <UARTRecieveIT+0x58>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	4a08      	ldr	r2, [pc, #32]	; (80034dc <UARTRecieveIT+0x54>)
 80034bc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80034be:	fbb3 f1f2 	udiv	r1, r3, r2
 80034c2:	fb02 f201 	mul.w	r2, r2, r1
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <UARTRecieveIT+0x58>)
 80034ca:	6013      	str	r3, [r2, #0]
	}
	return data;
 80034cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	200002c8 	.word	0x200002c8
 80034e0:	20000128 	.word	0x20000128
 80034e4:	200000f0 	.word	0x200000f0

080034e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034ec:	b672      	cpsid	i
}
 80034ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80034f0:	e7fe      	b.n	80034f0 <Error_Handler+0x8>
	...

080034f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_MspInit+0x4c>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <HAL_MspInit+0x4c>)
 8003504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003508:	6453      	str	r3, [r2, #68]	; 0x44
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <HAL_MspInit+0x4c>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_MspInit+0x4c>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_MspInit+0x4c>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_MspInit+0x4c>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003532:	2007      	movs	r0, #7
 8003534:	f000 ff98 	bl	8004468 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a33      	ldr	r2, [pc, #204]	; (8003630 <HAL_ADC_MspInit+0xec>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d15f      	bne.n	8003626 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	4b32      	ldr	r3, [pc, #200]	; (8003634 <HAL_ADC_MspInit+0xf0>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_ADC_MspInit+0xf0>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6453      	str	r3, [r2, #68]	; 0x44
 8003576:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_ADC_MspInit+0xf0>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_ADC_MspInit+0xf0>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a2a      	ldr	r2, [pc, #168]	; (8003634 <HAL_ADC_MspInit+0xf0>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b28      	ldr	r3, [pc, #160]	; (8003634 <HAL_ADC_MspInit+0xf0>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800359e:	2301      	movs	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a2:	2303      	movs	r3, #3
 80035a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	4619      	mov	r1, r3
 80035b0:	4821      	ldr	r0, [pc, #132]	; (8003638 <HAL_ADC_MspInit+0xf4>)
 80035b2:	f001 fb9d 	bl	8004cf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035b8:	4a21      	ldr	r2, [pc, #132]	; (8003640 <HAL_ADC_MspInit+0xfc>)
 80035ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035be:	2200      	movs	r2, #0
 80035c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c8:	4b1c      	ldr	r3, [pc, #112]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035d6:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035fa:	4810      	ldr	r0, [pc, #64]	; (800363c <HAL_ADC_MspInit+0xf8>)
 80035fc:	f000 ff76 	bl	80044ec <HAL_DMA_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003606:	f7ff ff6f 	bl	80034e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a0b      	ldr	r2, [pc, #44]	; (800363c <HAL_ADC_MspInit+0xf8>)
 800360e:	639a      	str	r2, [r3, #56]	; 0x38
 8003610:	4a0a      	ldr	r2, [pc, #40]	; (800363c <HAL_ADC_MspInit+0xf8>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2012      	movs	r0, #18
 800361c:	f000 ff2f 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003620:	2012      	movs	r0, #18
 8003622:	f000 ff48 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003626:	bf00      	nop
 8003628:	3728      	adds	r7, #40	; 0x28
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40012000 	.word	0x40012000
 8003634:	40023800 	.word	0x40023800
 8003638:	40020000 	.word	0x40020000
 800363c:	20000268 	.word	0x20000268
 8003640:	40026410 	.word	0x40026410

08003644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <HAL_SPI_MspInit+0x94>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d133      	bne.n	80036ce <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <HAL_SPI_MspInit+0x98>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a1b      	ldr	r2, [pc, #108]	; (80036dc <HAL_SPI_MspInit+0x98>)
 8003670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b19      	ldr	r3, [pc, #100]	; (80036dc <HAL_SPI_MspInit+0x98>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_SPI_MspInit+0x98>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	4a14      	ldr	r2, [pc, #80]	; (80036dc <HAL_SPI_MspInit+0x98>)
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_SPI_MspInit+0x98>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800369e:	2338      	movs	r3, #56	; 0x38
 80036a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036aa:	2303      	movs	r3, #3
 80036ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036ae:	2306      	movs	r3, #6
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b2:	f107 0314 	add.w	r3, r7, #20
 80036b6:	4619      	mov	r1, r3
 80036b8:	4809      	ldr	r0, [pc, #36]	; (80036e0 <HAL_SPI_MspInit+0x9c>)
 80036ba:	f001 fb19 	bl	8004cf0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	2033      	movs	r0, #51	; 0x33
 80036c4:	f000 fedb 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80036c8:	2033      	movs	r0, #51	; 0x33
 80036ca:	f000 fef4 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80036ce:	bf00      	nop
 80036d0:	3728      	adds	r7, #40	; 0x28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40003c00 	.word	0x40003c00
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40020400 	.word	0x40020400

080036e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_TIM_Base_MspInit+0x70>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_TIM_Base_MspInit+0x74>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_TIM_Base_MspInit+0x74>)
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b14      	ldr	r3, [pc, #80]	; (8003758 <HAL_TIM_Base_MspInit+0x74>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003712:	e01a      	b.n	800374a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a10      	ldr	r2, [pc, #64]	; (800375c <HAL_TIM_Base_MspInit+0x78>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d115      	bne.n	800374a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_TIM_Base_MspInit+0x74>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <HAL_TIM_Base_MspInit+0x74>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	6453      	str	r3, [r2, #68]	; 0x44
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_TIM_Base_MspInit+0x74>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800373a:	2200      	movs	r2, #0
 800373c:	2100      	movs	r1, #0
 800373e:	201a      	movs	r0, #26
 8003740:	f000 fe9d 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003744:	201a      	movs	r0, #26
 8003746:	f000 feb6 	bl	80044b6 <HAL_NVIC_EnableIRQ>
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40000400 	.word	0x40000400
 8003758:	40023800 	.word	0x40023800
 800375c:	40014800 	.word	0x40014800

08003760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <HAL_UART_MspInit+0x94>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d133      	bne.n	80037ea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <HAL_UART_MspInit+0x98>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <HAL_UART_MspInit+0x98>)
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_UART_MspInit+0x98>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_UART_MspInit+0x98>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <HAL_UART_MspInit+0x98>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	6313      	str	r3, [r2, #48]	; 0x30
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_UART_MspInit+0x98>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80037ba:	230c      	movs	r3, #12
 80037bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c6:	2303      	movs	r3, #3
 80037c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037ca:	2307      	movs	r3, #7
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ce:	f107 0314 	add.w	r3, r7, #20
 80037d2:	4619      	mov	r1, r3
 80037d4:	4809      	ldr	r0, [pc, #36]	; (80037fc <HAL_UART_MspInit+0x9c>)
 80037d6:	f001 fa8b 	bl	8004cf0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	2026      	movs	r0, #38	; 0x26
 80037e0:	f000 fe4d 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037e4:	2026      	movs	r0, #38	; 0x26
 80037e6:	f000 fe66 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037ea:	bf00      	nop
 80037ec:	3728      	adds	r7, #40	; 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40004400 	.word	0x40004400
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40020000 	.word	0x40020000

08003800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003804:	e7fe      	b.n	8003804 <NMI_Handler+0x4>

08003806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <HardFault_Handler+0x4>

0800380c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <MemManage_Handler+0x4>

08003812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003816:	e7fe      	b.n	8003816 <BusFault_Handler+0x4>

08003818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800381c:	e7fe      	b.n	800381c <UsageFault_Handler+0x4>

0800381e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800384c:	f000 f8f8 	bl	8003a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}

08003854 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <ADC_IRQHandler+0x10>)
 800385a:	f000 f954 	bl	8003b06 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200001d8 	.word	0x200001d8

08003868 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800386e:	f002 fd19 	bl	80062a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000220 	.word	0x20000220

0800387c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <USART2_IRQHandler+0x10>)
 8003882:	f003 f9af 	bl	8006be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200002c8 	.word	0x200002c8

08003890 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <SPI3_IRQHandler+0x10>)
 8003896:	f002 f969 	bl	8005b6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000180 	.word	0x20000180

080038a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <DMA2_Stream0_IRQHandler+0x10>)
 80038aa:	f000 ffb7 	bl	800481c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000268 	.word	0x20000268

080038b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c0:	4a14      	ldr	r2, [pc, #80]	; (8003914 <_sbrk+0x5c>)
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <_sbrk+0x60>)
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <_sbrk+0x64>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <_sbrk+0x64>)
 80038d6:	4a12      	ldr	r2, [pc, #72]	; (8003920 <_sbrk+0x68>)
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <_sbrk+0x64>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d207      	bcs.n	80038f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e8:	f003 fede 	bl	80076a8 <__errno>
 80038ec:	4603      	mov	r3, r0
 80038ee:	220c      	movs	r2, #12
 80038f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295
 80038f6:	e009      	b.n	800390c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f8:	4b08      	ldr	r3, [pc, #32]	; (800391c <_sbrk+0x64>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <_sbrk+0x64>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	4a05      	ldr	r2, [pc, #20]	; (800391c <_sbrk+0x64>)
 8003908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800390a:	68fb      	ldr	r3, [r7, #12]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20020000 	.word	0x20020000
 8003918:	00000400 	.word	0x00000400
 800391c:	2000012c 	.word	0x2000012c
 8003920:	20000320 	.word	0x20000320

08003924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <SystemInit+0x20>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	4a05      	ldr	r2, [pc, #20]	; (8003944 <SystemInit+0x20>)
 8003930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800394c:	480d      	ldr	r0, [pc, #52]	; (8003984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800394e:	490e      	ldr	r1, [pc, #56]	; (8003988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003950:	4a0e      	ldr	r2, [pc, #56]	; (800398c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003954:	e002      	b.n	800395c <LoopCopyDataInit>

08003956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395a:	3304      	adds	r3, #4

0800395c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800395c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800395e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003960:	d3f9      	bcc.n	8003956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003964:	4c0b      	ldr	r4, [pc, #44]	; (8003994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003968:	e001      	b.n	800396e <LoopFillZerobss>

0800396a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800396c:	3204      	adds	r2, #4

0800396e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800396e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003970:	d3fb      	bcc.n	800396a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003972:	f7ff ffd7 	bl	8003924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003976:	f003 fe9d 	bl	80076b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800397a:	f7fd fad5 	bl	8000f28 <main>
  bx  lr    
 800397e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003988:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800398c:	08009658 	.word	0x08009658
  ldr r2, =_sbss
 8003990:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003994:	20000320 	.word	0x20000320

08003998 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003998:	e7fe      	b.n	8003998 <DMA1_Stream0_IRQHandler>
	...

0800399c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_Init+0x40>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_Init+0x40>)
 80039a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_Init+0x40>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_Init+0x40>)
 80039b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_Init+0x40>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a07      	ldr	r2, [pc, #28]	; (80039dc <HAL_Init+0x40>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c4:	2003      	movs	r0, #3
 80039c6:	f000 fd4f 	bl	8004468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f000 f808 	bl	80039e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039d0:	f7ff fd90 	bl	80034f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023c00 	.word	0x40023c00

080039e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_InitTick+0x54>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_InitTick+0x58>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	4619      	mov	r1, r3
 80039f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd67 	bl	80044d2 <HAL_SYSTICK_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e00e      	b.n	8003a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b0f      	cmp	r3, #15
 8003a12:	d80a      	bhi.n	8003a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a14:	2200      	movs	r2, #0
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	f000 fd2f 	bl	800447e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a20:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <HAL_InitTick+0x5c>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e000      	b.n	8003a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000014 	.word	0x20000014
 8003a38:	2000001c 	.word	0x2000001c
 8003a3c:	20000018 	.word	0x20000018

08003a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_IncTick+0x20>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_IncTick+0x24>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4413      	add	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_IncTick+0x24>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	2000001c 	.word	0x2000001c
 8003a64:	2000030c 	.word	0x2000030c

08003a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_GetTick+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	2000030c 	.word	0x2000030c

08003a80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e033      	b.n	8003afe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fd50 	bl	8003544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d118      	bne.n	8003af0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ac6:	f023 0302 	bic.w	r3, r3, #2
 8003aca:	f043 0202 	orr.w	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fa70 	bl	8003fb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
 8003aee:	e001      	b.n	8003af4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d049      	beq.n	8003bdc <HAL_ADC_IRQHandler+0xd6>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d046      	beq.n	8003bdc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d12b      	bne.n	8003bcc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d127      	bne.n	8003bcc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d119      	bne.n	8003bcc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0220 	bic.w	r2, r2, #32
 8003ba6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f9cb 	bl	8003f68 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0212 	mvn.w	r2, #18
 8003bda:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d057      	beq.n	8003cbe <HAL_ADC_IRQHandler+0x1b8>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d054      	beq.n	8003cbe <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d139      	bne.n	8003cae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d12b      	bne.n	8003cae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d124      	bne.n	8003cae <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11d      	bne.n	8003cae <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d119      	bne.n	8003cae <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c88:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d105      	bne.n	8003cae <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fb00 	bl	80042b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 020c 	mvn.w	r2, #12
 8003cbc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d017      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x21a>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d014      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d10d      	bne.n	8003d20 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f93d 	bl	8003f90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f06f 0201 	mvn.w	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	bf0c      	ite	eq
 8003d2e:	2301      	moveq	r3, #1
 8003d30:	2300      	movne	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2300      	movne	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x27a>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f043 0202 	orr.w	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0220 	mvn.w	r2, #32
 8003d6e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f917 	bl	8003fa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f06f 0220 	mvn.w	r2, #32
 8003d7e:	601a      	str	r2, [r3, #0]
  }
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_ADC_Start_DMA+0x1e>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e0ce      	b.n	8003f44 <HAL_ADC_Start_DMA+0x1bc>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d018      	beq.n	8003dee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dcc:	4b5f      	ldr	r3, [pc, #380]	; (8003f4c <HAL_ADC_Start_DMA+0x1c4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a5f      	ldr	r2, [pc, #380]	; (8003f50 <HAL_ADC_Start_DMA+0x1c8>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	0c9a      	lsrs	r2, r3, #18
 8003dd8:	4613      	mov	r3, r2
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	4413      	add	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003de0:	e002      	b.n	8003de8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f9      	bne.n	8003de2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfc:	d107      	bne.n	8003e0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	f040 8086 	bne.w	8003f2a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d106      	bne.n	8003e6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f023 0206 	bic.w	r2, r3, #6
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
 8003e6a:	e002      	b.n	8003e72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <HAL_ADC_Start_DMA+0x1cc>)
 8003e7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	4a35      	ldr	r2, [pc, #212]	; (8003f58 <HAL_ADC_Start_DMA+0x1d0>)
 8003e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	4a34      	ldr	r2, [pc, #208]	; (8003f5c <HAL_ADC_Start_DMA+0x1d4>)
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	4a33      	ldr	r2, [pc, #204]	; (8003f60 <HAL_ADC_Start_DMA+0x1d8>)
 8003e94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003eae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ebe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	334c      	adds	r3, #76	; 0x4c
 8003eca:	4619      	mov	r1, r3
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f000 fbba 	bl	8004648 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d129      	bne.n	8003f42 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	e020      	b.n	8003f42 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <HAL_ADC_Start_DMA+0x1dc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d11b      	bne.n	8003f42 <HAL_ADC_Start_DMA+0x1ba>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d114      	bne.n	8003f42 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	e00b      	b.n	8003f42 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f043 0210 	orr.w	r2, r3, #16
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	f043 0201 	orr.w	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000014 	.word	0x20000014
 8003f50:	431bde83 	.word	0x431bde83
 8003f54:	40012300 	.word	0x40012300
 8003f58:	080041b1 	.word	0x080041b1
 8003f5c:	0800426b 	.word	0x0800426b
 8003f60:	08004287 	.word	0x08004287
 8003f64:	40012000 	.word	0x40012000

08003f68 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fc0:	4b79      	ldr	r3, [pc, #484]	; (80041a8 <ADC_Init+0x1f0>)
 8003fc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	021a      	lsls	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6899      	ldr	r1, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	4a58      	ldr	r2, [pc, #352]	; (80041ac <ADC_Init+0x1f4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800405e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6899      	ldr	r1, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	e00f      	b.n	80040b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0202 	bic.w	r2, r2, #2
 80040c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	7e1b      	ldrb	r3, [r3, #24]
 80040d0:	005a      	lsls	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01b      	beq.n	800411c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004102:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	3b01      	subs	r3, #1
 8004110:	035a      	lsls	r2, r3, #13
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	e007      	b.n	800412c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	3b01      	subs	r3, #1
 8004148:	051a      	lsls	r2, r3, #20
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6899      	ldr	r1, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800416e:	025a      	lsls	r2, r3, #9
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6899      	ldr	r1, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	029a      	lsls	r2, r3, #10
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40012300 	.word	0x40012300
 80041ac:	0f000001 	.word	0x0f000001

080041b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d13c      	bne.n	8004244 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d12b      	bne.n	800423c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d127      	bne.n	800423c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004204:	2b00      	cmp	r3, #0
 8004206:	d119      	bne.n	800423c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0220 	bic.w	r2, r2, #32
 8004216:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fe93 	bl	8003f68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004242:	e00e      	b.n	8004262 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff fea7 	bl	8003fa4 <HAL_ADC_ErrorCallback>
}
 8004256:	e004      	b.n	8004262 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff fe7f 	bl	8003f7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2240      	movs	r2, #64	; 0x40
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f043 0204 	orr.w	r2, r3, #4
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fe7c 	bl	8003fa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <__NVIC_SetPriorityGrouping+0x44>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042e4:	4013      	ands	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042fa:	4a04      	ldr	r2, [pc, #16]	; (800430c <__NVIC_SetPriorityGrouping+0x44>)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	60d3      	str	r3, [r2, #12]
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <__NVIC_GetPriorityGrouping+0x18>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 0307 	and.w	r3, r3, #7
}
 800431e:	4618      	mov	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	db0b      	blt.n	8004356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	f003 021f 	and.w	r2, r3, #31
 8004344:	4907      	ldr	r1, [pc, #28]	; (8004364 <__NVIC_EnableIRQ+0x38>)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2001      	movs	r0, #1
 800434e:	fa00 f202 	lsl.w	r2, r0, r2
 8004352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	e000e100 	.word	0xe000e100

08004368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	6039      	str	r1, [r7, #0]
 8004372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004378:	2b00      	cmp	r3, #0
 800437a:	db0a      	blt.n	8004392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	b2da      	uxtb	r2, r3
 8004380:	490c      	ldr	r1, [pc, #48]	; (80043b4 <__NVIC_SetPriority+0x4c>)
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	0112      	lsls	r2, r2, #4
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	440b      	add	r3, r1
 800438c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004390:	e00a      	b.n	80043a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	4908      	ldr	r1, [pc, #32]	; (80043b8 <__NVIC_SetPriority+0x50>)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	3b04      	subs	r3, #4
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	440b      	add	r3, r1
 80043a6:	761a      	strb	r2, [r3, #24]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000e100 	.word	0xe000e100
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	; 0x24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f1c3 0307 	rsb	r3, r3, #7
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	bf28      	it	cs
 80043da:	2304      	movcs	r3, #4
 80043dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d902      	bls.n	80043ec <NVIC_EncodePriority+0x30>
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3b03      	subs	r3, #3
 80043ea:	e000      	b.n	80043ee <NVIC_EncodePriority+0x32>
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	f04f 32ff 	mov.w	r2, #4294967295
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	401a      	ands	r2, r3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004404:	f04f 31ff 	mov.w	r1, #4294967295
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	43d9      	mvns	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004414:	4313      	orrs	r3, r2
         );
}
 8004416:	4618      	mov	r0, r3
 8004418:	3724      	adds	r7, #36	; 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3b01      	subs	r3, #1
 8004430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004434:	d301      	bcc.n	800443a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004436:	2301      	movs	r3, #1
 8004438:	e00f      	b.n	800445a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800443a:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <SysTick_Config+0x40>)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3b01      	subs	r3, #1
 8004440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004442:	210f      	movs	r1, #15
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	f7ff ff8e 	bl	8004368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <SysTick_Config+0x40>)
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004452:	4b04      	ldr	r3, [pc, #16]	; (8004464 <SysTick_Config+0x40>)
 8004454:	2207      	movs	r2, #7
 8004456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	e000e010 	.word	0xe000e010

08004468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ff29 	bl	80042c8 <__NVIC_SetPriorityGrouping>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af00      	add	r7, sp, #0
 8004484:	4603      	mov	r3, r0
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004490:	f7ff ff3e 	bl	8004310 <__NVIC_GetPriorityGrouping>
 8004494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	6978      	ldr	r0, [r7, #20]
 800449c:	f7ff ff8e 	bl	80043bc <NVIC_EncodePriority>
 80044a0:	4602      	mov	r2, r0
 80044a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff5d 	bl	8004368 <__NVIC_SetPriority>
}
 80044ae:	bf00      	nop
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff31 	bl	800432c <__NVIC_EnableIRQ>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ffa2 	bl	8004424 <SysTick_Config>
 80044e0:	4603      	mov	r3, r0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044f8:	f7ff fab6 	bl	8003a68 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e099      	b.n	800463c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004528:	e00f      	b.n	800454a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800452a:	f7ff fa9d 	bl	8003a68 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b05      	cmp	r3, #5
 8004536:	d908      	bls.n	800454a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2203      	movs	r2, #3
 8004542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e078      	b.n	800463c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e8      	bne.n	800452a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4b38      	ldr	r3, [pc, #224]	; (8004644 <HAL_DMA_Init+0x158>)
 8004564:	4013      	ands	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d107      	bne.n	80045b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	4313      	orrs	r3, r2
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0307 	bic.w	r3, r3, #7
 80045ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d117      	bne.n	800460e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fb01 	bl	8004bf8 <DMA_CheckFifoParam>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2240      	movs	r2, #64	; 0x40
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800460a:	2301      	movs	r3, #1
 800460c:	e016      	b.n	800463c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fab8 	bl	8004b8c <DMA_CalcBaseAndBitshift>
 800461c:	4603      	mov	r3, r0
 800461e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	223f      	movs	r2, #63	; 0x3f
 8004626:	409a      	lsls	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	f010803f 	.word	0xf010803f

08004648 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_DMA_Start_IT+0x26>
 800466a:	2302      	movs	r3, #2
 800466c:	e040      	b.n	80046f0 <HAL_DMA_Start_IT+0xa8>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d12f      	bne.n	80046e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fa4a 	bl	8004b30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a0:	223f      	movs	r2, #63	; 0x3f
 80046a2:	409a      	lsls	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0216 	orr.w	r2, r2, #22
 80046b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0208 	orr.w	r2, r2, #8
 80046ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	e005      	b.n	80046ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
 80046ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004706:	f7ff f9af 	bl	8003a68 <HAL_GetTick>
 800470a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d008      	beq.n	800472a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e052      	b.n	80047d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0216 	bic.w	r2, r2, #22
 8004738:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004748:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d103      	bne.n	800475a <HAL_DMA_Abort+0x62>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0208 	bic.w	r2, r2, #8
 8004768:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800477a:	e013      	b.n	80047a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800477c:	f7ff f974 	bl	8003a68 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b05      	cmp	r3, #5
 8004788:	d90c      	bls.n	80047a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2203      	movs	r2, #3
 800479c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e015      	b.n	80047d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e4      	bne.n	800477c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b6:	223f      	movs	r2, #63	; 0x3f
 80047b8:	409a      	lsls	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d004      	beq.n	80047f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2280      	movs	r2, #128	; 0x80
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e00c      	b.n	8004810 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2205      	movs	r2, #5
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004828:	4b92      	ldr	r3, [pc, #584]	; (8004a74 <HAL_DMA_IRQHandler+0x258>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a92      	ldr	r2, [pc, #584]	; (8004a78 <HAL_DMA_IRQHandler+0x25c>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	2208      	movs	r2, #8
 8004848:	409a      	lsls	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01a      	beq.n	8004888 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0204 	bic.w	r2, r2, #4
 800486e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	2208      	movs	r2, #8
 8004876:	409a      	lsls	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f043 0201 	orr.w	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	2201      	movs	r2, #1
 800488e:	409a      	lsls	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	2201      	movs	r2, #1
 80048ac:	409a      	lsls	r2, r3
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	f043 0202 	orr.w	r2, r3, #2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	2204      	movs	r2, #4
 80048c4:	409a      	lsls	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d012      	beq.n	80048f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00b      	beq.n	80048f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	2204      	movs	r2, #4
 80048e2:	409a      	lsls	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f043 0204 	orr.w	r2, r3, #4
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	2210      	movs	r2, #16
 80048fa:	409a      	lsls	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d043      	beq.n	800498c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d03c      	beq.n	800498c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004916:	2210      	movs	r2, #16
 8004918:	409a      	lsls	r2, r3
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d018      	beq.n	800495e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d108      	bne.n	800494c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d024      	beq.n	800498c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
 800494a:	e01f      	b.n	800498c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01b      	beq.n	800498c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4798      	blx	r3
 800495c:	e016      	b.n	800498c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d107      	bne.n	800497c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0208 	bic.w	r2, r2, #8
 800497a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004990:	2220      	movs	r2, #32
 8004992:	409a      	lsls	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 808e 	beq.w	8004aba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8086 	beq.w	8004aba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	2220      	movs	r2, #32
 80049b4:	409a      	lsls	r2, r3
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	d136      	bne.n	8004a34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0216 	bic.w	r2, r2, #22
 80049d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695a      	ldr	r2, [r3, #20]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <HAL_DMA_IRQHandler+0x1da>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0208 	bic.w	r2, r2, #8
 8004a04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0a:	223f      	movs	r2, #63	; 0x3f
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d07d      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4798      	blx	r3
        }
        return;
 8004a32:	e078      	b.n	8004b26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d01c      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d108      	bne.n	8004a62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d030      	beq.n	8004aba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
 8004a60:	e02b      	b.n	8004aba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d027      	beq.n	8004aba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
 8004a72:	e022      	b.n	8004aba <HAL_DMA_IRQHandler+0x29e>
 8004a74:	20000014 	.word	0x20000014
 8004a78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0210 	bic.w	r2, r2, #16
 8004a98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d032      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d022      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0201 	bic.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d307      	bcc.n	8004b02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f2      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0x2ca>
 8004b00:	e000      	b.n	8004b04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004b02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
 8004b24:	e000      	b.n	8004b28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b26:	bf00      	nop
    }
  }
}
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop

08004b30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d108      	bne.n	8004b70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b6e:	e007      	b.n	8004b80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	3b10      	subs	r3, #16
 8004b9c:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d909      	bls.n	8004bce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	659a      	str	r2, [r3, #88]	; 0x58
 8004bcc:	e007      	b.n	8004bde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	aaaaaaab 	.word	0xaaaaaaab
 8004bf4:	08009434 	.word	0x08009434

08004bf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11f      	bne.n	8004c52 <DMA_CheckFifoParam+0x5a>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d856      	bhi.n	8004cc6 <DMA_CheckFifoParam+0xce>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <DMA_CheckFifoParam+0x28>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c43 	.word	0x08004c43
 8004c28:	08004c31 	.word	0x08004c31
 8004c2c:	08004cc7 	.word	0x08004cc7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d046      	beq.n	8004cca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c40:	e043      	b.n	8004cca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c4a:	d140      	bne.n	8004cce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e03d      	b.n	8004cce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5a:	d121      	bne.n	8004ca0 <DMA_CheckFifoParam+0xa8>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d837      	bhi.n	8004cd2 <DMA_CheckFifoParam+0xda>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <DMA_CheckFifoParam+0x70>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004c7f 	.word	0x08004c7f
 8004c70:	08004c79 	.word	0x08004c79
 8004c74:	08004c91 	.word	0x08004c91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e030      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d025      	beq.n	8004cd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c8e:	e022      	b.n	8004cd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c98:	d11f      	bne.n	8004cda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c9e:	e01c      	b.n	8004cda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d903      	bls.n	8004cae <DMA_CheckFifoParam+0xb6>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d003      	beq.n	8004cb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cac:	e018      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb2:	e015      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00e      	beq.n	8004cde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	e00b      	b.n	8004cde <DMA_CheckFifoParam+0xe6>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e00a      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cca:	bf00      	nop
 8004ccc:	e008      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cce:	bf00      	nop
 8004cd0:	e006      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cd2:	bf00      	nop
 8004cd4:	e004      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e002      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cda:	bf00      	nop
 8004cdc:	e000      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cde:	bf00      	nop
    }
  } 
  
  return status; 
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop

08004cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b089      	sub	sp, #36	; 0x24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	e159      	b.n	8004fc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	f040 8148 	bne.w	8004fba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d005      	beq.n	8004d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d130      	bne.n	8004da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d78:	2201      	movs	r2, #1
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 0201 	and.w	r2, r3, #1
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d017      	beq.n	8004de0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2203      	movs	r2, #3
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d123      	bne.n	8004e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	08da      	lsrs	r2, r3, #3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3208      	adds	r2, #8
 8004df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	220f      	movs	r2, #15
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	08da      	lsrs	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3208      	adds	r2, #8
 8004e2e:	69b9      	ldr	r1, [r7, #24]
 8004e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	2203      	movs	r2, #3
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43db      	mvns	r3, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 0203 	and.w	r2, r3, #3
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80a2 	beq.w	8004fba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	4b57      	ldr	r3, [pc, #348]	; (8004fd8 <HAL_GPIO_Init+0x2e8>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	4a56      	ldr	r2, [pc, #344]	; (8004fd8 <HAL_GPIO_Init+0x2e8>)
 8004e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e84:	6453      	str	r3, [r2, #68]	; 0x44
 8004e86:	4b54      	ldr	r3, [pc, #336]	; (8004fd8 <HAL_GPIO_Init+0x2e8>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e92:	4a52      	ldr	r2, [pc, #328]	; (8004fdc <HAL_GPIO_Init+0x2ec>)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	089b      	lsrs	r3, r3, #2
 8004e98:	3302      	adds	r3, #2
 8004e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	220f      	movs	r2, #15
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a49      	ldr	r2, [pc, #292]	; (8004fe0 <HAL_GPIO_Init+0x2f0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d019      	beq.n	8004ef2 <HAL_GPIO_Init+0x202>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a48      	ldr	r2, [pc, #288]	; (8004fe4 <HAL_GPIO_Init+0x2f4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_GPIO_Init+0x1fe>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a47      	ldr	r2, [pc, #284]	; (8004fe8 <HAL_GPIO_Init+0x2f8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00d      	beq.n	8004eea <HAL_GPIO_Init+0x1fa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a46      	ldr	r2, [pc, #280]	; (8004fec <HAL_GPIO_Init+0x2fc>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <HAL_GPIO_Init+0x1f6>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a45      	ldr	r2, [pc, #276]	; (8004ff0 <HAL_GPIO_Init+0x300>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <HAL_GPIO_Init+0x1f2>
 8004ede:	2304      	movs	r3, #4
 8004ee0:	e008      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004ee2:	2307      	movs	r3, #7
 8004ee4:	e006      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e004      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e002      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	f002 0203 	and.w	r2, r2, #3
 8004efa:	0092      	lsls	r2, r2, #2
 8004efc:	4093      	lsls	r3, r2
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f04:	4935      	ldr	r1, [pc, #212]	; (8004fdc <HAL_GPIO_Init+0x2ec>)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	089b      	lsrs	r3, r3, #2
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f12:	4b38      	ldr	r3, [pc, #224]	; (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f36:	4a2f      	ldr	r2, [pc, #188]	; (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	43db      	mvns	r3, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f60:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f66:	4b23      	ldr	r3, [pc, #140]	; (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f90:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <HAL_GPIO_Init+0x304>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ff4 <HAL_GPIO_Init+0x304>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b0f      	cmp	r3, #15
 8004fc4:	f67f aea2 	bls.w	8004d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	3724      	adds	r7, #36	; 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40013800 	.word	0x40013800
 8004fe0:	40020000 	.word	0x40020000
 8004fe4:	40020400 	.word	0x40020400
 8004fe8:	40020800 	.word	0x40020800
 8004fec:	40020c00 	.word	0x40020c00
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40013c00 	.word	0x40013c00

08004ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	887b      	ldrh	r3, [r7, #2]
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	e001      	b.n	800501a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
 8005034:	4613      	mov	r3, r2
 8005036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005038:	787b      	ldrb	r3, [r7, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800503e:	887a      	ldrh	r2, [r7, #2]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005044:	e003      	b.n	800504e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	041a      	lsls	r2, r3, #16
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	619a      	str	r2, [r3, #24]
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
	...

0800505c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e264      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d075      	beq.n	8005166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800507a:	4ba3      	ldr	r3, [pc, #652]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b04      	cmp	r3, #4
 8005084:	d00c      	beq.n	80050a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005086:	4ba0      	ldr	r3, [pc, #640]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800508e:	2b08      	cmp	r3, #8
 8005090:	d112      	bne.n	80050b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005092:	4b9d      	ldr	r3, [pc, #628]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509e:	d10b      	bne.n	80050b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a0:	4b99      	ldr	r3, [pc, #612]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d05b      	beq.n	8005164 <HAL_RCC_OscConfig+0x108>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d157      	bne.n	8005164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e23f      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x74>
 80050c2:	4b91      	ldr	r3, [pc, #580]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a90      	ldr	r2, [pc, #576]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e01d      	b.n	800510c <HAL_RCC_OscConfig+0xb0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x98>
 80050da:	4b8b      	ldr	r3, [pc, #556]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a8a      	ldr	r2, [pc, #552]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a87      	ldr	r2, [pc, #540]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0xb0>
 80050f4:	4b84      	ldr	r3, [pc, #528]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a83      	ldr	r2, [pc, #524]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b81      	ldr	r3, [pc, #516]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a80      	ldr	r2, [pc, #512]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fe fca8 	bl	8003a68 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511c:	f7fe fca4 	bl	8003a68 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	; 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e204      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b76      	ldr	r3, [pc, #472]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0xc0>
 800513a:	e014      	b.n	8005166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fe fc94 	bl	8003a68 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005144:	f7fe fc90 	bl	8003a68 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e1f0      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005156:	4b6c      	ldr	r3, [pc, #432]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0xe8>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d063      	beq.n	800523a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005172:	4b65      	ldr	r3, [pc, #404]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800517e:	4b62      	ldr	r3, [pc, #392]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005186:	2b08      	cmp	r3, #8
 8005188:	d11c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518a:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d116      	bne.n	80051c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	4b5c      	ldr	r3, [pc, #368]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <HAL_RCC_OscConfig+0x152>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e1c4      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ae:	4b56      	ldr	r3, [pc, #344]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4952      	ldr	r1, [pc, #328]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c2:	e03a      	b.n	800523a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051cc:	4b4f      	ldr	r3, [pc, #316]	; (800530c <HAL_RCC_OscConfig+0x2b0>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fe fc49 	bl	8003a68 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051da:	f7fe fc45 	bl	8003a68 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e1a5      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ec:	4b46      	ldr	r3, [pc, #280]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f8:	4b43      	ldr	r3, [pc, #268]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4940      	ldr	r1, [pc, #256]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	4313      	orrs	r3, r2
 800520a:	600b      	str	r3, [r1, #0]
 800520c:	e015      	b.n	800523a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800520e:	4b3f      	ldr	r3, [pc, #252]	; (800530c <HAL_RCC_OscConfig+0x2b0>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fe fc28 	bl	8003a68 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800521c:	f7fe fc24 	bl	8003a68 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e184      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522e:	4b36      	ldr	r3, [pc, #216]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d030      	beq.n	80052a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524e:	4b30      	ldr	r3, [pc, #192]	; (8005310 <HAL_RCC_OscConfig+0x2b4>)
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fe fc08 	bl	8003a68 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800525c:	f7fe fc04 	bl	8003a68 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e164      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526e:	4b26      	ldr	r3, [pc, #152]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x200>
 800527a:	e015      	b.n	80052a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800527c:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCC_OscConfig+0x2b4>)
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005282:	f7fe fbf1 	bl	8003a68 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800528a:	f7fe fbed 	bl	8003a68 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e14d      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 800529e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80a0 	beq.w	80053f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10f      	bne.n	80052e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	4a0e      	ldr	r2, [pc, #56]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6413      	str	r3, [r2, #64]	; 0x40
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_RCC_OscConfig+0x2b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d121      	bne.n	8005336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <HAL_RCC_OscConfig+0x2b8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a07      	ldr	r2, [pc, #28]	; (8005314 <HAL_RCC_OscConfig+0x2b8>)
 80052f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fe:	f7fe fbb3 	bl	8003a68 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	e011      	b.n	800532a <HAL_RCC_OscConfig+0x2ce>
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
 800530c:	42470000 	.word	0x42470000
 8005310:	42470e80 	.word	0x42470e80
 8005314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005318:	f7fe fba6 	bl	8003a68 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e106      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532a:	4b85      	ldr	r3, [pc, #532]	; (8005540 <HAL_RCC_OscConfig+0x4e4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f0      	beq.n	8005318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d106      	bne.n	800534c <HAL_RCC_OscConfig+0x2f0>
 800533e:	4b81      	ldr	r3, [pc, #516]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	4a80      	ldr	r2, [pc, #512]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6713      	str	r3, [r2, #112]	; 0x70
 800534a:	e01c      	b.n	8005386 <HAL_RCC_OscConfig+0x32a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b05      	cmp	r3, #5
 8005352:	d10c      	bne.n	800536e <HAL_RCC_OscConfig+0x312>
 8005354:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	4a7a      	ldr	r2, [pc, #488]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	6713      	str	r3, [r2, #112]	; 0x70
 8005360:	4b78      	ldr	r3, [pc, #480]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a77      	ldr	r2, [pc, #476]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	e00b      	b.n	8005386 <HAL_RCC_OscConfig+0x32a>
 800536e:	4b75      	ldr	r3, [pc, #468]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	4a74      	ldr	r2, [pc, #464]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	6713      	str	r3, [r2, #112]	; 0x70
 800537a:	4b72      	ldr	r3, [pc, #456]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	4a71      	ldr	r2, [pc, #452]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d015      	beq.n	80053ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538e:	f7fe fb6b 	bl	8003a68 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005394:	e00a      	b.n	80053ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fe fb67 	bl	8003a68 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e0c5      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ac:	4b65      	ldr	r3, [pc, #404]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0ee      	beq.n	8005396 <HAL_RCC_OscConfig+0x33a>
 80053b8:	e014      	b.n	80053e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ba:	f7fe fb55 	bl	8003a68 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c0:	e00a      	b.n	80053d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c2:	f7fe fb51 	bl	8003a68 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e0af      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d8:	4b5a      	ldr	r3, [pc, #360]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ee      	bne.n	80053c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d105      	bne.n	80053f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ea:	4b56      	ldr	r3, [pc, #344]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	4a55      	ldr	r2, [pc, #340]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80053f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 809b 	beq.w	8005536 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 030c 	and.w	r3, r3, #12
 8005408:	2b08      	cmp	r3, #8
 800540a:	d05c      	beq.n	80054c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d141      	bne.n	8005498 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005414:	4b4c      	ldr	r3, [pc, #304]	; (8005548 <HAL_RCC_OscConfig+0x4ec>)
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541a:	f7fe fb25 	bl	8003a68 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005422:	f7fe fb21 	bl	8003a68 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e081      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005434:	4b43      	ldr	r3, [pc, #268]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f0      	bne.n	8005422 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	019b      	lsls	r3, r3, #6
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	3b01      	subs	r3, #1
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	061b      	lsls	r3, r3, #24
 8005464:	4937      	ldr	r1, [pc, #220]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005466:	4313      	orrs	r3, r2
 8005468:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800546a:	4b37      	ldr	r3, [pc, #220]	; (8005548 <HAL_RCC_OscConfig+0x4ec>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fe fafa 	bl	8003a68 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005478:	f7fe faf6 	bl	8003a68 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e056      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548a:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x41c>
 8005496:	e04e      	b.n	8005536 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005498:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <HAL_RCC_OscConfig+0x4ec>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549e:	f7fe fae3 	bl	8003a68 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fe fadf 	bl	8003a68 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e03f      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b8:	4b22      	ldr	r3, [pc, #136]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x44a>
 80054c4:	e037      	b.n	8005536 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e032      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d028      	beq.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d121      	bne.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d11a      	bne.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005508:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	3b01      	subs	r3, #1
 800551c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800551e:	429a      	cmp	r2, r3
 8005520:	d107      	bne.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800552e:	429a      	cmp	r2, r3
 8005530:	d001      	beq.n	8005536 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40007000 	.word	0x40007000
 8005544:	40023800 	.word	0x40023800
 8005548:	42470060 	.word	0x42470060

0800554c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0cc      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005560:	4b68      	ldr	r3, [pc, #416]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d90c      	bls.n	8005588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b65      	ldr	r3, [pc, #404]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005576:	4b63      	ldr	r3, [pc, #396]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d001      	beq.n	8005588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0b8      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d020      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055a0:	4b59      	ldr	r3, [pc, #356]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4a58      	ldr	r2, [pc, #352]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055b8:	4b53      	ldr	r3, [pc, #332]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4a52      	ldr	r2, [pc, #328]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c4:	4b50      	ldr	r3, [pc, #320]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	494d      	ldr	r1, [pc, #308]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d044      	beq.n	800566c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d107      	bne.n	80055fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d119      	bne.n	800562a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e07f      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d003      	beq.n	800560a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005606:	2b03      	cmp	r3, #3
 8005608:	d107      	bne.n	800561a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560a:	4b3f      	ldr	r3, [pc, #252]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e06f      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561a:	4b3b      	ldr	r3, [pc, #236]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e067      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800562a:	4b37      	ldr	r3, [pc, #220]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f023 0203 	bic.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4934      	ldr	r1, [pc, #208]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	4313      	orrs	r3, r2
 800563a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800563c:	f7fe fa14 	bl	8003a68 <HAL_GetTick>
 8005640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	e00a      	b.n	800565a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005644:	f7fe fa10 	bl	8003a68 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e04f      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565a:	4b2b      	ldr	r3, [pc, #172]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 020c 	and.w	r2, r3, #12
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	429a      	cmp	r2, r3
 800566a:	d1eb      	bne.n	8005644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800566c:	4b25      	ldr	r3, [pc, #148]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d20c      	bcs.n	8005694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567a:	4b22      	ldr	r3, [pc, #136]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005682:	4b20      	ldr	r3, [pc, #128]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d001      	beq.n	8005694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e032      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4916      	ldr	r1, [pc, #88]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	490e      	ldr	r1, [pc, #56]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056d2:	f000 f821 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 80056d6:	4602      	mov	r2, r0
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	490a      	ldr	r1, [pc, #40]	; (800570c <HAL_RCC_ClockConfig+0x1c0>)
 80056e4:	5ccb      	ldrb	r3, [r1, r3]
 80056e6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ea:	4a09      	ldr	r2, [pc, #36]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 80056ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fe f974 	bl	80039e0 <HAL_InitTick>

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40023c00 	.word	0x40023c00
 8005708:	40023800 	.word	0x40023800
 800570c:	0800941c 	.word	0x0800941c
 8005710:	20000014 	.word	0x20000014
 8005714:	20000018 	.word	0x20000018

08005718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005718:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	607b      	str	r3, [r7, #4]
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	2300      	movs	r3, #0
 800572a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005730:	4b67      	ldr	r3, [pc, #412]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b08      	cmp	r3, #8
 800573a:	d00d      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x40>
 800573c:	2b08      	cmp	r3, #8
 800573e:	f200 80bd 	bhi.w	80058bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x34>
 8005746:	2b04      	cmp	r3, #4
 8005748:	d003      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0x3a>
 800574a:	e0b7      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800574c:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800574e:	60bb      	str	r3, [r7, #8]
       break;
 8005750:	e0b7      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005752:	4b61      	ldr	r3, [pc, #388]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005754:	60bb      	str	r3, [r7, #8]
      break;
 8005756:	e0b4      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005758:	4b5d      	ldr	r3, [pc, #372]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005760:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005762:	4b5b      	ldr	r3, [pc, #364]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d04d      	beq.n	800580a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800576e:	4b58      	ldr	r3, [pc, #352]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	461a      	mov	r2, r3
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	ea02 0800 	and.w	r8, r2, r0
 8005786:	ea03 0901 	and.w	r9, r3, r1
 800578a:	4640      	mov	r0, r8
 800578c:	4649      	mov	r1, r9
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	014b      	lsls	r3, r1, #5
 8005798:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800579c:	0142      	lsls	r2, r0, #5
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	ebb0 0008 	subs.w	r0, r0, r8
 80057a6:	eb61 0109 	sbc.w	r1, r1, r9
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	018b      	lsls	r3, r1, #6
 80057b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057b8:	0182      	lsls	r2, r0, #6
 80057ba:	1a12      	subs	r2, r2, r0
 80057bc:	eb63 0301 	sbc.w	r3, r3, r1
 80057c0:	f04f 0000 	mov.w	r0, #0
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	00d9      	lsls	r1, r3, #3
 80057ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057ce:	00d0      	lsls	r0, r2, #3
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	eb12 0208 	adds.w	r2, r2, r8
 80057d8:	eb43 0309 	adc.w	r3, r3, r9
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	0259      	lsls	r1, r3, #9
 80057e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80057ea:	0250      	lsls	r0, r2, #9
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	f7fb fa16 	bl	8000c2c <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4613      	mov	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e04a      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	099b      	lsrs	r3, r3, #6
 8005810:	461a      	mov	r2, r3
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	f240 10ff 	movw	r0, #511	; 0x1ff
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	ea02 0400 	and.w	r4, r2, r0
 8005822:	ea03 0501 	and.w	r5, r3, r1
 8005826:	4620      	mov	r0, r4
 8005828:	4629      	mov	r1, r5
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	014b      	lsls	r3, r1, #5
 8005834:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005838:	0142      	lsls	r2, r0, #5
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	1b00      	subs	r0, r0, r4
 8005840:	eb61 0105 	sbc.w	r1, r1, r5
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	018b      	lsls	r3, r1, #6
 800584e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005852:	0182      	lsls	r2, r0, #6
 8005854:	1a12      	subs	r2, r2, r0
 8005856:	eb63 0301 	sbc.w	r3, r3, r1
 800585a:	f04f 0000 	mov.w	r0, #0
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	00d9      	lsls	r1, r3, #3
 8005864:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005868:	00d0      	lsls	r0, r2, #3
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	1912      	adds	r2, r2, r4
 8005870:	eb45 0303 	adc.w	r3, r5, r3
 8005874:	f04f 0000 	mov.w	r0, #0
 8005878:	f04f 0100 	mov.w	r1, #0
 800587c:	0299      	lsls	r1, r3, #10
 800587e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005882:	0290      	lsls	r0, r2, #10
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	461a      	mov	r2, r3
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f7fb f9ca 	bl	8000c2c <__aeabi_uldivmod>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4613      	mov	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	3301      	adds	r3, #1
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	60bb      	str	r3, [r7, #8]
      break;
 80058ba:	e002      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058be:	60bb      	str	r3, [r7, #8]
      break;
 80058c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058c2:	68bb      	ldr	r3, [r7, #8]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80058ce:	bf00      	nop
 80058d0:	40023800 	.word	0x40023800
 80058d4:	00f42400 	.word	0x00f42400
 80058d8:	007a1200 	.word	0x007a1200

080058dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000014 	.word	0x20000014

080058f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058f8:	f7ff fff0 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	0a9b      	lsrs	r3, r3, #10
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	4903      	ldr	r1, [pc, #12]	; (8005918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800590a:	5ccb      	ldrb	r3, [r1, r3]
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40023800 	.word	0x40023800
 8005918:	0800942c 	.word	0x0800942c

0800591c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005920:	f7ff ffdc 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	0b5b      	lsrs	r3, r3, #13
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	4903      	ldr	r1, [pc, #12]	; (8005940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005932:	5ccb      	ldrb	r3, [r1, r3]
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40023800 	.word	0x40023800
 8005940:	0800942c 	.word	0x0800942c

08005944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e07b      	b.n	8005a4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d108      	bne.n	8005970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005966:	d009      	beq.n	800597c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	61da      	str	r2, [r3, #28]
 800596e:	e005      	b.n	800597c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fd fe54 	bl	8003644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	ea42 0103 	orr.w	r1, r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	f003 0104 	and.w	r1, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	f003 0210 	and.w	r2, r3, #16
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_SPI_Transmit_IT+0x20>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e06f      	b.n	8005b58 <HAL_SPI_Transmit_IT+0x100>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_SPI_Transmit_IT+0x34>
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d102      	bne.n	8005a92 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a90:	e05d      	b.n	8005b4e <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d002      	beq.n	8005aa4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005aa2:	e054      	b.n	8005b4e <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <HAL_SPI_Transmit_IT+0x10c>)
 8005ae8:	645a      	str	r2, [r3, #68]	; 0x44
 8005aea:	e002      	b.n	8005af2 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <HAL_SPI_Transmit_IT+0x110>)
 8005af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	d10f      	bne.n	8005b1c <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005b2a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d008      	beq.n	8005b4c <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e000      	b.n	8005b4e <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8005b4c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	08005def 	.word	0x08005def
 8005b68:	08005da9 	.word	0x08005da9

08005b6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10f      	bne.n	8005bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	099b      	lsrs	r3, r3, #6
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
    return;
 8005bae:	e0d7      	b.n	8005d60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_SPI_IRQHandler+0x66>
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	09db      	lsrs	r3, r3, #7
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
    return;
 8005bd0:	e0c6      	b.n	8005d60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_SPI_IRQHandler+0x8c>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	099b      	lsrs	r3, r3, #6
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80b4 	beq.w	8005d60 <HAL_SPI_IRQHandler+0x1f4>
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80ad 	beq.w	8005d60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	099b      	lsrs	r3, r3, #6
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d023      	beq.n	8005c5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d011      	beq.n	8005c42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f043 0204 	orr.w	r2, r3, #4
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	e00b      	b.n	8005c5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	693b      	ldr	r3, [r7, #16]
        return;
 8005c58:	e082      	b.n	8005d60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d014      	beq.n	8005c90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca0:	f043 0208 	orr.w	r2, r3, #8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60bb      	str	r3, [r7, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d04f      	beq.n	8005d5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ccc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d104      	bne.n	8005cea <HAL_SPI_IRQHandler+0x17e>
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d034      	beq.n	8005d54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0203 	bic.w	r2, r2, #3
 8005cf8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d011      	beq.n	8005d26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <HAL_SPI_IRQHandler+0x1fc>)
 8005d08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe fd62 	bl	80047d8 <HAL_DMA_Abort_IT>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d016      	beq.n	8005d5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d32:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <HAL_SPI_IRQHandler+0x1fc>)
 8005d34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fd4c 	bl	80047d8 <HAL_DMA_Abort_IT>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005d52:	e003      	b.n	8005d5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f809 	bl	8005d6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d5a:	e000      	b.n	8005d5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d5c:	bf00      	nop
    return;
 8005d5e:	bf00      	nop
  }
}
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	08005d81 	.word	0x08005d81

08005d6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff ffe6 	bl	8005d6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	7812      	ldrb	r2, [r2, #0]
 8005dbc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8f1 	bl	8005fc8 <SPI_CloseTx_ISR>
  }
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	1c9a      	adds	r2, r3, #2
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8cf 	bl	8005fc8 <SPI_CloseTx_ISR>
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e44:	f7fd fe10 	bl	8003a68 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	1a9b      	subs	r3, r3, r2
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e54:	f7fd fe08 	bl	8003a68 <HAL_GetTick>
 8005e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e5a:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	015b      	lsls	r3, r3, #5
 8005e60:	0d1b      	lsrs	r3, r3, #20
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	fb02 f303 	mul.w	r3, r2, r3
 8005e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e6a:	e054      	b.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d050      	beq.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e74:	f7fd fdf8 	bl	8003a68 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d902      	bls.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d13d      	bne.n	8005f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea2:	d111      	bne.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eac:	d004      	beq.n	8005eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb6:	d107      	bne.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed0:	d10f      	bne.n	8005ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e017      	b.n	8005f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d19b      	bne.n	8005e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000014 	.word	0x20000014

08005f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f50:	4b1b      	ldr	r3, [pc, #108]	; (8005fc0 <SPI_EndRxTxTransaction+0x7c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1b      	ldr	r2, [pc, #108]	; (8005fc4 <SPI_EndRxTxTransaction+0x80>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	0d5b      	lsrs	r3, r3, #21
 8005f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f60:	fb02 f303 	mul.w	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f6e:	d112      	bne.n	8005f96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2180      	movs	r1, #128	; 0x80
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff ff5a 	bl	8005e34 <SPI_WaitFlagStateUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	f043 0220 	orr.w	r2, r3, #32
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e00f      	b.n	8005fb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fac:	2b80      	cmp	r3, #128	; 0x80
 8005fae:	d0f2      	beq.n	8005f96 <SPI_EndRxTxTransaction+0x52>
 8005fb0:	e000      	b.n	8005fb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005fb2:	bf00      	nop
  }

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000014 	.word	0x20000014
 8005fc4:	165e9f81 	.word	0x165e9f81

08005fc8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005fd0:	4b2c      	ldr	r3, [pc, #176]	; (8006084 <SPI_CloseTx_ISR+0xbc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <SPI_CloseTx_ISR+0xc0>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	0a5b      	lsrs	r3, r3, #9
 8005fdc:	2264      	movs	r2, #100	; 0x64
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
 8005fe2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fe4:	f7fd fd40 	bl	8003a68 <HAL_GetTick>
 8005fe8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d106      	bne.n	8005ffe <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	f043 0220 	orr.w	r2, r3, #32
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ffc:	e009      	b.n	8006012 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3b01      	subs	r3, #1
 8006002:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0eb      	beq.n	8005fea <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006020:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	2164      	movs	r1, #100	; 0x64
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff ff8c 	bl	8005f44 <SPI_EndRxTxTransaction>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006036:	f043 0220 	orr.w	r2, r3, #32
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff fe7d 	bl	8005d6c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006072:	e002      	b.n	800607a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7fd f9b9 	bl	80033ec <HAL_SPI_TxCpltCallback>
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000014 	.word	0x20000014
 8006088:	057619f1 	.word	0x057619f1

0800608c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e041      	b.n	8006122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fd fb16 	bl	80036e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 fade 	bl	800668c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d001      	beq.n	8006144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e03c      	b.n	80061be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <HAL_TIM_Base_Start+0xa0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d018      	beq.n	8006188 <HAL_TIM_Base_Start+0x5c>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615e:	d013      	beq.n	8006188 <HAL_TIM_Base_Start+0x5c>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1a      	ldr	r2, [pc, #104]	; (80061d0 <HAL_TIM_Base_Start+0xa4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00e      	beq.n	8006188 <HAL_TIM_Base_Start+0x5c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a19      	ldr	r2, [pc, #100]	; (80061d4 <HAL_TIM_Base_Start+0xa8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d009      	beq.n	8006188 <HAL_TIM_Base_Start+0x5c>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <HAL_TIM_Base_Start+0xac>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d004      	beq.n	8006188 <HAL_TIM_Base_Start+0x5c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a16      	ldr	r2, [pc, #88]	; (80061dc <HAL_TIM_Base_Start+0xb0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d111      	bne.n	80061ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b06      	cmp	r3, #6
 8006198:	d010      	beq.n	80061bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061aa:	e007      	b.n	80061bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40010000 	.word	0x40010000
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40014000 	.word	0x40014000

080061e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d001      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e044      	b.n	8006282 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1e      	ldr	r2, [pc, #120]	; (8006290 <HAL_TIM_Base_Start_IT+0xb0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d013      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_TIM_Base_Start_IT+0xb4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a19      	ldr	r2, [pc, #100]	; (8006298 <HAL_TIM_Base_Start_IT+0xb8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a17      	ldr	r2, [pc, #92]	; (800629c <HAL_TIM_Base_Start_IT+0xbc>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d111      	bne.n	8006270 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b06      	cmp	r3, #6
 800625c:	d010      	beq.n	8006280 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	e007      	b.n	8006280 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40010000 	.word	0x40010000
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	40014000 	.word	0x40014000

080062a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d122      	bne.n	8006300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d11b      	bne.n	8006300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0202 	mvn.w	r2, #2
 80062d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f9b2 	bl	8006650 <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f9a4 	bl	800663c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f9b5 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b04      	cmp	r3, #4
 800630c:	d122      	bne.n	8006354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b04      	cmp	r3, #4
 800631a:	d11b      	bne.n	8006354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0204 	mvn.w	r2, #4
 8006324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2202      	movs	r2, #2
 800632a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f988 	bl	8006650 <HAL_TIM_IC_CaptureCallback>
 8006340:	e005      	b.n	800634e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f97a 	bl	800663c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f98b 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b08      	cmp	r3, #8
 8006360:	d122      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b08      	cmp	r3, #8
 800636e:	d11b      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0208 	mvn.w	r2, #8
 8006378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2204      	movs	r2, #4
 800637e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f95e 	bl	8006650 <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f950 	bl	800663c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f961 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d122      	bne.n	80063fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d11b      	bne.n	80063fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0210 	mvn.w	r2, #16
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2208      	movs	r2, #8
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f934 	bl	8006650 <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f926 	bl	800663c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f937 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b01      	cmp	r3, #1
 8006408:	d10e      	bne.n	8006428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b01      	cmp	r3, #1
 8006416:	d107      	bne.n	8006428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0201 	mvn.w	r2, #1
 8006420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fc fff8 	bl	8003418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d10e      	bne.n	8006454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d107      	bne.n	8006454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800644c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 faae 	bl	80069b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b40      	cmp	r3, #64	; 0x40
 8006460:	d10e      	bne.n	8006480 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	d107      	bne.n	8006480 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f8fc 	bl	8006678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b20      	cmp	r3, #32
 800648c:	d10e      	bne.n	80064ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b20      	cmp	r3, #32
 800649a:	d107      	bne.n	80064ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0220 	mvn.w	r2, #32
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa78 	bl	800699c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_TIM_ConfigClockSource+0x18>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e0b3      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x180>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006504:	d03e      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0xd0>
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650a:	f200 8087 	bhi.w	800661c <HAL_TIM_ConfigClockSource+0x168>
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	f000 8085 	beq.w	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	d87f      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 800651c:	2b70      	cmp	r3, #112	; 0x70
 800651e:	d01a      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0xa2>
 8006520:	2b70      	cmp	r3, #112	; 0x70
 8006522:	d87b      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 8006524:	2b60      	cmp	r3, #96	; 0x60
 8006526:	d050      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x116>
 8006528:	2b60      	cmp	r3, #96	; 0x60
 800652a:	d877      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 800652c:	2b50      	cmp	r3, #80	; 0x50
 800652e:	d03c      	beq.n	80065aa <HAL_TIM_ConfigClockSource+0xf6>
 8006530:	2b50      	cmp	r3, #80	; 0x50
 8006532:	d873      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d058      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0x136>
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d86f      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 800653c:	2b30      	cmp	r3, #48	; 0x30
 800653e:	d064      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x156>
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d86b      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d060      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x156>
 8006548:	2b20      	cmp	r3, #32
 800654a:	d867      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d05c      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x156>
 8006550:	2b10      	cmp	r3, #16
 8006552:	d05a      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006554:	e062      	b.n	800661c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6899      	ldr	r1, [r3, #8]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f000 f98b 	bl	8006880 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006578:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	609a      	str	r2, [r3, #8]
      break;
 8006582:	e04e      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	6899      	ldr	r1, [r3, #8]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f000 f974 	bl	8006880 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065a6:	609a      	str	r2, [r3, #8]
      break;
 80065a8:	e03b      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6859      	ldr	r1, [r3, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f000 f8e8 	bl	800678c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2150      	movs	r1, #80	; 0x50
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f941 	bl	800684a <TIM_ITRx_SetConfig>
      break;
 80065c8:	e02b      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f000 f907 	bl	80067ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2160      	movs	r1, #96	; 0x60
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 f931 	bl	800684a <TIM_ITRx_SetConfig>
      break;
 80065e8:	e01b      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6859      	ldr	r1, [r3, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f000 f8c8 	bl	800678c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2140      	movs	r1, #64	; 0x40
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f921 	bl	800684a <TIM_ITRx_SetConfig>
      break;
 8006608:	e00b      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f000 f918 	bl	800684a <TIM_ITRx_SetConfig>
        break;
 800661a:	e002      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800661c:	bf00      	nop
 800661e:	e000      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006620:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a34      	ldr	r2, [pc, #208]	; (8006770 <TIM_Base_SetConfig+0xe4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00f      	beq.n	80066c4 <TIM_Base_SetConfig+0x38>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066aa:	d00b      	beq.n	80066c4 <TIM_Base_SetConfig+0x38>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a31      	ldr	r2, [pc, #196]	; (8006774 <TIM_Base_SetConfig+0xe8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <TIM_Base_SetConfig+0x38>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a30      	ldr	r2, [pc, #192]	; (8006778 <TIM_Base_SetConfig+0xec>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_Base_SetConfig+0x38>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a2f      	ldr	r2, [pc, #188]	; (800677c <TIM_Base_SetConfig+0xf0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d108      	bne.n	80066d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a25      	ldr	r2, [pc, #148]	; (8006770 <TIM_Base_SetConfig+0xe4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01b      	beq.n	8006716 <TIM_Base_SetConfig+0x8a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e4:	d017      	beq.n	8006716 <TIM_Base_SetConfig+0x8a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a22      	ldr	r2, [pc, #136]	; (8006774 <TIM_Base_SetConfig+0xe8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <TIM_Base_SetConfig+0x8a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a21      	ldr	r2, [pc, #132]	; (8006778 <TIM_Base_SetConfig+0xec>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00f      	beq.n	8006716 <TIM_Base_SetConfig+0x8a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a20      	ldr	r2, [pc, #128]	; (800677c <TIM_Base_SetConfig+0xf0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00b      	beq.n	8006716 <TIM_Base_SetConfig+0x8a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a1f      	ldr	r2, [pc, #124]	; (8006780 <TIM_Base_SetConfig+0xf4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <TIM_Base_SetConfig+0x8a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a1e      	ldr	r2, [pc, #120]	; (8006784 <TIM_Base_SetConfig+0xf8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_Base_SetConfig+0x8a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a1d      	ldr	r2, [pc, #116]	; (8006788 <TIM_Base_SetConfig+0xfc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d108      	bne.n	8006728 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a08      	ldr	r2, [pc, #32]	; (8006770 <TIM_Base_SetConfig+0xe4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d103      	bne.n	800675c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	615a      	str	r2, [r3, #20]
}
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40010000 	.word	0x40010000
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40000c00 	.word	0x40000c00
 8006780:	40014000 	.word	0x40014000
 8006784:	40014400 	.word	0x40014400
 8006788:	40014800 	.word	0x40014800

0800678c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 030a 	bic.w	r3, r3, #10
 80067c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b087      	sub	sp, #28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f023 0210 	bic.w	r2, r3, #16
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	031b      	lsls	r3, r3, #12
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006826:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	f043 0307 	orr.w	r3, r3, #7
 800686c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	609a      	str	r2, [r3, #8]
}
 8006874:	bf00      	nop
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800689a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	021a      	lsls	r2, r3, #8
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	609a      	str	r2, [r3, #8]
}
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e050      	b.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1c      	ldr	r2, [pc, #112]	; (8006988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d018      	beq.n	800694e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006924:	d013      	beq.n	800694e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a18      	ldr	r2, [pc, #96]	; (800698c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00e      	beq.n	800694e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a16      	ldr	r2, [pc, #88]	; (8006990 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d009      	beq.n	800694e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a15      	ldr	r2, [pc, #84]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d004      	beq.n	800694e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a13      	ldr	r2, [pc, #76]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10c      	bne.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	4313      	orrs	r3, r2
 800695e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000
 800698c:	40000400 	.word	0x40000400
 8006990:	40000800 	.word	0x40000800
 8006994:	40000c00 	.word	0x40000c00
 8006998:	40014000 	.word	0x40014000

0800699c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e03f      	b.n	8006a56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fc feb8 	bl	8003760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2224      	movs	r2, #36	; 0x24
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fc85 	bl	8007318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b08a      	sub	sp, #40	; 0x28
 8006a62:	af02      	add	r7, sp, #8
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d17c      	bne.n	8006b78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <HAL_UART_Transmit+0x2c>
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e075      	b.n	8006b7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_UART_Transmit+0x3e>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e06e      	b.n	8006b7a <HAL_UART_Transmit+0x11c>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2221      	movs	r2, #33	; 0x21
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ab2:	f7fc ffd9 	bl	8003a68 <HAL_GetTick>
 8006ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	88fa      	ldrh	r2, [r7, #6]
 8006abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	88fa      	ldrh	r2, [r7, #6]
 8006ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006acc:	d108      	bne.n	8006ae0 <HAL_UART_Transmit+0x82>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	e003      	b.n	8006ae8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006af0:	e02a      	b.n	8006b48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	2180      	movs	r1, #128	; 0x80
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fa47 	bl	8006f90 <UART_WaitOnFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e036      	b.n	8006b7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10b      	bne.n	8006b2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	3302      	adds	r3, #2
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	e007      	b.n	8006b3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1cf      	bne.n	8006af2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2140      	movs	r1, #64	; 0x40
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 fa17 	bl	8006f90 <UART_WaitOnFlagUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e006      	b.n	8006b7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e000      	b.n	8006b7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b78:	2302      	movs	r3, #2
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d11d      	bne.n	8006bd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_UART_Receive_IT+0x26>
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e016      	b.n	8006bda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_UART_Receive_IT+0x38>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e00f      	b.n	8006bda <HAL_UART_Receive_IT+0x58>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68b9      	ldr	r1, [r7, #8]
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fa28 	bl	8007024 <UART_Start_Receive_IT>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	e000      	b.n	8006bda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10d      	bne.n	8006c36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <HAL_UART_IRQHandler+0x52>
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fadb 	bl	80071ea <UART_Receive_IT>
      return;
 8006c34:	e17c      	b.n	8006f30 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 80b1 	beq.w	8006da0 <HAL_UART_IRQHandler+0x1bc>
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d105      	bne.n	8006c54 <HAL_UART_IRQHandler+0x70>
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80a6 	beq.w	8006da0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <HAL_UART_IRQHandler+0x90>
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	f043 0201 	orr.w	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <HAL_UART_IRQHandler+0xb0>
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	f043 0202 	orr.w	r2, r3, #2
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xd0>
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	f043 0204 	orr.w	r2, r3, #4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00f      	beq.n	8006cde <HAL_UART_IRQHandler+0xfa>
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d104      	bne.n	8006cd2 <HAL_UART_IRQHandler+0xee>
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	f043 0208 	orr.w	r2, r3, #8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 811f 	beq.w	8006f26 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <HAL_UART_IRQHandler+0x11e>
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa74 	bl	80071ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	bf0c      	ite	eq
 8006d10:	2301      	moveq	r3, #1
 8006d12:	2300      	movne	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <HAL_UART_IRQHandler+0x146>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d031      	beq.n	8006d8e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9b4 	bl	8007098 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b40      	cmp	r3, #64	; 0x40
 8006d3c:	d123      	bne.n	8006d86 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d013      	beq.n	8006d7e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	4a77      	ldr	r2, [pc, #476]	; (8006f38 <HAL_UART_IRQHandler+0x354>)
 8006d5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fd fd38 	bl	80047d8 <HAL_DMA_Abort_IT>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d016      	beq.n	8006d9c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7c:	e00e      	b.n	8006d9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f8f0 	bl	8006f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d84:	e00a      	b.n	8006d9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f8ec 	bl	8006f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	e006      	b.n	8006d9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f8e8 	bl	8006f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d9a:	e0c4      	b.n	8006f26 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9c:	bf00      	nop
    return;
 8006d9e:	e0c2      	b.n	8006f26 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	f040 80a2 	bne.w	8006eee <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 809c 	beq.w	8006eee <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8096 	beq.w	8006eee <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d14f      	bne.n	8006e86 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006df0:	8a3b      	ldrh	r3, [r7, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8099 	beq.w	8006f2a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dfc:	8a3a      	ldrh	r2, [r7, #16]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	f080 8093 	bcs.w	8006f2a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8a3a      	ldrh	r2, [r7, #16]
 8006e08:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e14:	d02b      	beq.n	8006e6e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e24:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	695a      	ldr	r2, [r3, #20]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e44:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0210 	bic.w	r2, r2, #16
 8006e62:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fd fc45 	bl	80046f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f87a 	bl	8006f78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e84:	e051      	b.n	8006f2a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d047      	beq.n	8006f2e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006e9e:	8a7b      	ldrh	r3, [r7, #18]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d044      	beq.n	8006f2e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eb2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695a      	ldr	r2, [r3, #20]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0201 	bic.w	r2, r2, #1
 8006ec2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0210 	bic.w	r2, r2, #16
 8006ee0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ee2:	8a7b      	ldrh	r3, [r7, #18]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f846 	bl	8006f78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006eec:	e01f      	b.n	8006f2e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d008      	beq.n	8006f0a <HAL_UART_IRQHandler+0x326>
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f909 	bl	800711a <UART_Transmit_IT>
    return;
 8006f08:	e012      	b.n	8006f30 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00d      	beq.n	8006f30 <HAL_UART_IRQHandler+0x34c>
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d008      	beq.n	8006f30 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f94b 	bl	80071ba <UART_EndTransmit_IT>
    return;
 8006f24:	e004      	b.n	8006f30 <HAL_UART_IRQHandler+0x34c>
    return;
 8006f26:	bf00      	nop
 8006f28:	e002      	b.n	8006f30 <HAL_UART_IRQHandler+0x34c>
      return;
 8006f2a:	bf00      	nop
 8006f2c:	e000      	b.n	8006f30 <HAL_UART_IRQHandler+0x34c>
      return;
 8006f2e:	bf00      	nop
  }
}
 8006f30:	3728      	adds	r7, #40	; 0x28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	080070f3 	.word	0x080070f3

08006f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa0:	e02c      	b.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d028      	beq.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fb0:	f7fc fd5a 	bl	8003a68 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d21d      	bcs.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695a      	ldr	r2, [r3, #20]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e00f      	b.n	800701c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4013      	ands	r3, r2
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	429a      	cmp	r2, r3
 800700a:	bf0c      	ite	eq
 800700c:	2301      	moveq	r3, #1
 800700e:	2300      	movne	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	429a      	cmp	r2, r3
 8007018:	d0c3      	beq.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	88fa      	ldrh	r2, [r7, #6]
 800703c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	88fa      	ldrh	r2, [r7, #6]
 8007042:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2222      	movs	r2, #34	; 0x22
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007068:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695a      	ldr	r2, [r3, #20]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0220 	orr.w	r2, r2, #32
 8007088:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695a      	ldr	r2, [r3, #20]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d107      	bne.n	80070d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0210 	bic.w	r2, r2, #16
 80070d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff ff29 	bl	8006f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b21      	cmp	r3, #33	; 0x21
 800712c:	d13e      	bne.n	80071ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007136:	d114      	bne.n	8007162 <UART_Transmit_IT+0x48>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d110      	bne.n	8007162 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007154:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	1c9a      	adds	r2, r3, #2
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	621a      	str	r2, [r3, #32]
 8007160:	e008      	b.n	8007174 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	1c59      	adds	r1, r3, #1
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6211      	str	r1, [r2, #32]
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29b      	uxth	r3, r3
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4619      	mov	r1, r3
 8007182:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10f      	bne.n	80071a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007196:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff feae 	bl	8006f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b22      	cmp	r3, #34	; 0x22
 80071fc:	f040 8087 	bne.w	800730e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007208:	d117      	bne.n	800723a <UART_Receive_IT+0x50>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d113      	bne.n	800723a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007228:	b29a      	uxth	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	1c9a      	adds	r2, r3, #2
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28
 8007238:	e026      	b.n	8007288 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007240:	2300      	movs	r3, #0
 8007242:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724c:	d007      	beq.n	800725e <UART_Receive_IT+0x74>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <UART_Receive_IT+0x82>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	e008      	b.n	800727e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007278:	b2da      	uxtb	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4619      	mov	r1, r3
 8007296:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007298:	2b00      	cmp	r3, #0
 800729a:	d136      	bne.n	800730a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0220 	bic.w	r2, r2, #32
 80072aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695a      	ldr	r2, [r3, #20]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0201 	bic.w	r2, r2, #1
 80072ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d10e      	bne.n	80072fa <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0210 	bic.w	r2, r2, #16
 80072ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff fe40 	bl	8006f78 <HAL_UARTEx_RxEventCallback>
 80072f8:	e002      	b.n	8007300 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fe28 	bl	8006f50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	e002      	b.n	8007310 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	e000      	b.n	8007310 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800730e:	2302      	movs	r3, #2
  }
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	b09f      	sub	sp, #124	; 0x7c
 800731e:	af00      	add	r7, sp, #0
 8007320:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800732c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732e:	68d9      	ldr	r1, [r3, #12]
 8007330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	ea40 0301 	orr.w	r3, r0, r1
 8007338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800733a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	431a      	orrs	r2, r3
 8007344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	431a      	orrs	r2, r3
 800734a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	4313      	orrs	r3, r2
 8007350:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800735c:	f021 010c 	bic.w	r1, r1, #12
 8007360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007366:	430b      	orrs	r3, r1
 8007368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800736a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007376:	6999      	ldr	r1, [r3, #24]
 8007378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	ea40 0301 	orr.w	r3, r0, r1
 8007380:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4bc5      	ldr	r3, [pc, #788]	; (800769c <UART_SetConfig+0x384>)
 8007388:	429a      	cmp	r2, r3
 800738a:	d004      	beq.n	8007396 <UART_SetConfig+0x7e>
 800738c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4bc3      	ldr	r3, [pc, #780]	; (80076a0 <UART_SetConfig+0x388>)
 8007392:	429a      	cmp	r2, r3
 8007394:	d103      	bne.n	800739e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007396:	f7fe fac1 	bl	800591c <HAL_RCC_GetPCLK2Freq>
 800739a:	6778      	str	r0, [r7, #116]	; 0x74
 800739c:	e002      	b.n	80073a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800739e:	f7fe faa9 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 80073a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ac:	f040 80b6 	bne.w	800751c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b2:	461c      	mov	r4, r3
 80073b4:	f04f 0500 	mov.w	r5, #0
 80073b8:	4622      	mov	r2, r4
 80073ba:	462b      	mov	r3, r5
 80073bc:	1891      	adds	r1, r2, r2
 80073be:	6439      	str	r1, [r7, #64]	; 0x40
 80073c0:	415b      	adcs	r3, r3
 80073c2:	647b      	str	r3, [r7, #68]	; 0x44
 80073c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073c8:	1912      	adds	r2, r2, r4
 80073ca:	eb45 0303 	adc.w	r3, r5, r3
 80073ce:	f04f 0000 	mov.w	r0, #0
 80073d2:	f04f 0100 	mov.w	r1, #0
 80073d6:	00d9      	lsls	r1, r3, #3
 80073d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073dc:	00d0      	lsls	r0, r2, #3
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	1911      	adds	r1, r2, r4
 80073e4:	6639      	str	r1, [r7, #96]	; 0x60
 80073e6:	416b      	adcs	r3, r5
 80073e8:	667b      	str	r3, [r7, #100]	; 0x64
 80073ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	461a      	mov	r2, r3
 80073f0:	f04f 0300 	mov.w	r3, #0
 80073f4:	1891      	adds	r1, r2, r2
 80073f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80073f8:	415b      	adcs	r3, r3
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007400:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007404:	f7f9 fc12 	bl	8000c2c <__aeabi_uldivmod>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4ba5      	ldr	r3, [pc, #660]	; (80076a4 <UART_SetConfig+0x38c>)
 800740e:	fba3 2302 	umull	r2, r3, r3, r2
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	011e      	lsls	r6, r3, #4
 8007416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007418:	461c      	mov	r4, r3
 800741a:	f04f 0500 	mov.w	r5, #0
 800741e:	4622      	mov	r2, r4
 8007420:	462b      	mov	r3, r5
 8007422:	1891      	adds	r1, r2, r2
 8007424:	6339      	str	r1, [r7, #48]	; 0x30
 8007426:	415b      	adcs	r3, r3
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
 800742a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800742e:	1912      	adds	r2, r2, r4
 8007430:	eb45 0303 	adc.w	r3, r5, r3
 8007434:	f04f 0000 	mov.w	r0, #0
 8007438:	f04f 0100 	mov.w	r1, #0
 800743c:	00d9      	lsls	r1, r3, #3
 800743e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007442:	00d0      	lsls	r0, r2, #3
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	1911      	adds	r1, r2, r4
 800744a:	65b9      	str	r1, [r7, #88]	; 0x58
 800744c:	416b      	adcs	r3, r5
 800744e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	461a      	mov	r2, r3
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	1891      	adds	r1, r2, r2
 800745c:	62b9      	str	r1, [r7, #40]	; 0x28
 800745e:	415b      	adcs	r3, r3
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007466:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800746a:	f7f9 fbdf 	bl	8000c2c <__aeabi_uldivmod>
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
 8007472:	4b8c      	ldr	r3, [pc, #560]	; (80076a4 <UART_SetConfig+0x38c>)
 8007474:	fba3 1302 	umull	r1, r3, r3, r2
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	2164      	movs	r1, #100	; 0x64
 800747c:	fb01 f303 	mul.w	r3, r1, r3
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	3332      	adds	r3, #50	; 0x32
 8007486:	4a87      	ldr	r2, [pc, #540]	; (80076a4 <UART_SetConfig+0x38c>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	095b      	lsrs	r3, r3, #5
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007494:	441e      	add	r6, r3
 8007496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007498:	4618      	mov	r0, r3
 800749a:	f04f 0100 	mov.w	r1, #0
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	1894      	adds	r4, r2, r2
 80074a4:	623c      	str	r4, [r7, #32]
 80074a6:	415b      	adcs	r3, r3
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
 80074aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074ae:	1812      	adds	r2, r2, r0
 80074b0:	eb41 0303 	adc.w	r3, r1, r3
 80074b4:	f04f 0400 	mov.w	r4, #0
 80074b8:	f04f 0500 	mov.w	r5, #0
 80074bc:	00dd      	lsls	r5, r3, #3
 80074be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074c2:	00d4      	lsls	r4, r2, #3
 80074c4:	4622      	mov	r2, r4
 80074c6:	462b      	mov	r3, r5
 80074c8:	1814      	adds	r4, r2, r0
 80074ca:	653c      	str	r4, [r7, #80]	; 0x50
 80074cc:	414b      	adcs	r3, r1
 80074ce:	657b      	str	r3, [r7, #84]	; 0x54
 80074d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	461a      	mov	r2, r3
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	1891      	adds	r1, r2, r2
 80074dc:	61b9      	str	r1, [r7, #24]
 80074de:	415b      	adcs	r3, r3
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074ea:	f7f9 fb9f 	bl	8000c2c <__aeabi_uldivmod>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4b6c      	ldr	r3, [pc, #432]	; (80076a4 <UART_SetConfig+0x38c>)
 80074f4:	fba3 1302 	umull	r1, r3, r3, r2
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	2164      	movs	r1, #100	; 0x64
 80074fc:	fb01 f303 	mul.w	r3, r1, r3
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	3332      	adds	r3, #50	; 0x32
 8007506:	4a67      	ldr	r2, [pc, #412]	; (80076a4 <UART_SetConfig+0x38c>)
 8007508:	fba2 2303 	umull	r2, r3, r2, r3
 800750c:	095b      	lsrs	r3, r3, #5
 800750e:	f003 0207 	and.w	r2, r3, #7
 8007512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4432      	add	r2, r6
 8007518:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800751a:	e0b9      	b.n	8007690 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800751c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800751e:	461c      	mov	r4, r3
 8007520:	f04f 0500 	mov.w	r5, #0
 8007524:	4622      	mov	r2, r4
 8007526:	462b      	mov	r3, r5
 8007528:	1891      	adds	r1, r2, r2
 800752a:	6139      	str	r1, [r7, #16]
 800752c:	415b      	adcs	r3, r3
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007534:	1912      	adds	r2, r2, r4
 8007536:	eb45 0303 	adc.w	r3, r5, r3
 800753a:	f04f 0000 	mov.w	r0, #0
 800753e:	f04f 0100 	mov.w	r1, #0
 8007542:	00d9      	lsls	r1, r3, #3
 8007544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007548:	00d0      	lsls	r0, r2, #3
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	eb12 0804 	adds.w	r8, r2, r4
 8007552:	eb43 0905 	adc.w	r9, r3, r5
 8007556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	4618      	mov	r0, r3
 800755c:	f04f 0100 	mov.w	r1, #0
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	008b      	lsls	r3, r1, #2
 800756a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800756e:	0082      	lsls	r2, r0, #2
 8007570:	4640      	mov	r0, r8
 8007572:	4649      	mov	r1, r9
 8007574:	f7f9 fb5a 	bl	8000c2c <__aeabi_uldivmod>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4b49      	ldr	r3, [pc, #292]	; (80076a4 <UART_SetConfig+0x38c>)
 800757e:	fba3 2302 	umull	r2, r3, r3, r2
 8007582:	095b      	lsrs	r3, r3, #5
 8007584:	011e      	lsls	r6, r3, #4
 8007586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007588:	4618      	mov	r0, r3
 800758a:	f04f 0100 	mov.w	r1, #0
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	1894      	adds	r4, r2, r2
 8007594:	60bc      	str	r4, [r7, #8]
 8007596:	415b      	adcs	r3, r3
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800759e:	1812      	adds	r2, r2, r0
 80075a0:	eb41 0303 	adc.w	r3, r1, r3
 80075a4:	f04f 0400 	mov.w	r4, #0
 80075a8:	f04f 0500 	mov.w	r5, #0
 80075ac:	00dd      	lsls	r5, r3, #3
 80075ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075b2:	00d4      	lsls	r4, r2, #3
 80075b4:	4622      	mov	r2, r4
 80075b6:	462b      	mov	r3, r5
 80075b8:	1814      	adds	r4, r2, r0
 80075ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80075bc:	414b      	adcs	r3, r1
 80075be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f04f 0100 	mov.w	r1, #0
 80075ca:	f04f 0200 	mov.w	r2, #0
 80075ce:	f04f 0300 	mov.w	r3, #0
 80075d2:	008b      	lsls	r3, r1, #2
 80075d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075d8:	0082      	lsls	r2, r0, #2
 80075da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80075de:	f7f9 fb25 	bl	8000c2c <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4b2f      	ldr	r3, [pc, #188]	; (80076a4 <UART_SetConfig+0x38c>)
 80075e8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	2164      	movs	r1, #100	; 0x64
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	3332      	adds	r3, #50	; 0x32
 80075fa:	4a2a      	ldr	r2, [pc, #168]	; (80076a4 <UART_SetConfig+0x38c>)
 80075fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007606:	441e      	add	r6, r3
 8007608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800760a:	4618      	mov	r0, r3
 800760c:	f04f 0100 	mov.w	r1, #0
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	1894      	adds	r4, r2, r2
 8007616:	603c      	str	r4, [r7, #0]
 8007618:	415b      	adcs	r3, r3
 800761a:	607b      	str	r3, [r7, #4]
 800761c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007620:	1812      	adds	r2, r2, r0
 8007622:	eb41 0303 	adc.w	r3, r1, r3
 8007626:	f04f 0400 	mov.w	r4, #0
 800762a:	f04f 0500 	mov.w	r5, #0
 800762e:	00dd      	lsls	r5, r3, #3
 8007630:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007634:	00d4      	lsls	r4, r2, #3
 8007636:	4622      	mov	r2, r4
 8007638:	462b      	mov	r3, r5
 800763a:	eb12 0a00 	adds.w	sl, r2, r0
 800763e:	eb43 0b01 	adc.w	fp, r3, r1
 8007642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	4618      	mov	r0, r3
 8007648:	f04f 0100 	mov.w	r1, #0
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	008b      	lsls	r3, r1, #2
 8007656:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800765a:	0082      	lsls	r2, r0, #2
 800765c:	4650      	mov	r0, sl
 800765e:	4659      	mov	r1, fp
 8007660:	f7f9 fae4 	bl	8000c2c <__aeabi_uldivmod>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <UART_SetConfig+0x38c>)
 800766a:	fba3 1302 	umull	r1, r3, r3, r2
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	2164      	movs	r1, #100	; 0x64
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	3332      	adds	r3, #50	; 0x32
 800767c:	4a09      	ldr	r2, [pc, #36]	; (80076a4 <UART_SetConfig+0x38c>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4432      	add	r2, r6
 800768e:	609a      	str	r2, [r3, #8]
}
 8007690:	bf00      	nop
 8007692:	377c      	adds	r7, #124	; 0x7c
 8007694:	46bd      	mov	sp, r7
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769a:	bf00      	nop
 800769c:	40011000 	.word	0x40011000
 80076a0:	40011400 	.word	0x40011400
 80076a4:	51eb851f 	.word	0x51eb851f

080076a8 <__errno>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <__errno+0x8>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	20000020 	.word	0x20000020

080076b4 <__libc_init_array>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4d0d      	ldr	r5, [pc, #52]	; (80076ec <__libc_init_array+0x38>)
 80076b8:	4c0d      	ldr	r4, [pc, #52]	; (80076f0 <__libc_init_array+0x3c>)
 80076ba:	1b64      	subs	r4, r4, r5
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	2600      	movs	r6, #0
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	d109      	bne.n	80076d8 <__libc_init_array+0x24>
 80076c4:	4d0b      	ldr	r5, [pc, #44]	; (80076f4 <__libc_init_array+0x40>)
 80076c6:	4c0c      	ldr	r4, [pc, #48]	; (80076f8 <__libc_init_array+0x44>)
 80076c8:	f001 fc84 	bl	8008fd4 <_init>
 80076cc:	1b64      	subs	r4, r4, r5
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	2600      	movs	r6, #0
 80076d2:	42a6      	cmp	r6, r4
 80076d4:	d105      	bne.n	80076e2 <__libc_init_array+0x2e>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076dc:	4798      	blx	r3
 80076de:	3601      	adds	r6, #1
 80076e0:	e7ee      	b.n	80076c0 <__libc_init_array+0xc>
 80076e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e6:	4798      	blx	r3
 80076e8:	3601      	adds	r6, #1
 80076ea:	e7f2      	b.n	80076d2 <__libc_init_array+0x1e>
 80076ec:	08009650 	.word	0x08009650
 80076f0:	08009650 	.word	0x08009650
 80076f4:	08009650 	.word	0x08009650
 80076f8:	08009654 	.word	0x08009654

080076fc <memset>:
 80076fc:	4402      	add	r2, r0
 80076fe:	4603      	mov	r3, r0
 8007700:	4293      	cmp	r3, r2
 8007702:	d100      	bne.n	8007706 <memset+0xa>
 8007704:	4770      	bx	lr
 8007706:	f803 1b01 	strb.w	r1, [r3], #1
 800770a:	e7f9      	b.n	8007700 <memset+0x4>

0800770c <siprintf>:
 800770c:	b40e      	push	{r1, r2, r3}
 800770e:	b500      	push	{lr}
 8007710:	b09c      	sub	sp, #112	; 0x70
 8007712:	ab1d      	add	r3, sp, #116	; 0x74
 8007714:	9002      	str	r0, [sp, #8]
 8007716:	9006      	str	r0, [sp, #24]
 8007718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800771c:	4809      	ldr	r0, [pc, #36]	; (8007744 <siprintf+0x38>)
 800771e:	9107      	str	r1, [sp, #28]
 8007720:	9104      	str	r1, [sp, #16]
 8007722:	4909      	ldr	r1, [pc, #36]	; (8007748 <siprintf+0x3c>)
 8007724:	f853 2b04 	ldr.w	r2, [r3], #4
 8007728:	9105      	str	r1, [sp, #20]
 800772a:	6800      	ldr	r0, [r0, #0]
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	a902      	add	r1, sp, #8
 8007730:	f000 f868 	bl	8007804 <_svfiprintf_r>
 8007734:	9b02      	ldr	r3, [sp, #8]
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
 800773a:	b01c      	add	sp, #112	; 0x70
 800773c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007740:	b003      	add	sp, #12
 8007742:	4770      	bx	lr
 8007744:	20000020 	.word	0x20000020
 8007748:	ffff0208 	.word	0xffff0208

0800774c <__ssputs_r>:
 800774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	688e      	ldr	r6, [r1, #8]
 8007752:	429e      	cmp	r6, r3
 8007754:	4682      	mov	sl, r0
 8007756:	460c      	mov	r4, r1
 8007758:	4690      	mov	r8, r2
 800775a:	461f      	mov	r7, r3
 800775c:	d838      	bhi.n	80077d0 <__ssputs_r+0x84>
 800775e:	898a      	ldrh	r2, [r1, #12]
 8007760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007764:	d032      	beq.n	80077cc <__ssputs_r+0x80>
 8007766:	6825      	ldr	r5, [r4, #0]
 8007768:	6909      	ldr	r1, [r1, #16]
 800776a:	eba5 0901 	sub.w	r9, r5, r1
 800776e:	6965      	ldr	r5, [r4, #20]
 8007770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007778:	3301      	adds	r3, #1
 800777a:	444b      	add	r3, r9
 800777c:	106d      	asrs	r5, r5, #1
 800777e:	429d      	cmp	r5, r3
 8007780:	bf38      	it	cc
 8007782:	461d      	movcc	r5, r3
 8007784:	0553      	lsls	r3, r2, #21
 8007786:	d531      	bpl.n	80077ec <__ssputs_r+0xa0>
 8007788:	4629      	mov	r1, r5
 800778a:	f000 fb47 	bl	8007e1c <_malloc_r>
 800778e:	4606      	mov	r6, r0
 8007790:	b950      	cbnz	r0, 80077a8 <__ssputs_r+0x5c>
 8007792:	230c      	movs	r3, #12
 8007794:	f8ca 3000 	str.w	r3, [sl]
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295
 80077a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a8:	6921      	ldr	r1, [r4, #16]
 80077aa:	464a      	mov	r2, r9
 80077ac:	f000 fabe 	bl	8007d2c <memcpy>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	6126      	str	r6, [r4, #16]
 80077be:	6165      	str	r5, [r4, #20]
 80077c0:	444e      	add	r6, r9
 80077c2:	eba5 0509 	sub.w	r5, r5, r9
 80077c6:	6026      	str	r6, [r4, #0]
 80077c8:	60a5      	str	r5, [r4, #8]
 80077ca:	463e      	mov	r6, r7
 80077cc:	42be      	cmp	r6, r7
 80077ce:	d900      	bls.n	80077d2 <__ssputs_r+0x86>
 80077d0:	463e      	mov	r6, r7
 80077d2:	4632      	mov	r2, r6
 80077d4:	6820      	ldr	r0, [r4, #0]
 80077d6:	4641      	mov	r1, r8
 80077d8:	f000 fab6 	bl	8007d48 <memmove>
 80077dc:	68a3      	ldr	r3, [r4, #8]
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	1b9b      	subs	r3, r3, r6
 80077e2:	4432      	add	r2, r6
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	6022      	str	r2, [r4, #0]
 80077e8:	2000      	movs	r0, #0
 80077ea:	e7db      	b.n	80077a4 <__ssputs_r+0x58>
 80077ec:	462a      	mov	r2, r5
 80077ee:	f000 fb6f 	bl	8007ed0 <_realloc_r>
 80077f2:	4606      	mov	r6, r0
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d1e1      	bne.n	80077bc <__ssputs_r+0x70>
 80077f8:	6921      	ldr	r1, [r4, #16]
 80077fa:	4650      	mov	r0, sl
 80077fc:	f000 fabe 	bl	8007d7c <_free_r>
 8007800:	e7c7      	b.n	8007792 <__ssputs_r+0x46>
	...

08007804 <_svfiprintf_r>:
 8007804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	4698      	mov	r8, r3
 800780a:	898b      	ldrh	r3, [r1, #12]
 800780c:	061b      	lsls	r3, r3, #24
 800780e:	b09d      	sub	sp, #116	; 0x74
 8007810:	4607      	mov	r7, r0
 8007812:	460d      	mov	r5, r1
 8007814:	4614      	mov	r4, r2
 8007816:	d50e      	bpl.n	8007836 <_svfiprintf_r+0x32>
 8007818:	690b      	ldr	r3, [r1, #16]
 800781a:	b963      	cbnz	r3, 8007836 <_svfiprintf_r+0x32>
 800781c:	2140      	movs	r1, #64	; 0x40
 800781e:	f000 fafd 	bl	8007e1c <_malloc_r>
 8007822:	6028      	str	r0, [r5, #0]
 8007824:	6128      	str	r0, [r5, #16]
 8007826:	b920      	cbnz	r0, 8007832 <_svfiprintf_r+0x2e>
 8007828:	230c      	movs	r3, #12
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	f04f 30ff 	mov.w	r0, #4294967295
 8007830:	e0d1      	b.n	80079d6 <_svfiprintf_r+0x1d2>
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	616b      	str	r3, [r5, #20]
 8007836:	2300      	movs	r3, #0
 8007838:	9309      	str	r3, [sp, #36]	; 0x24
 800783a:	2320      	movs	r3, #32
 800783c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007840:	f8cd 800c 	str.w	r8, [sp, #12]
 8007844:	2330      	movs	r3, #48	; 0x30
 8007846:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80079f0 <_svfiprintf_r+0x1ec>
 800784a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800784e:	f04f 0901 	mov.w	r9, #1
 8007852:	4623      	mov	r3, r4
 8007854:	469a      	mov	sl, r3
 8007856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800785a:	b10a      	cbz	r2, 8007860 <_svfiprintf_r+0x5c>
 800785c:	2a25      	cmp	r2, #37	; 0x25
 800785e:	d1f9      	bne.n	8007854 <_svfiprintf_r+0x50>
 8007860:	ebba 0b04 	subs.w	fp, sl, r4
 8007864:	d00b      	beq.n	800787e <_svfiprintf_r+0x7a>
 8007866:	465b      	mov	r3, fp
 8007868:	4622      	mov	r2, r4
 800786a:	4629      	mov	r1, r5
 800786c:	4638      	mov	r0, r7
 800786e:	f7ff ff6d 	bl	800774c <__ssputs_r>
 8007872:	3001      	adds	r0, #1
 8007874:	f000 80aa 	beq.w	80079cc <_svfiprintf_r+0x1c8>
 8007878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800787a:	445a      	add	r2, fp
 800787c:	9209      	str	r2, [sp, #36]	; 0x24
 800787e:	f89a 3000 	ldrb.w	r3, [sl]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80a2 	beq.w	80079cc <_svfiprintf_r+0x1c8>
 8007888:	2300      	movs	r3, #0
 800788a:	f04f 32ff 	mov.w	r2, #4294967295
 800788e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007892:	f10a 0a01 	add.w	sl, sl, #1
 8007896:	9304      	str	r3, [sp, #16]
 8007898:	9307      	str	r3, [sp, #28]
 800789a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800789e:	931a      	str	r3, [sp, #104]	; 0x68
 80078a0:	4654      	mov	r4, sl
 80078a2:	2205      	movs	r2, #5
 80078a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a8:	4851      	ldr	r0, [pc, #324]	; (80079f0 <_svfiprintf_r+0x1ec>)
 80078aa:	f7f8 fca1 	bl	80001f0 <memchr>
 80078ae:	9a04      	ldr	r2, [sp, #16]
 80078b0:	b9d8      	cbnz	r0, 80078ea <_svfiprintf_r+0xe6>
 80078b2:	06d0      	lsls	r0, r2, #27
 80078b4:	bf44      	itt	mi
 80078b6:	2320      	movmi	r3, #32
 80078b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078bc:	0711      	lsls	r1, r2, #28
 80078be:	bf44      	itt	mi
 80078c0:	232b      	movmi	r3, #43	; 0x2b
 80078c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ca:	2b2a      	cmp	r3, #42	; 0x2a
 80078cc:	d015      	beq.n	80078fa <_svfiprintf_r+0xf6>
 80078ce:	9a07      	ldr	r2, [sp, #28]
 80078d0:	4654      	mov	r4, sl
 80078d2:	2000      	movs	r0, #0
 80078d4:	f04f 0c0a 	mov.w	ip, #10
 80078d8:	4621      	mov	r1, r4
 80078da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078de:	3b30      	subs	r3, #48	; 0x30
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	d94e      	bls.n	8007982 <_svfiprintf_r+0x17e>
 80078e4:	b1b0      	cbz	r0, 8007914 <_svfiprintf_r+0x110>
 80078e6:	9207      	str	r2, [sp, #28]
 80078e8:	e014      	b.n	8007914 <_svfiprintf_r+0x110>
 80078ea:	eba0 0308 	sub.w	r3, r0, r8
 80078ee:	fa09 f303 	lsl.w	r3, r9, r3
 80078f2:	4313      	orrs	r3, r2
 80078f4:	9304      	str	r3, [sp, #16]
 80078f6:	46a2      	mov	sl, r4
 80078f8:	e7d2      	b.n	80078a0 <_svfiprintf_r+0x9c>
 80078fa:	9b03      	ldr	r3, [sp, #12]
 80078fc:	1d19      	adds	r1, r3, #4
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	9103      	str	r1, [sp, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfbb      	ittet	lt
 8007906:	425b      	neglt	r3, r3
 8007908:	f042 0202 	orrlt.w	r2, r2, #2
 800790c:	9307      	strge	r3, [sp, #28]
 800790e:	9307      	strlt	r3, [sp, #28]
 8007910:	bfb8      	it	lt
 8007912:	9204      	strlt	r2, [sp, #16]
 8007914:	7823      	ldrb	r3, [r4, #0]
 8007916:	2b2e      	cmp	r3, #46	; 0x2e
 8007918:	d10c      	bne.n	8007934 <_svfiprintf_r+0x130>
 800791a:	7863      	ldrb	r3, [r4, #1]
 800791c:	2b2a      	cmp	r3, #42	; 0x2a
 800791e:	d135      	bne.n	800798c <_svfiprintf_r+0x188>
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	1d1a      	adds	r2, r3, #4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	9203      	str	r2, [sp, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	bfb8      	it	lt
 800792c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007930:	3402      	adds	r4, #2
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a00 <_svfiprintf_r+0x1fc>
 8007938:	7821      	ldrb	r1, [r4, #0]
 800793a:	2203      	movs	r2, #3
 800793c:	4650      	mov	r0, sl
 800793e:	f7f8 fc57 	bl	80001f0 <memchr>
 8007942:	b140      	cbz	r0, 8007956 <_svfiprintf_r+0x152>
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	eba0 000a 	sub.w	r0, r0, sl
 800794a:	fa03 f000 	lsl.w	r0, r3, r0
 800794e:	9b04      	ldr	r3, [sp, #16]
 8007950:	4303      	orrs	r3, r0
 8007952:	3401      	adds	r4, #1
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795a:	4826      	ldr	r0, [pc, #152]	; (80079f4 <_svfiprintf_r+0x1f0>)
 800795c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007960:	2206      	movs	r2, #6
 8007962:	f7f8 fc45 	bl	80001f0 <memchr>
 8007966:	2800      	cmp	r0, #0
 8007968:	d038      	beq.n	80079dc <_svfiprintf_r+0x1d8>
 800796a:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <_svfiprintf_r+0x1f4>)
 800796c:	bb1b      	cbnz	r3, 80079b6 <_svfiprintf_r+0x1b2>
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	3307      	adds	r3, #7
 8007972:	f023 0307 	bic.w	r3, r3, #7
 8007976:	3308      	adds	r3, #8
 8007978:	9303      	str	r3, [sp, #12]
 800797a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800797c:	4433      	add	r3, r6
 800797e:	9309      	str	r3, [sp, #36]	; 0x24
 8007980:	e767      	b.n	8007852 <_svfiprintf_r+0x4e>
 8007982:	fb0c 3202 	mla	r2, ip, r2, r3
 8007986:	460c      	mov	r4, r1
 8007988:	2001      	movs	r0, #1
 800798a:	e7a5      	b.n	80078d8 <_svfiprintf_r+0xd4>
 800798c:	2300      	movs	r3, #0
 800798e:	3401      	adds	r4, #1
 8007990:	9305      	str	r3, [sp, #20]
 8007992:	4619      	mov	r1, r3
 8007994:	f04f 0c0a 	mov.w	ip, #10
 8007998:	4620      	mov	r0, r4
 800799a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800799e:	3a30      	subs	r2, #48	; 0x30
 80079a0:	2a09      	cmp	r2, #9
 80079a2:	d903      	bls.n	80079ac <_svfiprintf_r+0x1a8>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0c5      	beq.n	8007934 <_svfiprintf_r+0x130>
 80079a8:	9105      	str	r1, [sp, #20]
 80079aa:	e7c3      	b.n	8007934 <_svfiprintf_r+0x130>
 80079ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b0:	4604      	mov	r4, r0
 80079b2:	2301      	movs	r3, #1
 80079b4:	e7f0      	b.n	8007998 <_svfiprintf_r+0x194>
 80079b6:	ab03      	add	r3, sp, #12
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	462a      	mov	r2, r5
 80079bc:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <_svfiprintf_r+0x1f8>)
 80079be:	a904      	add	r1, sp, #16
 80079c0:	4638      	mov	r0, r7
 80079c2:	f3af 8000 	nop.w
 80079c6:	1c42      	adds	r2, r0, #1
 80079c8:	4606      	mov	r6, r0
 80079ca:	d1d6      	bne.n	800797a <_svfiprintf_r+0x176>
 80079cc:	89ab      	ldrh	r3, [r5, #12]
 80079ce:	065b      	lsls	r3, r3, #25
 80079d0:	f53f af2c 	bmi.w	800782c <_svfiprintf_r+0x28>
 80079d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079d6:	b01d      	add	sp, #116	; 0x74
 80079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	ab03      	add	r3, sp, #12
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	462a      	mov	r2, r5
 80079e2:	4b06      	ldr	r3, [pc, #24]	; (80079fc <_svfiprintf_r+0x1f8>)
 80079e4:	a904      	add	r1, sp, #16
 80079e6:	4638      	mov	r0, r7
 80079e8:	f000 f87a 	bl	8007ae0 <_printf_i>
 80079ec:	e7eb      	b.n	80079c6 <_svfiprintf_r+0x1c2>
 80079ee:	bf00      	nop
 80079f0:	0800943c 	.word	0x0800943c
 80079f4:	08009446 	.word	0x08009446
 80079f8:	00000000 	.word	0x00000000
 80079fc:	0800774d 	.word	0x0800774d
 8007a00:	08009442 	.word	0x08009442

08007a04 <_printf_common>:
 8007a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a08:	4616      	mov	r6, r2
 8007a0a:	4699      	mov	r9, r3
 8007a0c:	688a      	ldr	r2, [r1, #8]
 8007a0e:	690b      	ldr	r3, [r1, #16]
 8007a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	bfb8      	it	lt
 8007a18:	4613      	movlt	r3, r2
 8007a1a:	6033      	str	r3, [r6, #0]
 8007a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a20:	4607      	mov	r7, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	b10a      	cbz	r2, 8007a2a <_printf_common+0x26>
 8007a26:	3301      	adds	r3, #1
 8007a28:	6033      	str	r3, [r6, #0]
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	0699      	lsls	r1, r3, #26
 8007a2e:	bf42      	ittt	mi
 8007a30:	6833      	ldrmi	r3, [r6, #0]
 8007a32:	3302      	addmi	r3, #2
 8007a34:	6033      	strmi	r3, [r6, #0]
 8007a36:	6825      	ldr	r5, [r4, #0]
 8007a38:	f015 0506 	ands.w	r5, r5, #6
 8007a3c:	d106      	bne.n	8007a4c <_printf_common+0x48>
 8007a3e:	f104 0a19 	add.w	sl, r4, #25
 8007a42:	68e3      	ldr	r3, [r4, #12]
 8007a44:	6832      	ldr	r2, [r6, #0]
 8007a46:	1a9b      	subs	r3, r3, r2
 8007a48:	42ab      	cmp	r3, r5
 8007a4a:	dc26      	bgt.n	8007a9a <_printf_common+0x96>
 8007a4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a50:	1e13      	subs	r3, r2, #0
 8007a52:	6822      	ldr	r2, [r4, #0]
 8007a54:	bf18      	it	ne
 8007a56:	2301      	movne	r3, #1
 8007a58:	0692      	lsls	r2, r2, #26
 8007a5a:	d42b      	bmi.n	8007ab4 <_printf_common+0xb0>
 8007a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a60:	4649      	mov	r1, r9
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c0      	blx	r8
 8007a66:	3001      	adds	r0, #1
 8007a68:	d01e      	beq.n	8007aa8 <_printf_common+0xa4>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	68e5      	ldr	r5, [r4, #12]
 8007a6e:	6832      	ldr	r2, [r6, #0]
 8007a70:	f003 0306 	and.w	r3, r3, #6
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	bf08      	it	eq
 8007a78:	1aad      	subeq	r5, r5, r2
 8007a7a:	68a3      	ldr	r3, [r4, #8]
 8007a7c:	6922      	ldr	r2, [r4, #16]
 8007a7e:	bf0c      	ite	eq
 8007a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a84:	2500      	movne	r5, #0
 8007a86:	4293      	cmp	r3, r2
 8007a88:	bfc4      	itt	gt
 8007a8a:	1a9b      	subgt	r3, r3, r2
 8007a8c:	18ed      	addgt	r5, r5, r3
 8007a8e:	2600      	movs	r6, #0
 8007a90:	341a      	adds	r4, #26
 8007a92:	42b5      	cmp	r5, r6
 8007a94:	d11a      	bne.n	8007acc <_printf_common+0xc8>
 8007a96:	2000      	movs	r0, #0
 8007a98:	e008      	b.n	8007aac <_printf_common+0xa8>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4652      	mov	r2, sl
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	47c0      	blx	r8
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d103      	bne.n	8007ab0 <_printf_common+0xac>
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab0:	3501      	adds	r5, #1
 8007ab2:	e7c6      	b.n	8007a42 <_printf_common+0x3e>
 8007ab4:	18e1      	adds	r1, r4, r3
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	2030      	movs	r0, #48	; 0x30
 8007aba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007abe:	4422      	add	r2, r4
 8007ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ac8:	3302      	adds	r3, #2
 8007aca:	e7c7      	b.n	8007a5c <_printf_common+0x58>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4622      	mov	r2, r4
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	47c0      	blx	r8
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d0e6      	beq.n	8007aa8 <_printf_common+0xa4>
 8007ada:	3601      	adds	r6, #1
 8007adc:	e7d9      	b.n	8007a92 <_printf_common+0x8e>
	...

08007ae0 <_printf_i>:
 8007ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	4691      	mov	r9, r2
 8007ae8:	7e27      	ldrb	r7, [r4, #24]
 8007aea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007aec:	2f78      	cmp	r7, #120	; 0x78
 8007aee:	4680      	mov	r8, r0
 8007af0:	469a      	mov	sl, r3
 8007af2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007af6:	d807      	bhi.n	8007b08 <_printf_i+0x28>
 8007af8:	2f62      	cmp	r7, #98	; 0x62
 8007afa:	d80a      	bhi.n	8007b12 <_printf_i+0x32>
 8007afc:	2f00      	cmp	r7, #0
 8007afe:	f000 80d8 	beq.w	8007cb2 <_printf_i+0x1d2>
 8007b02:	2f58      	cmp	r7, #88	; 0x58
 8007b04:	f000 80a3 	beq.w	8007c4e <_printf_i+0x16e>
 8007b08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b10:	e03a      	b.n	8007b88 <_printf_i+0xa8>
 8007b12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b16:	2b15      	cmp	r3, #21
 8007b18:	d8f6      	bhi.n	8007b08 <_printf_i+0x28>
 8007b1a:	a001      	add	r0, pc, #4	; (adr r0, 8007b20 <_printf_i+0x40>)
 8007b1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b20:	08007b79 	.word	0x08007b79
 8007b24:	08007b8d 	.word	0x08007b8d
 8007b28:	08007b09 	.word	0x08007b09
 8007b2c:	08007b09 	.word	0x08007b09
 8007b30:	08007b09 	.word	0x08007b09
 8007b34:	08007b09 	.word	0x08007b09
 8007b38:	08007b8d 	.word	0x08007b8d
 8007b3c:	08007b09 	.word	0x08007b09
 8007b40:	08007b09 	.word	0x08007b09
 8007b44:	08007b09 	.word	0x08007b09
 8007b48:	08007b09 	.word	0x08007b09
 8007b4c:	08007c99 	.word	0x08007c99
 8007b50:	08007bbd 	.word	0x08007bbd
 8007b54:	08007c7b 	.word	0x08007c7b
 8007b58:	08007b09 	.word	0x08007b09
 8007b5c:	08007b09 	.word	0x08007b09
 8007b60:	08007cbb 	.word	0x08007cbb
 8007b64:	08007b09 	.word	0x08007b09
 8007b68:	08007bbd 	.word	0x08007bbd
 8007b6c:	08007b09 	.word	0x08007b09
 8007b70:	08007b09 	.word	0x08007b09
 8007b74:	08007c83 	.word	0x08007c83
 8007b78:	680b      	ldr	r3, [r1, #0]
 8007b7a:	1d1a      	adds	r2, r3, #4
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	600a      	str	r2, [r1, #0]
 8007b80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e0a3      	b.n	8007cd4 <_printf_i+0x1f4>
 8007b8c:	6825      	ldr	r5, [r4, #0]
 8007b8e:	6808      	ldr	r0, [r1, #0]
 8007b90:	062e      	lsls	r6, r5, #24
 8007b92:	f100 0304 	add.w	r3, r0, #4
 8007b96:	d50a      	bpl.n	8007bae <_printf_i+0xce>
 8007b98:	6805      	ldr	r5, [r0, #0]
 8007b9a:	600b      	str	r3, [r1, #0]
 8007b9c:	2d00      	cmp	r5, #0
 8007b9e:	da03      	bge.n	8007ba8 <_printf_i+0xc8>
 8007ba0:	232d      	movs	r3, #45	; 0x2d
 8007ba2:	426d      	negs	r5, r5
 8007ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ba8:	485e      	ldr	r0, [pc, #376]	; (8007d24 <_printf_i+0x244>)
 8007baa:	230a      	movs	r3, #10
 8007bac:	e019      	b.n	8007be2 <_printf_i+0x102>
 8007bae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bb2:	6805      	ldr	r5, [r0, #0]
 8007bb4:	600b      	str	r3, [r1, #0]
 8007bb6:	bf18      	it	ne
 8007bb8:	b22d      	sxthne	r5, r5
 8007bba:	e7ef      	b.n	8007b9c <_printf_i+0xbc>
 8007bbc:	680b      	ldr	r3, [r1, #0]
 8007bbe:	6825      	ldr	r5, [r4, #0]
 8007bc0:	1d18      	adds	r0, r3, #4
 8007bc2:	6008      	str	r0, [r1, #0]
 8007bc4:	0628      	lsls	r0, r5, #24
 8007bc6:	d501      	bpl.n	8007bcc <_printf_i+0xec>
 8007bc8:	681d      	ldr	r5, [r3, #0]
 8007bca:	e002      	b.n	8007bd2 <_printf_i+0xf2>
 8007bcc:	0669      	lsls	r1, r5, #25
 8007bce:	d5fb      	bpl.n	8007bc8 <_printf_i+0xe8>
 8007bd0:	881d      	ldrh	r5, [r3, #0]
 8007bd2:	4854      	ldr	r0, [pc, #336]	; (8007d24 <_printf_i+0x244>)
 8007bd4:	2f6f      	cmp	r7, #111	; 0x6f
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2308      	moveq	r3, #8
 8007bda:	230a      	movne	r3, #10
 8007bdc:	2100      	movs	r1, #0
 8007bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007be2:	6866      	ldr	r6, [r4, #4]
 8007be4:	60a6      	str	r6, [r4, #8]
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	bfa2      	ittt	ge
 8007bea:	6821      	ldrge	r1, [r4, #0]
 8007bec:	f021 0104 	bicge.w	r1, r1, #4
 8007bf0:	6021      	strge	r1, [r4, #0]
 8007bf2:	b90d      	cbnz	r5, 8007bf8 <_printf_i+0x118>
 8007bf4:	2e00      	cmp	r6, #0
 8007bf6:	d04d      	beq.n	8007c94 <_printf_i+0x1b4>
 8007bf8:	4616      	mov	r6, r2
 8007bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8007c02:	5dc7      	ldrb	r7, [r0, r7]
 8007c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c08:	462f      	mov	r7, r5
 8007c0a:	42bb      	cmp	r3, r7
 8007c0c:	460d      	mov	r5, r1
 8007c0e:	d9f4      	bls.n	8007bfa <_printf_i+0x11a>
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d10b      	bne.n	8007c2c <_printf_i+0x14c>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	07df      	lsls	r7, r3, #31
 8007c18:	d508      	bpl.n	8007c2c <_printf_i+0x14c>
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	6861      	ldr	r1, [r4, #4]
 8007c1e:	4299      	cmp	r1, r3
 8007c20:	bfde      	ittt	le
 8007c22:	2330      	movle	r3, #48	; 0x30
 8007c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c2c:	1b92      	subs	r2, r2, r6
 8007c2e:	6122      	str	r2, [r4, #16]
 8007c30:	f8cd a000 	str.w	sl, [sp]
 8007c34:	464b      	mov	r3, r9
 8007c36:	aa03      	add	r2, sp, #12
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	f7ff fee2 	bl	8007a04 <_printf_common>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d14c      	bne.n	8007cde <_printf_i+0x1fe>
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	b004      	add	sp, #16
 8007c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4e:	4835      	ldr	r0, [pc, #212]	; (8007d24 <_printf_i+0x244>)
 8007c50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	680e      	ldr	r6, [r1, #0]
 8007c58:	061f      	lsls	r7, r3, #24
 8007c5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c5e:	600e      	str	r6, [r1, #0]
 8007c60:	d514      	bpl.n	8007c8c <_printf_i+0x1ac>
 8007c62:	07d9      	lsls	r1, r3, #31
 8007c64:	bf44      	itt	mi
 8007c66:	f043 0320 	orrmi.w	r3, r3, #32
 8007c6a:	6023      	strmi	r3, [r4, #0]
 8007c6c:	b91d      	cbnz	r5, 8007c76 <_printf_i+0x196>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	f023 0320 	bic.w	r3, r3, #32
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	2310      	movs	r3, #16
 8007c78:	e7b0      	b.n	8007bdc <_printf_i+0xfc>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	f043 0320 	orr.w	r3, r3, #32
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	2378      	movs	r3, #120	; 0x78
 8007c84:	4828      	ldr	r0, [pc, #160]	; (8007d28 <_printf_i+0x248>)
 8007c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c8a:	e7e3      	b.n	8007c54 <_printf_i+0x174>
 8007c8c:	065e      	lsls	r6, r3, #25
 8007c8e:	bf48      	it	mi
 8007c90:	b2ad      	uxthmi	r5, r5
 8007c92:	e7e6      	b.n	8007c62 <_printf_i+0x182>
 8007c94:	4616      	mov	r6, r2
 8007c96:	e7bb      	b.n	8007c10 <_printf_i+0x130>
 8007c98:	680b      	ldr	r3, [r1, #0]
 8007c9a:	6826      	ldr	r6, [r4, #0]
 8007c9c:	6960      	ldr	r0, [r4, #20]
 8007c9e:	1d1d      	adds	r5, r3, #4
 8007ca0:	600d      	str	r5, [r1, #0]
 8007ca2:	0635      	lsls	r5, r6, #24
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	d501      	bpl.n	8007cac <_printf_i+0x1cc>
 8007ca8:	6018      	str	r0, [r3, #0]
 8007caa:	e002      	b.n	8007cb2 <_printf_i+0x1d2>
 8007cac:	0671      	lsls	r1, r6, #25
 8007cae:	d5fb      	bpl.n	8007ca8 <_printf_i+0x1c8>
 8007cb0:	8018      	strh	r0, [r3, #0]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6123      	str	r3, [r4, #16]
 8007cb6:	4616      	mov	r6, r2
 8007cb8:	e7ba      	b.n	8007c30 <_printf_i+0x150>
 8007cba:	680b      	ldr	r3, [r1, #0]
 8007cbc:	1d1a      	adds	r2, r3, #4
 8007cbe:	600a      	str	r2, [r1, #0]
 8007cc0:	681e      	ldr	r6, [r3, #0]
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f7f8 fa92 	bl	80001f0 <memchr>
 8007ccc:	b108      	cbz	r0, 8007cd2 <_printf_i+0x1f2>
 8007cce:	1b80      	subs	r0, r0, r6
 8007cd0:	6060      	str	r0, [r4, #4]
 8007cd2:	6863      	ldr	r3, [r4, #4]
 8007cd4:	6123      	str	r3, [r4, #16]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cdc:	e7a8      	b.n	8007c30 <_printf_i+0x150>
 8007cde:	6923      	ldr	r3, [r4, #16]
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	47d0      	blx	sl
 8007ce8:	3001      	adds	r0, #1
 8007cea:	d0ab      	beq.n	8007c44 <_printf_i+0x164>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	079b      	lsls	r3, r3, #30
 8007cf0:	d413      	bmi.n	8007d1a <_printf_i+0x23a>
 8007cf2:	68e0      	ldr	r0, [r4, #12]
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	4298      	cmp	r0, r3
 8007cf8:	bfb8      	it	lt
 8007cfa:	4618      	movlt	r0, r3
 8007cfc:	e7a4      	b.n	8007c48 <_printf_i+0x168>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4632      	mov	r2, r6
 8007d02:	4649      	mov	r1, r9
 8007d04:	4640      	mov	r0, r8
 8007d06:	47d0      	blx	sl
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d09b      	beq.n	8007c44 <_printf_i+0x164>
 8007d0c:	3501      	adds	r5, #1
 8007d0e:	68e3      	ldr	r3, [r4, #12]
 8007d10:	9903      	ldr	r1, [sp, #12]
 8007d12:	1a5b      	subs	r3, r3, r1
 8007d14:	42ab      	cmp	r3, r5
 8007d16:	dcf2      	bgt.n	8007cfe <_printf_i+0x21e>
 8007d18:	e7eb      	b.n	8007cf2 <_printf_i+0x212>
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	f104 0619 	add.w	r6, r4, #25
 8007d20:	e7f5      	b.n	8007d0e <_printf_i+0x22e>
 8007d22:	bf00      	nop
 8007d24:	0800944d 	.word	0x0800944d
 8007d28:	0800945e 	.word	0x0800945e

08007d2c <memcpy>:
 8007d2c:	440a      	add	r2, r1
 8007d2e:	4291      	cmp	r1, r2
 8007d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d34:	d100      	bne.n	8007d38 <memcpy+0xc>
 8007d36:	4770      	bx	lr
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d42:	4291      	cmp	r1, r2
 8007d44:	d1f9      	bne.n	8007d3a <memcpy+0xe>
 8007d46:	bd10      	pop	{r4, pc}

08007d48 <memmove>:
 8007d48:	4288      	cmp	r0, r1
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	eb01 0402 	add.w	r4, r1, r2
 8007d50:	d902      	bls.n	8007d58 <memmove+0x10>
 8007d52:	4284      	cmp	r4, r0
 8007d54:	4623      	mov	r3, r4
 8007d56:	d807      	bhi.n	8007d68 <memmove+0x20>
 8007d58:	1e43      	subs	r3, r0, #1
 8007d5a:	42a1      	cmp	r1, r4
 8007d5c:	d008      	beq.n	8007d70 <memmove+0x28>
 8007d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d66:	e7f8      	b.n	8007d5a <memmove+0x12>
 8007d68:	4402      	add	r2, r0
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	428a      	cmp	r2, r1
 8007d6e:	d100      	bne.n	8007d72 <memmove+0x2a>
 8007d70:	bd10      	pop	{r4, pc}
 8007d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d7a:	e7f7      	b.n	8007d6c <memmove+0x24>

08007d7c <_free_r>:
 8007d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	d048      	beq.n	8007e14 <_free_r+0x98>
 8007d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d86:	9001      	str	r0, [sp, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d8e:	bfb8      	it	lt
 8007d90:	18e4      	addlt	r4, r4, r3
 8007d92:	f000 f8d3 	bl	8007f3c <__malloc_lock>
 8007d96:	4a20      	ldr	r2, [pc, #128]	; (8007e18 <_free_r+0x9c>)
 8007d98:	9801      	ldr	r0, [sp, #4]
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	4615      	mov	r5, r2
 8007d9e:	b933      	cbnz	r3, 8007dae <_free_r+0x32>
 8007da0:	6063      	str	r3, [r4, #4]
 8007da2:	6014      	str	r4, [r2, #0]
 8007da4:	b003      	add	sp, #12
 8007da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007daa:	f000 b8cd 	b.w	8007f48 <__malloc_unlock>
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	d90b      	bls.n	8007dca <_free_r+0x4e>
 8007db2:	6821      	ldr	r1, [r4, #0]
 8007db4:	1862      	adds	r2, r4, r1
 8007db6:	4293      	cmp	r3, r2
 8007db8:	bf04      	itt	eq
 8007dba:	681a      	ldreq	r2, [r3, #0]
 8007dbc:	685b      	ldreq	r3, [r3, #4]
 8007dbe:	6063      	str	r3, [r4, #4]
 8007dc0:	bf04      	itt	eq
 8007dc2:	1852      	addeq	r2, r2, r1
 8007dc4:	6022      	streq	r2, [r4, #0]
 8007dc6:	602c      	str	r4, [r5, #0]
 8007dc8:	e7ec      	b.n	8007da4 <_free_r+0x28>
 8007dca:	461a      	mov	r2, r3
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b10b      	cbz	r3, 8007dd4 <_free_r+0x58>
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d9fa      	bls.n	8007dca <_free_r+0x4e>
 8007dd4:	6811      	ldr	r1, [r2, #0]
 8007dd6:	1855      	adds	r5, r2, r1
 8007dd8:	42a5      	cmp	r5, r4
 8007dda:	d10b      	bne.n	8007df4 <_free_r+0x78>
 8007ddc:	6824      	ldr	r4, [r4, #0]
 8007dde:	4421      	add	r1, r4
 8007de0:	1854      	adds	r4, r2, r1
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	6011      	str	r1, [r2, #0]
 8007de6:	d1dd      	bne.n	8007da4 <_free_r+0x28>
 8007de8:	681c      	ldr	r4, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	6053      	str	r3, [r2, #4]
 8007dee:	4421      	add	r1, r4
 8007df0:	6011      	str	r1, [r2, #0]
 8007df2:	e7d7      	b.n	8007da4 <_free_r+0x28>
 8007df4:	d902      	bls.n	8007dfc <_free_r+0x80>
 8007df6:	230c      	movs	r3, #12
 8007df8:	6003      	str	r3, [r0, #0]
 8007dfa:	e7d3      	b.n	8007da4 <_free_r+0x28>
 8007dfc:	6825      	ldr	r5, [r4, #0]
 8007dfe:	1961      	adds	r1, r4, r5
 8007e00:	428b      	cmp	r3, r1
 8007e02:	bf04      	itt	eq
 8007e04:	6819      	ldreq	r1, [r3, #0]
 8007e06:	685b      	ldreq	r3, [r3, #4]
 8007e08:	6063      	str	r3, [r4, #4]
 8007e0a:	bf04      	itt	eq
 8007e0c:	1949      	addeq	r1, r1, r5
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	6054      	str	r4, [r2, #4]
 8007e12:	e7c7      	b.n	8007da4 <_free_r+0x28>
 8007e14:	b003      	add	sp, #12
 8007e16:	bd30      	pop	{r4, r5, pc}
 8007e18:	20000130 	.word	0x20000130

08007e1c <_malloc_r>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	1ccd      	adds	r5, r1, #3
 8007e20:	f025 0503 	bic.w	r5, r5, #3
 8007e24:	3508      	adds	r5, #8
 8007e26:	2d0c      	cmp	r5, #12
 8007e28:	bf38      	it	cc
 8007e2a:	250c      	movcc	r5, #12
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	4606      	mov	r6, r0
 8007e30:	db01      	blt.n	8007e36 <_malloc_r+0x1a>
 8007e32:	42a9      	cmp	r1, r5
 8007e34:	d903      	bls.n	8007e3e <_malloc_r+0x22>
 8007e36:	230c      	movs	r3, #12
 8007e38:	6033      	str	r3, [r6, #0]
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e3e:	f000 f87d 	bl	8007f3c <__malloc_lock>
 8007e42:	4921      	ldr	r1, [pc, #132]	; (8007ec8 <_malloc_r+0xac>)
 8007e44:	680a      	ldr	r2, [r1, #0]
 8007e46:	4614      	mov	r4, r2
 8007e48:	b99c      	cbnz	r4, 8007e72 <_malloc_r+0x56>
 8007e4a:	4f20      	ldr	r7, [pc, #128]	; (8007ecc <_malloc_r+0xb0>)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	b923      	cbnz	r3, 8007e5a <_malloc_r+0x3e>
 8007e50:	4621      	mov	r1, r4
 8007e52:	4630      	mov	r0, r6
 8007e54:	f000 f862 	bl	8007f1c <_sbrk_r>
 8007e58:	6038      	str	r0, [r7, #0]
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f000 f85d 	bl	8007f1c <_sbrk_r>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d123      	bne.n	8007eae <_malloc_r+0x92>
 8007e66:	230c      	movs	r3, #12
 8007e68:	6033      	str	r3, [r6, #0]
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f000 f86c 	bl	8007f48 <__malloc_unlock>
 8007e70:	e7e3      	b.n	8007e3a <_malloc_r+0x1e>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	1b5b      	subs	r3, r3, r5
 8007e76:	d417      	bmi.n	8007ea8 <_malloc_r+0x8c>
 8007e78:	2b0b      	cmp	r3, #11
 8007e7a:	d903      	bls.n	8007e84 <_malloc_r+0x68>
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	441c      	add	r4, r3
 8007e80:	6025      	str	r5, [r4, #0]
 8007e82:	e004      	b.n	8007e8e <_malloc_r+0x72>
 8007e84:	6863      	ldr	r3, [r4, #4]
 8007e86:	42a2      	cmp	r2, r4
 8007e88:	bf0c      	ite	eq
 8007e8a:	600b      	streq	r3, [r1, #0]
 8007e8c:	6053      	strne	r3, [r2, #4]
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 f85a 	bl	8007f48 <__malloc_unlock>
 8007e94:	f104 000b 	add.w	r0, r4, #11
 8007e98:	1d23      	adds	r3, r4, #4
 8007e9a:	f020 0007 	bic.w	r0, r0, #7
 8007e9e:	1ac2      	subs	r2, r0, r3
 8007ea0:	d0cc      	beq.n	8007e3c <_malloc_r+0x20>
 8007ea2:	1a1b      	subs	r3, r3, r0
 8007ea4:	50a3      	str	r3, [r4, r2]
 8007ea6:	e7c9      	b.n	8007e3c <_malloc_r+0x20>
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	6864      	ldr	r4, [r4, #4]
 8007eac:	e7cc      	b.n	8007e48 <_malloc_r+0x2c>
 8007eae:	1cc4      	adds	r4, r0, #3
 8007eb0:	f024 0403 	bic.w	r4, r4, #3
 8007eb4:	42a0      	cmp	r0, r4
 8007eb6:	d0e3      	beq.n	8007e80 <_malloc_r+0x64>
 8007eb8:	1a21      	subs	r1, r4, r0
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 f82e 	bl	8007f1c <_sbrk_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d1dd      	bne.n	8007e80 <_malloc_r+0x64>
 8007ec4:	e7cf      	b.n	8007e66 <_malloc_r+0x4a>
 8007ec6:	bf00      	nop
 8007ec8:	20000130 	.word	0x20000130
 8007ecc:	20000134 	.word	0x20000134

08007ed0 <_realloc_r>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	460e      	mov	r6, r1
 8007ed8:	b921      	cbnz	r1, 8007ee4 <_realloc_r+0x14>
 8007eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ede:	4611      	mov	r1, r2
 8007ee0:	f7ff bf9c 	b.w	8007e1c <_malloc_r>
 8007ee4:	b922      	cbnz	r2, 8007ef0 <_realloc_r+0x20>
 8007ee6:	f7ff ff49 	bl	8007d7c <_free_r>
 8007eea:	4625      	mov	r5, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef0:	f000 f830 	bl	8007f54 <_malloc_usable_size_r>
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	d20f      	bcs.n	8007f18 <_realloc_r+0x48>
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4638      	mov	r0, r7
 8007efc:	f7ff ff8e 	bl	8007e1c <_malloc_r>
 8007f00:	4605      	mov	r5, r0
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0f2      	beq.n	8007eec <_realloc_r+0x1c>
 8007f06:	4631      	mov	r1, r6
 8007f08:	4622      	mov	r2, r4
 8007f0a:	f7ff ff0f 	bl	8007d2c <memcpy>
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ff33 	bl	8007d7c <_free_r>
 8007f16:	e7e9      	b.n	8007eec <_realloc_r+0x1c>
 8007f18:	4635      	mov	r5, r6
 8007f1a:	e7e7      	b.n	8007eec <_realloc_r+0x1c>

08007f1c <_sbrk_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d06      	ldr	r5, [pc, #24]	; (8007f38 <_sbrk_r+0x1c>)
 8007f20:	2300      	movs	r3, #0
 8007f22:	4604      	mov	r4, r0
 8007f24:	4608      	mov	r0, r1
 8007f26:	602b      	str	r3, [r5, #0]
 8007f28:	f7fb fcc6 	bl	80038b8 <_sbrk>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_sbrk_r+0x1a>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_sbrk_r+0x1a>
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	20000310 	.word	0x20000310

08007f3c <__malloc_lock>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	; (8007f44 <__malloc_lock+0x8>)
 8007f3e:	f000 b811 	b.w	8007f64 <__retarget_lock_acquire_recursive>
 8007f42:	bf00      	nop
 8007f44:	20000318 	.word	0x20000318

08007f48 <__malloc_unlock>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__malloc_unlock+0x8>)
 8007f4a:	f000 b80c 	b.w	8007f66 <__retarget_lock_release_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20000318 	.word	0x20000318

08007f54 <_malloc_usable_size_r>:
 8007f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f58:	1f18      	subs	r0, r3, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	bfbc      	itt	lt
 8007f5e:	580b      	ldrlt	r3, [r1, r0]
 8007f60:	18c0      	addlt	r0, r0, r3
 8007f62:	4770      	bx	lr

08007f64 <__retarget_lock_acquire_recursive>:
 8007f64:	4770      	bx	lr

08007f66 <__retarget_lock_release_recursive>:
 8007f66:	4770      	bx	lr

08007f68 <sin>:
 8007f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f6a:	ec53 2b10 	vmov	r2, r3, d0
 8007f6e:	4826      	ldr	r0, [pc, #152]	; (8008008 <sin+0xa0>)
 8007f70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f74:	4281      	cmp	r1, r0
 8007f76:	dc07      	bgt.n	8007f88 <sin+0x20>
 8007f78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008000 <sin+0x98>
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	f000 fe5b 	bl	8008c38 <__kernel_sin>
 8007f82:	ec51 0b10 	vmov	r0, r1, d0
 8007f86:	e007      	b.n	8007f98 <sin+0x30>
 8007f88:	4820      	ldr	r0, [pc, #128]	; (800800c <sin+0xa4>)
 8007f8a:	4281      	cmp	r1, r0
 8007f8c:	dd09      	ble.n	8007fa2 <sin+0x3a>
 8007f8e:	ee10 0a10 	vmov	r0, s0
 8007f92:	4619      	mov	r1, r3
 8007f94:	f7f8 f980 	bl	8000298 <__aeabi_dsub>
 8007f98:	ec41 0b10 	vmov	d0, r0, r1
 8007f9c:	b005      	add	sp, #20
 8007f9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fa2:	4668      	mov	r0, sp
 8007fa4:	f000 f834 	bl	8008010 <__ieee754_rem_pio2>
 8007fa8:	f000 0003 	and.w	r0, r0, #3
 8007fac:	2801      	cmp	r0, #1
 8007fae:	d008      	beq.n	8007fc2 <sin+0x5a>
 8007fb0:	2802      	cmp	r0, #2
 8007fb2:	d00d      	beq.n	8007fd0 <sin+0x68>
 8007fb4:	b9d0      	cbnz	r0, 8007fec <sin+0x84>
 8007fb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007fba:	ed9d 0b00 	vldr	d0, [sp]
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	e7dd      	b.n	8007f7e <sin+0x16>
 8007fc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007fc6:	ed9d 0b00 	vldr	d0, [sp]
 8007fca:	f000 fa2d 	bl	8008428 <__kernel_cos>
 8007fce:	e7d8      	b.n	8007f82 <sin+0x1a>
 8007fd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007fd4:	ed9d 0b00 	vldr	d0, [sp]
 8007fd8:	2001      	movs	r0, #1
 8007fda:	f000 fe2d 	bl	8008c38 <__kernel_sin>
 8007fde:	ec53 2b10 	vmov	r2, r3, d0
 8007fe2:	ee10 0a10 	vmov	r0, s0
 8007fe6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007fea:	e7d5      	b.n	8007f98 <sin+0x30>
 8007fec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ff0:	ed9d 0b00 	vldr	d0, [sp]
 8007ff4:	f000 fa18 	bl	8008428 <__kernel_cos>
 8007ff8:	e7f1      	b.n	8007fde <sin+0x76>
 8007ffa:	bf00      	nop
 8007ffc:	f3af 8000 	nop.w
	...
 8008008:	3fe921fb 	.word	0x3fe921fb
 800800c:	7fefffff 	.word	0x7fefffff

08008010 <__ieee754_rem_pio2>:
 8008010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	ed2d 8b02 	vpush	{d8}
 8008018:	ec55 4b10 	vmov	r4, r5, d0
 800801c:	4bca      	ldr	r3, [pc, #808]	; (8008348 <__ieee754_rem_pio2+0x338>)
 800801e:	b08b      	sub	sp, #44	; 0x2c
 8008020:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008024:	4598      	cmp	r8, r3
 8008026:	4682      	mov	sl, r0
 8008028:	9502      	str	r5, [sp, #8]
 800802a:	dc08      	bgt.n	800803e <__ieee754_rem_pio2+0x2e>
 800802c:	2200      	movs	r2, #0
 800802e:	2300      	movs	r3, #0
 8008030:	ed80 0b00 	vstr	d0, [r0]
 8008034:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008038:	f04f 0b00 	mov.w	fp, #0
 800803c:	e028      	b.n	8008090 <__ieee754_rem_pio2+0x80>
 800803e:	4bc3      	ldr	r3, [pc, #780]	; (800834c <__ieee754_rem_pio2+0x33c>)
 8008040:	4598      	cmp	r8, r3
 8008042:	dc78      	bgt.n	8008136 <__ieee754_rem_pio2+0x126>
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	4ec2      	ldr	r6, [pc, #776]	; (8008350 <__ieee754_rem_pio2+0x340>)
 8008048:	2b00      	cmp	r3, #0
 800804a:	ee10 0a10 	vmov	r0, s0
 800804e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008310 <__ieee754_rem_pio2+0x300>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	4629      	mov	r1, r5
 8008056:	dd39      	ble.n	80080cc <__ieee754_rem_pio2+0xbc>
 8008058:	f7f8 f91e 	bl	8000298 <__aeabi_dsub>
 800805c:	45b0      	cmp	r8, r6
 800805e:	4604      	mov	r4, r0
 8008060:	460d      	mov	r5, r1
 8008062:	d01b      	beq.n	800809c <__ieee754_rem_pio2+0x8c>
 8008064:	a3ac      	add	r3, pc, #688	; (adr r3, 8008318 <__ieee754_rem_pio2+0x308>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f915 	bl	8000298 <__aeabi_dsub>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	e9ca 2300 	strd	r2, r3, [sl]
 8008076:	4620      	mov	r0, r4
 8008078:	4629      	mov	r1, r5
 800807a:	f7f8 f90d 	bl	8000298 <__aeabi_dsub>
 800807e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008318 <__ieee754_rem_pio2+0x308>)
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 f908 	bl	8000298 <__aeabi_dsub>
 8008088:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800808c:	f04f 0b01 	mov.w	fp, #1
 8008090:	4658      	mov	r0, fp
 8008092:	b00b      	add	sp, #44	; 0x2c
 8008094:	ecbd 8b02 	vpop	{d8}
 8008098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008320 <__ieee754_rem_pio2+0x310>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f7f8 f8f9 	bl	8000298 <__aeabi_dsub>
 80080a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008328 <__ieee754_rem_pio2+0x318>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	4604      	mov	r4, r0
 80080ae:	460d      	mov	r5, r1
 80080b0:	f7f8 f8f2 	bl	8000298 <__aeabi_dsub>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	e9ca 2300 	strd	r2, r3, [sl]
 80080bc:	4620      	mov	r0, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	f7f8 f8ea 	bl	8000298 <__aeabi_dsub>
 80080c4:	a398      	add	r3, pc, #608	; (adr r3, 8008328 <__ieee754_rem_pio2+0x318>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	e7db      	b.n	8008084 <__ieee754_rem_pio2+0x74>
 80080cc:	f7f8 f8e6 	bl	800029c <__adddf3>
 80080d0:	45b0      	cmp	r8, r6
 80080d2:	4604      	mov	r4, r0
 80080d4:	460d      	mov	r5, r1
 80080d6:	d016      	beq.n	8008106 <__ieee754_rem_pio2+0xf6>
 80080d8:	a38f      	add	r3, pc, #572	; (adr r3, 8008318 <__ieee754_rem_pio2+0x308>)
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f7f8 f8dd 	bl	800029c <__adddf3>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	e9ca 2300 	strd	r2, r3, [sl]
 80080ea:	4620      	mov	r0, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	f7f8 f8d3 	bl	8000298 <__aeabi_dsub>
 80080f2:	a389      	add	r3, pc, #548	; (adr r3, 8008318 <__ieee754_rem_pio2+0x308>)
 80080f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f8:	f7f8 f8d0 	bl	800029c <__adddf3>
 80080fc:	f04f 3bff 	mov.w	fp, #4294967295
 8008100:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008104:	e7c4      	b.n	8008090 <__ieee754_rem_pio2+0x80>
 8008106:	a386      	add	r3, pc, #536	; (adr r3, 8008320 <__ieee754_rem_pio2+0x310>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f8c6 	bl	800029c <__adddf3>
 8008110:	a385      	add	r3, pc, #532	; (adr r3, 8008328 <__ieee754_rem_pio2+0x318>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	4604      	mov	r4, r0
 8008118:	460d      	mov	r5, r1
 800811a:	f7f8 f8bf 	bl	800029c <__adddf3>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	e9ca 2300 	strd	r2, r3, [sl]
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 f8b5 	bl	8000298 <__aeabi_dsub>
 800812e:	a37e      	add	r3, pc, #504	; (adr r3, 8008328 <__ieee754_rem_pio2+0x318>)
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	e7e0      	b.n	80080f8 <__ieee754_rem_pio2+0xe8>
 8008136:	4b87      	ldr	r3, [pc, #540]	; (8008354 <__ieee754_rem_pio2+0x344>)
 8008138:	4598      	cmp	r8, r3
 800813a:	f300 80d9 	bgt.w	80082f0 <__ieee754_rem_pio2+0x2e0>
 800813e:	f000 fe39 	bl	8008db4 <fabs>
 8008142:	ec55 4b10 	vmov	r4, r5, d0
 8008146:	ee10 0a10 	vmov	r0, s0
 800814a:	a379      	add	r3, pc, #484	; (adr r3, 8008330 <__ieee754_rem_pio2+0x320>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	4629      	mov	r1, r5
 8008152:	f7f8 fa59 	bl	8000608 <__aeabi_dmul>
 8008156:	4b80      	ldr	r3, [pc, #512]	; (8008358 <__ieee754_rem_pio2+0x348>)
 8008158:	2200      	movs	r2, #0
 800815a:	f7f8 f89f 	bl	800029c <__adddf3>
 800815e:	f7f8 fced 	bl	8000b3c <__aeabi_d2iz>
 8008162:	4683      	mov	fp, r0
 8008164:	f7f8 f9e6 	bl	8000534 <__aeabi_i2d>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	ec43 2b18 	vmov	d8, r2, r3
 8008170:	a367      	add	r3, pc, #412	; (adr r3, 8008310 <__ieee754_rem_pio2+0x300>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 fa47 	bl	8000608 <__aeabi_dmul>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 f889 	bl	8000298 <__aeabi_dsub>
 8008186:	a364      	add	r3, pc, #400	; (adr r3, 8008318 <__ieee754_rem_pio2+0x308>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	ec51 0b18 	vmov	r0, r1, d8
 8008194:	f7f8 fa38 	bl	8000608 <__aeabi_dmul>
 8008198:	f1bb 0f1f 	cmp.w	fp, #31
 800819c:	4604      	mov	r4, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	dc0d      	bgt.n	80081be <__ieee754_rem_pio2+0x1ae>
 80081a2:	4b6e      	ldr	r3, [pc, #440]	; (800835c <__ieee754_rem_pio2+0x34c>)
 80081a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80081a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ac:	4543      	cmp	r3, r8
 80081ae:	d006      	beq.n	80081be <__ieee754_rem_pio2+0x1ae>
 80081b0:	4622      	mov	r2, r4
 80081b2:	462b      	mov	r3, r5
 80081b4:	4630      	mov	r0, r6
 80081b6:	4639      	mov	r1, r7
 80081b8:	f7f8 f86e 	bl	8000298 <__aeabi_dsub>
 80081bc:	e00f      	b.n	80081de <__ieee754_rem_pio2+0x1ce>
 80081be:	462b      	mov	r3, r5
 80081c0:	4622      	mov	r2, r4
 80081c2:	4630      	mov	r0, r6
 80081c4:	4639      	mov	r1, r7
 80081c6:	f7f8 f867 	bl	8000298 <__aeabi_dsub>
 80081ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80081ce:	9303      	str	r3, [sp, #12]
 80081d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80081d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80081d8:	f1b8 0f10 	cmp.w	r8, #16
 80081dc:	dc02      	bgt.n	80081e4 <__ieee754_rem_pio2+0x1d4>
 80081de:	e9ca 0100 	strd	r0, r1, [sl]
 80081e2:	e039      	b.n	8008258 <__ieee754_rem_pio2+0x248>
 80081e4:	a34e      	add	r3, pc, #312	; (adr r3, 8008320 <__ieee754_rem_pio2+0x310>)
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	ec51 0b18 	vmov	r0, r1, d8
 80081ee:	f7f8 fa0b 	bl	8000608 <__aeabi_dmul>
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4630      	mov	r0, r6
 80081fc:	4639      	mov	r1, r7
 80081fe:	f7f8 f84b 	bl	8000298 <__aeabi_dsub>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	4680      	mov	r8, r0
 8008208:	4689      	mov	r9, r1
 800820a:	4630      	mov	r0, r6
 800820c:	4639      	mov	r1, r7
 800820e:	f7f8 f843 	bl	8000298 <__aeabi_dsub>
 8008212:	4622      	mov	r2, r4
 8008214:	462b      	mov	r3, r5
 8008216:	f7f8 f83f 	bl	8000298 <__aeabi_dsub>
 800821a:	a343      	add	r3, pc, #268	; (adr r3, 8008328 <__ieee754_rem_pio2+0x318>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	4604      	mov	r4, r0
 8008222:	460d      	mov	r5, r1
 8008224:	ec51 0b18 	vmov	r0, r1, d8
 8008228:	f7f8 f9ee 	bl	8000608 <__aeabi_dmul>
 800822c:	4622      	mov	r2, r4
 800822e:	462b      	mov	r3, r5
 8008230:	f7f8 f832 	bl	8000298 <__aeabi_dsub>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4604      	mov	r4, r0
 800823a:	460d      	mov	r5, r1
 800823c:	4640      	mov	r0, r8
 800823e:	4649      	mov	r1, r9
 8008240:	f7f8 f82a 	bl	8000298 <__aeabi_dsub>
 8008244:	9a03      	ldr	r2, [sp, #12]
 8008246:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	2b31      	cmp	r3, #49	; 0x31
 800824e:	dc24      	bgt.n	800829a <__ieee754_rem_pio2+0x28a>
 8008250:	e9ca 0100 	strd	r0, r1, [sl]
 8008254:	4646      	mov	r6, r8
 8008256:	464f      	mov	r7, r9
 8008258:	e9da 8900 	ldrd	r8, r9, [sl]
 800825c:	4630      	mov	r0, r6
 800825e:	4642      	mov	r2, r8
 8008260:	464b      	mov	r3, r9
 8008262:	4639      	mov	r1, r7
 8008264:	f7f8 f818 	bl	8000298 <__aeabi_dsub>
 8008268:	462b      	mov	r3, r5
 800826a:	4622      	mov	r2, r4
 800826c:	f7f8 f814 	bl	8000298 <__aeabi_dsub>
 8008270:	9b02      	ldr	r3, [sp, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008278:	f6bf af0a 	bge.w	8008090 <__ieee754_rem_pio2+0x80>
 800827c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008280:	f8ca 3004 	str.w	r3, [sl, #4]
 8008284:	f8ca 8000 	str.w	r8, [sl]
 8008288:	f8ca 0008 	str.w	r0, [sl, #8]
 800828c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008290:	f8ca 300c 	str.w	r3, [sl, #12]
 8008294:	f1cb 0b00 	rsb	fp, fp, #0
 8008298:	e6fa      	b.n	8008090 <__ieee754_rem_pio2+0x80>
 800829a:	a327      	add	r3, pc, #156	; (adr r3, 8008338 <__ieee754_rem_pio2+0x328>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	ec51 0b18 	vmov	r0, r1, d8
 80082a4:	f7f8 f9b0 	bl	8000608 <__aeabi_dmul>
 80082a8:	4604      	mov	r4, r0
 80082aa:	460d      	mov	r5, r1
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4640      	mov	r0, r8
 80082b2:	4649      	mov	r1, r9
 80082b4:	f7f7 fff0 	bl	8000298 <__aeabi_dsub>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4606      	mov	r6, r0
 80082be:	460f      	mov	r7, r1
 80082c0:	4640      	mov	r0, r8
 80082c2:	4649      	mov	r1, r9
 80082c4:	f7f7 ffe8 	bl	8000298 <__aeabi_dsub>
 80082c8:	4622      	mov	r2, r4
 80082ca:	462b      	mov	r3, r5
 80082cc:	f7f7 ffe4 	bl	8000298 <__aeabi_dsub>
 80082d0:	a31b      	add	r3, pc, #108	; (adr r3, 8008340 <__ieee754_rem_pio2+0x330>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	4604      	mov	r4, r0
 80082d8:	460d      	mov	r5, r1
 80082da:	ec51 0b18 	vmov	r0, r1, d8
 80082de:	f7f8 f993 	bl	8000608 <__aeabi_dmul>
 80082e2:	4622      	mov	r2, r4
 80082e4:	462b      	mov	r3, r5
 80082e6:	f7f7 ffd7 	bl	8000298 <__aeabi_dsub>
 80082ea:	4604      	mov	r4, r0
 80082ec:	460d      	mov	r5, r1
 80082ee:	e75f      	b.n	80081b0 <__ieee754_rem_pio2+0x1a0>
 80082f0:	4b1b      	ldr	r3, [pc, #108]	; (8008360 <__ieee754_rem_pio2+0x350>)
 80082f2:	4598      	cmp	r8, r3
 80082f4:	dd36      	ble.n	8008364 <__ieee754_rem_pio2+0x354>
 80082f6:	ee10 2a10 	vmov	r2, s0
 80082fa:	462b      	mov	r3, r5
 80082fc:	4620      	mov	r0, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	f7f7 ffca 	bl	8000298 <__aeabi_dsub>
 8008304:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008308:	e9ca 0100 	strd	r0, r1, [sl]
 800830c:	e694      	b.n	8008038 <__ieee754_rem_pio2+0x28>
 800830e:	bf00      	nop
 8008310:	54400000 	.word	0x54400000
 8008314:	3ff921fb 	.word	0x3ff921fb
 8008318:	1a626331 	.word	0x1a626331
 800831c:	3dd0b461 	.word	0x3dd0b461
 8008320:	1a600000 	.word	0x1a600000
 8008324:	3dd0b461 	.word	0x3dd0b461
 8008328:	2e037073 	.word	0x2e037073
 800832c:	3ba3198a 	.word	0x3ba3198a
 8008330:	6dc9c883 	.word	0x6dc9c883
 8008334:	3fe45f30 	.word	0x3fe45f30
 8008338:	2e000000 	.word	0x2e000000
 800833c:	3ba3198a 	.word	0x3ba3198a
 8008340:	252049c1 	.word	0x252049c1
 8008344:	397b839a 	.word	0x397b839a
 8008348:	3fe921fb 	.word	0x3fe921fb
 800834c:	4002d97b 	.word	0x4002d97b
 8008350:	3ff921fb 	.word	0x3ff921fb
 8008354:	413921fb 	.word	0x413921fb
 8008358:	3fe00000 	.word	0x3fe00000
 800835c:	08009470 	.word	0x08009470
 8008360:	7fefffff 	.word	0x7fefffff
 8008364:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008368:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800836c:	ee10 0a10 	vmov	r0, s0
 8008370:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008374:	ee10 6a10 	vmov	r6, s0
 8008378:	460f      	mov	r7, r1
 800837a:	f7f8 fbdf 	bl	8000b3c <__aeabi_d2iz>
 800837e:	f7f8 f8d9 	bl	8000534 <__aeabi_i2d>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800838e:	f7f7 ff83 	bl	8000298 <__aeabi_dsub>
 8008392:	4b22      	ldr	r3, [pc, #136]	; (800841c <__ieee754_rem_pio2+0x40c>)
 8008394:	2200      	movs	r2, #0
 8008396:	f7f8 f937 	bl	8000608 <__aeabi_dmul>
 800839a:	460f      	mov	r7, r1
 800839c:	4606      	mov	r6, r0
 800839e:	f7f8 fbcd 	bl	8000b3c <__aeabi_d2iz>
 80083a2:	f7f8 f8c7 	bl	8000534 <__aeabi_i2d>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4630      	mov	r0, r6
 80083ac:	4639      	mov	r1, r7
 80083ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083b2:	f7f7 ff71 	bl	8000298 <__aeabi_dsub>
 80083b6:	4b19      	ldr	r3, [pc, #100]	; (800841c <__ieee754_rem_pio2+0x40c>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	f7f8 f925 	bl	8000608 <__aeabi_dmul>
 80083be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083c2:	ad04      	add	r5, sp, #16
 80083c4:	f04f 0803 	mov.w	r8, #3
 80083c8:	46a9      	mov	r9, r5
 80083ca:	2600      	movs	r6, #0
 80083cc:	2700      	movs	r7, #0
 80083ce:	4632      	mov	r2, r6
 80083d0:	463b      	mov	r3, r7
 80083d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80083d6:	46c3      	mov	fp, r8
 80083d8:	3d08      	subs	r5, #8
 80083da:	f108 38ff 	add.w	r8, r8, #4294967295
 80083de:	f7f8 fb7b 	bl	8000ad8 <__aeabi_dcmpeq>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d1f3      	bne.n	80083ce <__ieee754_rem_pio2+0x3be>
 80083e6:	4b0e      	ldr	r3, [pc, #56]	; (8008420 <__ieee754_rem_pio2+0x410>)
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	2302      	movs	r3, #2
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	4622      	mov	r2, r4
 80083f0:	465b      	mov	r3, fp
 80083f2:	4651      	mov	r1, sl
 80083f4:	4648      	mov	r0, r9
 80083f6:	f000 f8df 	bl	80085b8 <__kernel_rem_pio2>
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	4683      	mov	fp, r0
 8008400:	f6bf ae46 	bge.w	8008090 <__ieee754_rem_pio2+0x80>
 8008404:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008408:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800840c:	f8ca 3004 	str.w	r3, [sl, #4]
 8008410:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008414:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008418:	e73a      	b.n	8008290 <__ieee754_rem_pio2+0x280>
 800841a:	bf00      	nop
 800841c:	41700000 	.word	0x41700000
 8008420:	080094f0 	.word	0x080094f0
 8008424:	00000000 	.word	0x00000000

08008428 <__kernel_cos>:
 8008428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	ec57 6b10 	vmov	r6, r7, d0
 8008430:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008434:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008438:	ed8d 1b00 	vstr	d1, [sp]
 800843c:	da07      	bge.n	800844e <__kernel_cos+0x26>
 800843e:	ee10 0a10 	vmov	r0, s0
 8008442:	4639      	mov	r1, r7
 8008444:	f7f8 fb7a 	bl	8000b3c <__aeabi_d2iz>
 8008448:	2800      	cmp	r0, #0
 800844a:	f000 8088 	beq.w	800855e <__kernel_cos+0x136>
 800844e:	4632      	mov	r2, r6
 8008450:	463b      	mov	r3, r7
 8008452:	4630      	mov	r0, r6
 8008454:	4639      	mov	r1, r7
 8008456:	f7f8 f8d7 	bl	8000608 <__aeabi_dmul>
 800845a:	4b51      	ldr	r3, [pc, #324]	; (80085a0 <__kernel_cos+0x178>)
 800845c:	2200      	movs	r2, #0
 800845e:	4604      	mov	r4, r0
 8008460:	460d      	mov	r5, r1
 8008462:	f7f8 f8d1 	bl	8000608 <__aeabi_dmul>
 8008466:	a340      	add	r3, pc, #256	; (adr r3, 8008568 <__kernel_cos+0x140>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	4682      	mov	sl, r0
 800846e:	468b      	mov	fp, r1
 8008470:	4620      	mov	r0, r4
 8008472:	4629      	mov	r1, r5
 8008474:	f7f8 f8c8 	bl	8000608 <__aeabi_dmul>
 8008478:	a33d      	add	r3, pc, #244	; (adr r3, 8008570 <__kernel_cos+0x148>)
 800847a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847e:	f7f7 ff0d 	bl	800029c <__adddf3>
 8008482:	4622      	mov	r2, r4
 8008484:	462b      	mov	r3, r5
 8008486:	f7f8 f8bf 	bl	8000608 <__aeabi_dmul>
 800848a:	a33b      	add	r3, pc, #236	; (adr r3, 8008578 <__kernel_cos+0x150>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f7f7 ff02 	bl	8000298 <__aeabi_dsub>
 8008494:	4622      	mov	r2, r4
 8008496:	462b      	mov	r3, r5
 8008498:	f7f8 f8b6 	bl	8000608 <__aeabi_dmul>
 800849c:	a338      	add	r3, pc, #224	; (adr r3, 8008580 <__kernel_cos+0x158>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f7f7 fefb 	bl	800029c <__adddf3>
 80084a6:	4622      	mov	r2, r4
 80084a8:	462b      	mov	r3, r5
 80084aa:	f7f8 f8ad 	bl	8000608 <__aeabi_dmul>
 80084ae:	a336      	add	r3, pc, #216	; (adr r3, 8008588 <__kernel_cos+0x160>)
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f7 fef0 	bl	8000298 <__aeabi_dsub>
 80084b8:	4622      	mov	r2, r4
 80084ba:	462b      	mov	r3, r5
 80084bc:	f7f8 f8a4 	bl	8000608 <__aeabi_dmul>
 80084c0:	a333      	add	r3, pc, #204	; (adr r3, 8008590 <__kernel_cos+0x168>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f7f7 fee9 	bl	800029c <__adddf3>
 80084ca:	4622      	mov	r2, r4
 80084cc:	462b      	mov	r3, r5
 80084ce:	f7f8 f89b 	bl	8000608 <__aeabi_dmul>
 80084d2:	4622      	mov	r2, r4
 80084d4:	462b      	mov	r3, r5
 80084d6:	f7f8 f897 	bl	8000608 <__aeabi_dmul>
 80084da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084de:	4604      	mov	r4, r0
 80084e0:	460d      	mov	r5, r1
 80084e2:	4630      	mov	r0, r6
 80084e4:	4639      	mov	r1, r7
 80084e6:	f7f8 f88f 	bl	8000608 <__aeabi_dmul>
 80084ea:	460b      	mov	r3, r1
 80084ec:	4602      	mov	r2, r0
 80084ee:	4629      	mov	r1, r5
 80084f0:	4620      	mov	r0, r4
 80084f2:	f7f7 fed1 	bl	8000298 <__aeabi_dsub>
 80084f6:	4b2b      	ldr	r3, [pc, #172]	; (80085a4 <__kernel_cos+0x17c>)
 80084f8:	4598      	cmp	r8, r3
 80084fa:	4606      	mov	r6, r0
 80084fc:	460f      	mov	r7, r1
 80084fe:	dc10      	bgt.n	8008522 <__kernel_cos+0xfa>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4650      	mov	r0, sl
 8008506:	4659      	mov	r1, fp
 8008508:	f7f7 fec6 	bl	8000298 <__aeabi_dsub>
 800850c:	460b      	mov	r3, r1
 800850e:	4926      	ldr	r1, [pc, #152]	; (80085a8 <__kernel_cos+0x180>)
 8008510:	4602      	mov	r2, r0
 8008512:	2000      	movs	r0, #0
 8008514:	f7f7 fec0 	bl	8000298 <__aeabi_dsub>
 8008518:	ec41 0b10 	vmov	d0, r0, r1
 800851c:	b003      	add	sp, #12
 800851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008522:	4b22      	ldr	r3, [pc, #136]	; (80085ac <__kernel_cos+0x184>)
 8008524:	4920      	ldr	r1, [pc, #128]	; (80085a8 <__kernel_cos+0x180>)
 8008526:	4598      	cmp	r8, r3
 8008528:	bfcc      	ite	gt
 800852a:	4d21      	ldrgt	r5, [pc, #132]	; (80085b0 <__kernel_cos+0x188>)
 800852c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008530:	2400      	movs	r4, #0
 8008532:	4622      	mov	r2, r4
 8008534:	462b      	mov	r3, r5
 8008536:	2000      	movs	r0, #0
 8008538:	f7f7 feae 	bl	8000298 <__aeabi_dsub>
 800853c:	4622      	mov	r2, r4
 800853e:	4680      	mov	r8, r0
 8008540:	4689      	mov	r9, r1
 8008542:	462b      	mov	r3, r5
 8008544:	4650      	mov	r0, sl
 8008546:	4659      	mov	r1, fp
 8008548:	f7f7 fea6 	bl	8000298 <__aeabi_dsub>
 800854c:	4632      	mov	r2, r6
 800854e:	463b      	mov	r3, r7
 8008550:	f7f7 fea2 	bl	8000298 <__aeabi_dsub>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4640      	mov	r0, r8
 800855a:	4649      	mov	r1, r9
 800855c:	e7da      	b.n	8008514 <__kernel_cos+0xec>
 800855e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008598 <__kernel_cos+0x170>
 8008562:	e7db      	b.n	800851c <__kernel_cos+0xf4>
 8008564:	f3af 8000 	nop.w
 8008568:	be8838d4 	.word	0xbe8838d4
 800856c:	bda8fae9 	.word	0xbda8fae9
 8008570:	bdb4b1c4 	.word	0xbdb4b1c4
 8008574:	3e21ee9e 	.word	0x3e21ee9e
 8008578:	809c52ad 	.word	0x809c52ad
 800857c:	3e927e4f 	.word	0x3e927e4f
 8008580:	19cb1590 	.word	0x19cb1590
 8008584:	3efa01a0 	.word	0x3efa01a0
 8008588:	16c15177 	.word	0x16c15177
 800858c:	3f56c16c 	.word	0x3f56c16c
 8008590:	5555554c 	.word	0x5555554c
 8008594:	3fa55555 	.word	0x3fa55555
 8008598:	00000000 	.word	0x00000000
 800859c:	3ff00000 	.word	0x3ff00000
 80085a0:	3fe00000 	.word	0x3fe00000
 80085a4:	3fd33332 	.word	0x3fd33332
 80085a8:	3ff00000 	.word	0x3ff00000
 80085ac:	3fe90000 	.word	0x3fe90000
 80085b0:	3fd20000 	.word	0x3fd20000
 80085b4:	00000000 	.word	0x00000000

080085b8 <__kernel_rem_pio2>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	ed2d 8b02 	vpush	{d8}
 80085c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80085c4:	f112 0f14 	cmn.w	r2, #20
 80085c8:	9308      	str	r3, [sp, #32]
 80085ca:	9101      	str	r1, [sp, #4]
 80085cc:	4bc6      	ldr	r3, [pc, #792]	; (80088e8 <__kernel_rem_pio2+0x330>)
 80085ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80085d0:	9009      	str	r0, [sp, #36]	; 0x24
 80085d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	f103 33ff 	add.w	r3, r3, #4294967295
 80085de:	bfa8      	it	ge
 80085e0:	1ed4      	subge	r4, r2, #3
 80085e2:	9306      	str	r3, [sp, #24]
 80085e4:	bfb2      	itee	lt
 80085e6:	2400      	movlt	r4, #0
 80085e8:	2318      	movge	r3, #24
 80085ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80085ee:	f06f 0317 	mvn.w	r3, #23
 80085f2:	fb04 3303 	mla	r3, r4, r3, r3
 80085f6:	eb03 0a02 	add.w	sl, r3, r2
 80085fa:	9b04      	ldr	r3, [sp, #16]
 80085fc:	9a06      	ldr	r2, [sp, #24]
 80085fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80088d8 <__kernel_rem_pio2+0x320>
 8008602:	eb03 0802 	add.w	r8, r3, r2
 8008606:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008608:	1aa7      	subs	r7, r4, r2
 800860a:	ae20      	add	r6, sp, #128	; 0x80
 800860c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008610:	2500      	movs	r5, #0
 8008612:	4545      	cmp	r5, r8
 8008614:	dd18      	ble.n	8008648 <__kernel_rem_pio2+0x90>
 8008616:	9b08      	ldr	r3, [sp, #32]
 8008618:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800861c:	aa20      	add	r2, sp, #128	; 0x80
 800861e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80088d8 <__kernel_rem_pio2+0x320>
 8008622:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008626:	f1c3 0301 	rsb	r3, r3, #1
 800862a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800862e:	9307      	str	r3, [sp, #28]
 8008630:	9b07      	ldr	r3, [sp, #28]
 8008632:	9a04      	ldr	r2, [sp, #16]
 8008634:	4443      	add	r3, r8
 8008636:	429a      	cmp	r2, r3
 8008638:	db2f      	blt.n	800869a <__kernel_rem_pio2+0xe2>
 800863a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800863e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008642:	462f      	mov	r7, r5
 8008644:	2600      	movs	r6, #0
 8008646:	e01b      	b.n	8008680 <__kernel_rem_pio2+0xc8>
 8008648:	42ef      	cmn	r7, r5
 800864a:	d407      	bmi.n	800865c <__kernel_rem_pio2+0xa4>
 800864c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008650:	f7f7 ff70 	bl	8000534 <__aeabi_i2d>
 8008654:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008658:	3501      	adds	r5, #1
 800865a:	e7da      	b.n	8008612 <__kernel_rem_pio2+0x5a>
 800865c:	ec51 0b18 	vmov	r0, r1, d8
 8008660:	e7f8      	b.n	8008654 <__kernel_rem_pio2+0x9c>
 8008662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008666:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800866a:	f7f7 ffcd 	bl	8000608 <__aeabi_dmul>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008676:	f7f7 fe11 	bl	800029c <__adddf3>
 800867a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800867e:	3601      	adds	r6, #1
 8008680:	9b06      	ldr	r3, [sp, #24]
 8008682:	429e      	cmp	r6, r3
 8008684:	f1a7 0708 	sub.w	r7, r7, #8
 8008688:	ddeb      	ble.n	8008662 <__kernel_rem_pio2+0xaa>
 800868a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800868e:	3508      	adds	r5, #8
 8008690:	ecab 7b02 	vstmia	fp!, {d7}
 8008694:	f108 0801 	add.w	r8, r8, #1
 8008698:	e7ca      	b.n	8008630 <__kernel_rem_pio2+0x78>
 800869a:	9b04      	ldr	r3, [sp, #16]
 800869c:	aa0c      	add	r2, sp, #48	; 0x30
 800869e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80086a4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80086a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80086aa:	9c04      	ldr	r4, [sp, #16]
 80086ac:	930a      	str	r3, [sp, #40]	; 0x28
 80086ae:	ab98      	add	r3, sp, #608	; 0x260
 80086b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086b4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80086b8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80086bc:	f8cd b008 	str.w	fp, [sp, #8]
 80086c0:	4625      	mov	r5, r4
 80086c2:	2d00      	cmp	r5, #0
 80086c4:	dc78      	bgt.n	80087b8 <__kernel_rem_pio2+0x200>
 80086c6:	ec47 6b10 	vmov	d0, r6, r7
 80086ca:	4650      	mov	r0, sl
 80086cc:	f000 fbfc 	bl	8008ec8 <scalbn>
 80086d0:	ec57 6b10 	vmov	r6, r7, d0
 80086d4:	2200      	movs	r2, #0
 80086d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80086da:	ee10 0a10 	vmov	r0, s0
 80086de:	4639      	mov	r1, r7
 80086e0:	f7f7 ff92 	bl	8000608 <__aeabi_dmul>
 80086e4:	ec41 0b10 	vmov	d0, r0, r1
 80086e8:	f000 fb6e 	bl	8008dc8 <floor>
 80086ec:	4b7f      	ldr	r3, [pc, #508]	; (80088ec <__kernel_rem_pio2+0x334>)
 80086ee:	ec51 0b10 	vmov	r0, r1, d0
 80086f2:	2200      	movs	r2, #0
 80086f4:	f7f7 ff88 	bl	8000608 <__aeabi_dmul>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4630      	mov	r0, r6
 80086fe:	4639      	mov	r1, r7
 8008700:	f7f7 fdca 	bl	8000298 <__aeabi_dsub>
 8008704:	460f      	mov	r7, r1
 8008706:	4606      	mov	r6, r0
 8008708:	f7f8 fa18 	bl	8000b3c <__aeabi_d2iz>
 800870c:	9007      	str	r0, [sp, #28]
 800870e:	f7f7 ff11 	bl	8000534 <__aeabi_i2d>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7f7 fdbd 	bl	8000298 <__aeabi_dsub>
 800871e:	f1ba 0f00 	cmp.w	sl, #0
 8008722:	4606      	mov	r6, r0
 8008724:	460f      	mov	r7, r1
 8008726:	dd70      	ble.n	800880a <__kernel_rem_pio2+0x252>
 8008728:	1e62      	subs	r2, r4, #1
 800872a:	ab0c      	add	r3, sp, #48	; 0x30
 800872c:	9d07      	ldr	r5, [sp, #28]
 800872e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008732:	f1ca 0118 	rsb	r1, sl, #24
 8008736:	fa40 f301 	asr.w	r3, r0, r1
 800873a:	441d      	add	r5, r3
 800873c:	408b      	lsls	r3, r1
 800873e:	1ac0      	subs	r0, r0, r3
 8008740:	ab0c      	add	r3, sp, #48	; 0x30
 8008742:	9507      	str	r5, [sp, #28]
 8008744:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008748:	f1ca 0317 	rsb	r3, sl, #23
 800874c:	fa40 f303 	asr.w	r3, r0, r3
 8008750:	9302      	str	r3, [sp, #8]
 8008752:	9b02      	ldr	r3, [sp, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	dd66      	ble.n	8008826 <__kernel_rem_pio2+0x26e>
 8008758:	9b07      	ldr	r3, [sp, #28]
 800875a:	2200      	movs	r2, #0
 800875c:	3301      	adds	r3, #1
 800875e:	9307      	str	r3, [sp, #28]
 8008760:	4615      	mov	r5, r2
 8008762:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008766:	4294      	cmp	r4, r2
 8008768:	f300 8099 	bgt.w	800889e <__kernel_rem_pio2+0x2e6>
 800876c:	f1ba 0f00 	cmp.w	sl, #0
 8008770:	dd07      	ble.n	8008782 <__kernel_rem_pio2+0x1ca>
 8008772:	f1ba 0f01 	cmp.w	sl, #1
 8008776:	f000 80a5 	beq.w	80088c4 <__kernel_rem_pio2+0x30c>
 800877a:	f1ba 0f02 	cmp.w	sl, #2
 800877e:	f000 80c1 	beq.w	8008904 <__kernel_rem_pio2+0x34c>
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	2b02      	cmp	r3, #2
 8008786:	d14e      	bne.n	8008826 <__kernel_rem_pio2+0x26e>
 8008788:	4632      	mov	r2, r6
 800878a:	463b      	mov	r3, r7
 800878c:	4958      	ldr	r1, [pc, #352]	; (80088f0 <__kernel_rem_pio2+0x338>)
 800878e:	2000      	movs	r0, #0
 8008790:	f7f7 fd82 	bl	8000298 <__aeabi_dsub>
 8008794:	4606      	mov	r6, r0
 8008796:	460f      	mov	r7, r1
 8008798:	2d00      	cmp	r5, #0
 800879a:	d044      	beq.n	8008826 <__kernel_rem_pio2+0x26e>
 800879c:	4650      	mov	r0, sl
 800879e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80088e0 <__kernel_rem_pio2+0x328>
 80087a2:	f000 fb91 	bl	8008ec8 <scalbn>
 80087a6:	4630      	mov	r0, r6
 80087a8:	4639      	mov	r1, r7
 80087aa:	ec53 2b10 	vmov	r2, r3, d0
 80087ae:	f7f7 fd73 	bl	8000298 <__aeabi_dsub>
 80087b2:	4606      	mov	r6, r0
 80087b4:	460f      	mov	r7, r1
 80087b6:	e036      	b.n	8008826 <__kernel_rem_pio2+0x26e>
 80087b8:	4b4e      	ldr	r3, [pc, #312]	; (80088f4 <__kernel_rem_pio2+0x33c>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f7 ff22 	bl	8000608 <__aeabi_dmul>
 80087c4:	f7f8 f9ba 	bl	8000b3c <__aeabi_d2iz>
 80087c8:	f7f7 feb4 	bl	8000534 <__aeabi_i2d>
 80087cc:	4b4a      	ldr	r3, [pc, #296]	; (80088f8 <__kernel_rem_pio2+0x340>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	4680      	mov	r8, r0
 80087d2:	4689      	mov	r9, r1
 80087d4:	f7f7 ff18 	bl	8000608 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f7 fd5a 	bl	8000298 <__aeabi_dsub>
 80087e4:	f7f8 f9aa 	bl	8000b3c <__aeabi_d2iz>
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	f843 0b04 	str.w	r0, [r3], #4
 80087ee:	3d01      	subs	r5, #1
 80087f0:	9302      	str	r3, [sp, #8]
 80087f2:	ab70      	add	r3, sp, #448	; 0x1c0
 80087f4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f7 fd4c 	bl	800029c <__adddf3>
 8008804:	4606      	mov	r6, r0
 8008806:	460f      	mov	r7, r1
 8008808:	e75b      	b.n	80086c2 <__kernel_rem_pio2+0x10a>
 800880a:	d105      	bne.n	8008818 <__kernel_rem_pio2+0x260>
 800880c:	1e63      	subs	r3, r4, #1
 800880e:	aa0c      	add	r2, sp, #48	; 0x30
 8008810:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008814:	15c3      	asrs	r3, r0, #23
 8008816:	e79b      	b.n	8008750 <__kernel_rem_pio2+0x198>
 8008818:	4b38      	ldr	r3, [pc, #224]	; (80088fc <__kernel_rem_pio2+0x344>)
 800881a:	2200      	movs	r2, #0
 800881c:	f7f8 f97a 	bl	8000b14 <__aeabi_dcmpge>
 8008820:	2800      	cmp	r0, #0
 8008822:	d139      	bne.n	8008898 <__kernel_rem_pio2+0x2e0>
 8008824:	9002      	str	r0, [sp, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	2300      	movs	r3, #0
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f8 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 8008832:	2800      	cmp	r0, #0
 8008834:	f000 80b4 	beq.w	80089a0 <__kernel_rem_pio2+0x3e8>
 8008838:	f104 3bff 	add.w	fp, r4, #4294967295
 800883c:	465b      	mov	r3, fp
 800883e:	2200      	movs	r2, #0
 8008840:	9904      	ldr	r1, [sp, #16]
 8008842:	428b      	cmp	r3, r1
 8008844:	da65      	bge.n	8008912 <__kernel_rem_pio2+0x35a>
 8008846:	2a00      	cmp	r2, #0
 8008848:	d07b      	beq.n	8008942 <__kernel_rem_pio2+0x38a>
 800884a:	ab0c      	add	r3, sp, #48	; 0x30
 800884c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008850:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 80a0 	beq.w	800899a <__kernel_rem_pio2+0x3e2>
 800885a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80088e0 <__kernel_rem_pio2+0x328>
 800885e:	4650      	mov	r0, sl
 8008860:	f000 fb32 	bl	8008ec8 <scalbn>
 8008864:	4f23      	ldr	r7, [pc, #140]	; (80088f4 <__kernel_rem_pio2+0x33c>)
 8008866:	ec55 4b10 	vmov	r4, r5, d0
 800886a:	46d8      	mov	r8, fp
 800886c:	2600      	movs	r6, #0
 800886e:	f1b8 0f00 	cmp.w	r8, #0
 8008872:	f280 80cf 	bge.w	8008a14 <__kernel_rem_pio2+0x45c>
 8008876:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80088d8 <__kernel_rem_pio2+0x320>
 800887a:	465f      	mov	r7, fp
 800887c:	f04f 0800 	mov.w	r8, #0
 8008880:	2f00      	cmp	r7, #0
 8008882:	f2c0 80fd 	blt.w	8008a80 <__kernel_rem_pio2+0x4c8>
 8008886:	ab70      	add	r3, sp, #448	; 0x1c0
 8008888:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008900 <__kernel_rem_pio2+0x348>
 800888c:	ec55 4b18 	vmov	r4, r5, d8
 8008890:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008894:	2600      	movs	r6, #0
 8008896:	e0e5      	b.n	8008a64 <__kernel_rem_pio2+0x4ac>
 8008898:	2302      	movs	r3, #2
 800889a:	9302      	str	r3, [sp, #8]
 800889c:	e75c      	b.n	8008758 <__kernel_rem_pio2+0x1a0>
 800889e:	f8db 3000 	ldr.w	r3, [fp]
 80088a2:	b955      	cbnz	r5, 80088ba <__kernel_rem_pio2+0x302>
 80088a4:	b123      	cbz	r3, 80088b0 <__kernel_rem_pio2+0x2f8>
 80088a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80088aa:	f8cb 3000 	str.w	r3, [fp]
 80088ae:	2301      	movs	r3, #1
 80088b0:	3201      	adds	r2, #1
 80088b2:	f10b 0b04 	add.w	fp, fp, #4
 80088b6:	461d      	mov	r5, r3
 80088b8:	e755      	b.n	8008766 <__kernel_rem_pio2+0x1ae>
 80088ba:	1acb      	subs	r3, r1, r3
 80088bc:	f8cb 3000 	str.w	r3, [fp]
 80088c0:	462b      	mov	r3, r5
 80088c2:	e7f5      	b.n	80088b0 <__kernel_rem_pio2+0x2f8>
 80088c4:	1e62      	subs	r2, r4, #1
 80088c6:	ab0c      	add	r3, sp, #48	; 0x30
 80088c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80088d0:	a90c      	add	r1, sp, #48	; 0x30
 80088d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80088d6:	e754      	b.n	8008782 <__kernel_rem_pio2+0x1ca>
	...
 80088e4:	3ff00000 	.word	0x3ff00000
 80088e8:	08009638 	.word	0x08009638
 80088ec:	40200000 	.word	0x40200000
 80088f0:	3ff00000 	.word	0x3ff00000
 80088f4:	3e700000 	.word	0x3e700000
 80088f8:	41700000 	.word	0x41700000
 80088fc:	3fe00000 	.word	0x3fe00000
 8008900:	080095f8 	.word	0x080095f8
 8008904:	1e62      	subs	r2, r4, #1
 8008906:	ab0c      	add	r3, sp, #48	; 0x30
 8008908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008910:	e7de      	b.n	80088d0 <__kernel_rem_pio2+0x318>
 8008912:	a90c      	add	r1, sp, #48	; 0x30
 8008914:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008918:	3b01      	subs	r3, #1
 800891a:	430a      	orrs	r2, r1
 800891c:	e790      	b.n	8008840 <__kernel_rem_pio2+0x288>
 800891e:	3301      	adds	r3, #1
 8008920:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008924:	2900      	cmp	r1, #0
 8008926:	d0fa      	beq.n	800891e <__kernel_rem_pio2+0x366>
 8008928:	9a08      	ldr	r2, [sp, #32]
 800892a:	18e3      	adds	r3, r4, r3
 800892c:	18a6      	adds	r6, r4, r2
 800892e:	aa20      	add	r2, sp, #128	; 0x80
 8008930:	1c65      	adds	r5, r4, #1
 8008932:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	9b02      	ldr	r3, [sp, #8]
 800893a:	42ab      	cmp	r3, r5
 800893c:	da04      	bge.n	8008948 <__kernel_rem_pio2+0x390>
 800893e:	461c      	mov	r4, r3
 8008940:	e6b5      	b.n	80086ae <__kernel_rem_pio2+0xf6>
 8008942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008944:	2301      	movs	r3, #1
 8008946:	e7eb      	b.n	8008920 <__kernel_rem_pio2+0x368>
 8008948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800894a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800894e:	f7f7 fdf1 	bl	8000534 <__aeabi_i2d>
 8008952:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008958:	46b3      	mov	fp, r6
 800895a:	461c      	mov	r4, r3
 800895c:	2700      	movs	r7, #0
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	f04f 0900 	mov.w	r9, #0
 8008966:	9b06      	ldr	r3, [sp, #24]
 8008968:	429f      	cmp	r7, r3
 800896a:	dd06      	ble.n	800897a <__kernel_rem_pio2+0x3c2>
 800896c:	ab70      	add	r3, sp, #448	; 0x1c0
 800896e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008972:	e9c3 8900 	strd	r8, r9, [r3]
 8008976:	3501      	adds	r5, #1
 8008978:	e7de      	b.n	8008938 <__kernel_rem_pio2+0x380>
 800897a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800897e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008982:	f7f7 fe41 	bl	8000608 <__aeabi_dmul>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4640      	mov	r0, r8
 800898c:	4649      	mov	r1, r9
 800898e:	f7f7 fc85 	bl	800029c <__adddf3>
 8008992:	3701      	adds	r7, #1
 8008994:	4680      	mov	r8, r0
 8008996:	4689      	mov	r9, r1
 8008998:	e7e5      	b.n	8008966 <__kernel_rem_pio2+0x3ae>
 800899a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800899e:	e754      	b.n	800884a <__kernel_rem_pio2+0x292>
 80089a0:	ec47 6b10 	vmov	d0, r6, r7
 80089a4:	f1ca 0000 	rsb	r0, sl, #0
 80089a8:	f000 fa8e 	bl	8008ec8 <scalbn>
 80089ac:	ec57 6b10 	vmov	r6, r7, d0
 80089b0:	4b9f      	ldr	r3, [pc, #636]	; (8008c30 <__kernel_rem_pio2+0x678>)
 80089b2:	ee10 0a10 	vmov	r0, s0
 80089b6:	2200      	movs	r2, #0
 80089b8:	4639      	mov	r1, r7
 80089ba:	f7f8 f8ab 	bl	8000b14 <__aeabi_dcmpge>
 80089be:	b300      	cbz	r0, 8008a02 <__kernel_rem_pio2+0x44a>
 80089c0:	4b9c      	ldr	r3, [pc, #624]	; (8008c34 <__kernel_rem_pio2+0x67c>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	4630      	mov	r0, r6
 80089c6:	4639      	mov	r1, r7
 80089c8:	f7f7 fe1e 	bl	8000608 <__aeabi_dmul>
 80089cc:	f7f8 f8b6 	bl	8000b3c <__aeabi_d2iz>
 80089d0:	4605      	mov	r5, r0
 80089d2:	f7f7 fdaf 	bl	8000534 <__aeabi_i2d>
 80089d6:	4b96      	ldr	r3, [pc, #600]	; (8008c30 <__kernel_rem_pio2+0x678>)
 80089d8:	2200      	movs	r2, #0
 80089da:	f7f7 fe15 	bl	8000608 <__aeabi_dmul>
 80089de:	460b      	mov	r3, r1
 80089e0:	4602      	mov	r2, r0
 80089e2:	4639      	mov	r1, r7
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7f7 fc57 	bl	8000298 <__aeabi_dsub>
 80089ea:	f7f8 f8a7 	bl	8000b3c <__aeabi_d2iz>
 80089ee:	f104 0b01 	add.w	fp, r4, #1
 80089f2:	ab0c      	add	r3, sp, #48	; 0x30
 80089f4:	f10a 0a18 	add.w	sl, sl, #24
 80089f8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80089fc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008a00:	e72b      	b.n	800885a <__kernel_rem_pio2+0x2a2>
 8008a02:	4630      	mov	r0, r6
 8008a04:	4639      	mov	r1, r7
 8008a06:	f7f8 f899 	bl	8000b3c <__aeabi_d2iz>
 8008a0a:	ab0c      	add	r3, sp, #48	; 0x30
 8008a0c:	46a3      	mov	fp, r4
 8008a0e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008a12:	e722      	b.n	800885a <__kernel_rem_pio2+0x2a2>
 8008a14:	ab70      	add	r3, sp, #448	; 0x1c0
 8008a16:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8008a1a:	ab0c      	add	r3, sp, #48	; 0x30
 8008a1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008a20:	f7f7 fd88 	bl	8000534 <__aeabi_i2d>
 8008a24:	4622      	mov	r2, r4
 8008a26:	462b      	mov	r3, r5
 8008a28:	f7f7 fdee 	bl	8000608 <__aeabi_dmul>
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	e9c9 0100 	strd	r0, r1, [r9]
 8008a32:	463b      	mov	r3, r7
 8008a34:	4620      	mov	r0, r4
 8008a36:	4629      	mov	r1, r5
 8008a38:	f7f7 fde6 	bl	8000608 <__aeabi_dmul>
 8008a3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a40:	4604      	mov	r4, r0
 8008a42:	460d      	mov	r5, r1
 8008a44:	e713      	b.n	800886e <__kernel_rem_pio2+0x2b6>
 8008a46:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008a4a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008a4e:	f7f7 fddb 	bl	8000608 <__aeabi_dmul>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4620      	mov	r0, r4
 8008a58:	4629      	mov	r1, r5
 8008a5a:	f7f7 fc1f 	bl	800029c <__adddf3>
 8008a5e:	3601      	adds	r6, #1
 8008a60:	4604      	mov	r4, r0
 8008a62:	460d      	mov	r5, r1
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	429e      	cmp	r6, r3
 8008a68:	dc01      	bgt.n	8008a6e <__kernel_rem_pio2+0x4b6>
 8008a6a:	45b0      	cmp	r8, r6
 8008a6c:	daeb      	bge.n	8008a46 <__kernel_rem_pio2+0x48e>
 8008a6e:	ab48      	add	r3, sp, #288	; 0x120
 8008a70:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008a74:	e9c3 4500 	strd	r4, r5, [r3]
 8008a78:	3f01      	subs	r7, #1
 8008a7a:	f108 0801 	add.w	r8, r8, #1
 8008a7e:	e6ff      	b.n	8008880 <__kernel_rem_pio2+0x2c8>
 8008a80:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	dc0b      	bgt.n	8008a9e <__kernel_rem_pio2+0x4e6>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dc6e      	bgt.n	8008b68 <__kernel_rem_pio2+0x5b0>
 8008a8a:	d045      	beq.n	8008b18 <__kernel_rem_pio2+0x560>
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	f003 0007 	and.w	r0, r3, #7
 8008a92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008a96:	ecbd 8b02 	vpop	{d8}
 8008a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d1f3      	bne.n	8008a8c <__kernel_rem_pio2+0x4d4>
 8008aa4:	ab48      	add	r3, sp, #288	; 0x120
 8008aa6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8008aaa:	46d0      	mov	r8, sl
 8008aac:	46d9      	mov	r9, fp
 8008aae:	f1b9 0f00 	cmp.w	r9, #0
 8008ab2:	f1a8 0808 	sub.w	r8, r8, #8
 8008ab6:	dc64      	bgt.n	8008b82 <__kernel_rem_pio2+0x5ca>
 8008ab8:	465c      	mov	r4, fp
 8008aba:	2c01      	cmp	r4, #1
 8008abc:	f1aa 0a08 	sub.w	sl, sl, #8
 8008ac0:	dc7e      	bgt.n	8008bc0 <__kernel_rem_pio2+0x608>
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	f1bb 0f01 	cmp.w	fp, #1
 8008aca:	f300 8097 	bgt.w	8008bfc <__kernel_rem_pio2+0x644>
 8008ace:	9b02      	ldr	r3, [sp, #8]
 8008ad0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8008ad4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f040 8099 	bne.w	8008c10 <__kernel_rem_pio2+0x658>
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	e9c3 5600 	strd	r5, r6, [r3]
 8008ae4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008ae8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008aec:	e7ce      	b.n	8008a8c <__kernel_rem_pio2+0x4d4>
 8008aee:	ab48      	add	r3, sp, #288	; 0x120
 8008af0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fbd0 	bl	800029c <__adddf3>
 8008afc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b00:	f1bb 0f00 	cmp.w	fp, #0
 8008b04:	daf3      	bge.n	8008aee <__kernel_rem_pio2+0x536>
 8008b06:	9b02      	ldr	r3, [sp, #8]
 8008b08:	b113      	cbz	r3, 8008b10 <__kernel_rem_pio2+0x558>
 8008b0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b0e:	4619      	mov	r1, r3
 8008b10:	9b01      	ldr	r3, [sp, #4]
 8008b12:	e9c3 0100 	strd	r0, r1, [r3]
 8008b16:	e7b9      	b.n	8008a8c <__kernel_rem_pio2+0x4d4>
 8008b18:	2000      	movs	r0, #0
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	e7f0      	b.n	8008b00 <__kernel_rem_pio2+0x548>
 8008b1e:	ab48      	add	r3, sp, #288	; 0x120
 8008b20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fbb8 	bl	800029c <__adddf3>
 8008b2c:	3c01      	subs	r4, #1
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	daf5      	bge.n	8008b1e <__kernel_rem_pio2+0x566>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	b1e3      	cbz	r3, 8008b70 <__kernel_rem_pio2+0x5b8>
 8008b36:	4602      	mov	r2, r0
 8008b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b3c:	9c01      	ldr	r4, [sp, #4]
 8008b3e:	e9c4 2300 	strd	r2, r3, [r4]
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008b4a:	f7f7 fba5 	bl	8000298 <__aeabi_dsub>
 8008b4e:	ad4a      	add	r5, sp, #296	; 0x128
 8008b50:	2401      	movs	r4, #1
 8008b52:	45a3      	cmp	fp, r4
 8008b54:	da0f      	bge.n	8008b76 <__kernel_rem_pio2+0x5be>
 8008b56:	9b02      	ldr	r3, [sp, #8]
 8008b58:	b113      	cbz	r3, 8008b60 <__kernel_rem_pio2+0x5a8>
 8008b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b5e:	4619      	mov	r1, r3
 8008b60:	9b01      	ldr	r3, [sp, #4]
 8008b62:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008b66:	e791      	b.n	8008a8c <__kernel_rem_pio2+0x4d4>
 8008b68:	465c      	mov	r4, fp
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	e7de      	b.n	8008b2e <__kernel_rem_pio2+0x576>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	e7e2      	b.n	8008b3c <__kernel_rem_pio2+0x584>
 8008b76:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008b7a:	f7f7 fb8f 	bl	800029c <__adddf3>
 8008b7e:	3401      	adds	r4, #1
 8008b80:	e7e7      	b.n	8008b52 <__kernel_rem_pio2+0x59a>
 8008b82:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008b86:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	4632      	mov	r2, r6
 8008b8e:	463b      	mov	r3, r7
 8008b90:	4629      	mov	r1, r5
 8008b92:	f7f7 fb83 	bl	800029c <__adddf3>
 8008b96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 fb79 	bl	8000298 <__aeabi_dsub>
 8008ba6:	4632      	mov	r2, r6
 8008ba8:	463b      	mov	r3, r7
 8008baa:	f7f7 fb77 	bl	800029c <__adddf3>
 8008bae:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008bb2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8008bb6:	ed88 7b00 	vstr	d7, [r8]
 8008bba:	f109 39ff 	add.w	r9, r9, #4294967295
 8008bbe:	e776      	b.n	8008aae <__kernel_rem_pio2+0x4f6>
 8008bc0:	e9da 8900 	ldrd	r8, r9, [sl]
 8008bc4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008bc8:	4640      	mov	r0, r8
 8008bca:	4632      	mov	r2, r6
 8008bcc:	463b      	mov	r3, r7
 8008bce:	4649      	mov	r1, r9
 8008bd0:	f7f7 fb64 	bl	800029c <__adddf3>
 8008bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4640      	mov	r0, r8
 8008bde:	4649      	mov	r1, r9
 8008be0:	f7f7 fb5a 	bl	8000298 <__aeabi_dsub>
 8008be4:	4632      	mov	r2, r6
 8008be6:	463b      	mov	r3, r7
 8008be8:	f7f7 fb58 	bl	800029c <__adddf3>
 8008bec:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008bf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008bf4:	ed8a 7b00 	vstr	d7, [sl]
 8008bf8:	3c01      	subs	r4, #1
 8008bfa:	e75e      	b.n	8008aba <__kernel_rem_pio2+0x502>
 8008bfc:	ab48      	add	r3, sp, #288	; 0x120
 8008bfe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f7f7 fb49 	bl	800029c <__adddf3>
 8008c0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c0e:	e75a      	b.n	8008ac6 <__kernel_rem_pio2+0x50e>
 8008c10:	9b01      	ldr	r3, [sp, #4]
 8008c12:	9a01      	ldr	r2, [sp, #4]
 8008c14:	601d      	str	r5, [r3, #0]
 8008c16:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008c1a:	605c      	str	r4, [r3, #4]
 8008c1c:	609f      	str	r7, [r3, #8]
 8008c1e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008c22:	60d3      	str	r3, [r2, #12]
 8008c24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c28:	6110      	str	r0, [r2, #16]
 8008c2a:	6153      	str	r3, [r2, #20]
 8008c2c:	e72e      	b.n	8008a8c <__kernel_rem_pio2+0x4d4>
 8008c2e:	bf00      	nop
 8008c30:	41700000 	.word	0x41700000
 8008c34:	3e700000 	.word	0x3e700000

08008c38 <__kernel_sin>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	ed2d 8b04 	vpush	{d8-d9}
 8008c40:	eeb0 8a41 	vmov.f32	s16, s2
 8008c44:	eef0 8a61 	vmov.f32	s17, s3
 8008c48:	ec55 4b10 	vmov	r4, r5, d0
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008c56:	9001      	str	r0, [sp, #4]
 8008c58:	da06      	bge.n	8008c68 <__kernel_sin+0x30>
 8008c5a:	ee10 0a10 	vmov	r0, s0
 8008c5e:	4629      	mov	r1, r5
 8008c60:	f7f7 ff6c 	bl	8000b3c <__aeabi_d2iz>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d051      	beq.n	8008d0c <__kernel_sin+0xd4>
 8008c68:	4622      	mov	r2, r4
 8008c6a:	462b      	mov	r3, r5
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4629      	mov	r1, r5
 8008c70:	f7f7 fcca 	bl	8000608 <__aeabi_dmul>
 8008c74:	4682      	mov	sl, r0
 8008c76:	468b      	mov	fp, r1
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f7f7 fcc2 	bl	8000608 <__aeabi_dmul>
 8008c84:	a341      	add	r3, pc, #260	; (adr r3, 8008d8c <__kernel_sin+0x154>)
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	4680      	mov	r8, r0
 8008c8c:	4689      	mov	r9, r1
 8008c8e:	4650      	mov	r0, sl
 8008c90:	4659      	mov	r1, fp
 8008c92:	f7f7 fcb9 	bl	8000608 <__aeabi_dmul>
 8008c96:	a33f      	add	r3, pc, #252	; (adr r3, 8008d94 <__kernel_sin+0x15c>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f7f7 fafc 	bl	8000298 <__aeabi_dsub>
 8008ca0:	4652      	mov	r2, sl
 8008ca2:	465b      	mov	r3, fp
 8008ca4:	f7f7 fcb0 	bl	8000608 <__aeabi_dmul>
 8008ca8:	a33c      	add	r3, pc, #240	; (adr r3, 8008d9c <__kernel_sin+0x164>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 faf5 	bl	800029c <__adddf3>
 8008cb2:	4652      	mov	r2, sl
 8008cb4:	465b      	mov	r3, fp
 8008cb6:	f7f7 fca7 	bl	8000608 <__aeabi_dmul>
 8008cba:	a33a      	add	r3, pc, #232	; (adr r3, 8008da4 <__kernel_sin+0x16c>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	f7f7 faea 	bl	8000298 <__aeabi_dsub>
 8008cc4:	4652      	mov	r2, sl
 8008cc6:	465b      	mov	r3, fp
 8008cc8:	f7f7 fc9e 	bl	8000608 <__aeabi_dmul>
 8008ccc:	a337      	add	r3, pc, #220	; (adr r3, 8008dac <__kernel_sin+0x174>)
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	f7f7 fae3 	bl	800029c <__adddf3>
 8008cd6:	9b01      	ldr	r3, [sp, #4]
 8008cd8:	4606      	mov	r6, r0
 8008cda:	460f      	mov	r7, r1
 8008cdc:	b9eb      	cbnz	r3, 8008d1a <__kernel_sin+0xe2>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4650      	mov	r0, sl
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	f7f7 fc8f 	bl	8000608 <__aeabi_dmul>
 8008cea:	a325      	add	r3, pc, #148	; (adr r3, 8008d80 <__kernel_sin+0x148>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f7f7 fad2 	bl	8000298 <__aeabi_dsub>
 8008cf4:	4642      	mov	r2, r8
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	f7f7 fc86 	bl	8000608 <__aeabi_dmul>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4620      	mov	r0, r4
 8008d02:	4629      	mov	r1, r5
 8008d04:	f7f7 faca 	bl	800029c <__adddf3>
 8008d08:	4604      	mov	r4, r0
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	ec45 4b10 	vmov	d0, r4, r5
 8008d10:	b003      	add	sp, #12
 8008d12:	ecbd 8b04 	vpop	{d8-d9}
 8008d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1a:	4b1b      	ldr	r3, [pc, #108]	; (8008d88 <__kernel_sin+0x150>)
 8008d1c:	ec51 0b18 	vmov	r0, r1, d8
 8008d20:	2200      	movs	r2, #0
 8008d22:	f7f7 fc71 	bl	8000608 <__aeabi_dmul>
 8008d26:	4632      	mov	r2, r6
 8008d28:	ec41 0b19 	vmov	d9, r0, r1
 8008d2c:	463b      	mov	r3, r7
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 fc69 	bl	8000608 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	ec51 0b19 	vmov	r0, r1, d9
 8008d3e:	f7f7 faab 	bl	8000298 <__aeabi_dsub>
 8008d42:	4652      	mov	r2, sl
 8008d44:	465b      	mov	r3, fp
 8008d46:	f7f7 fc5f 	bl	8000608 <__aeabi_dmul>
 8008d4a:	ec53 2b18 	vmov	r2, r3, d8
 8008d4e:	f7f7 faa3 	bl	8000298 <__aeabi_dsub>
 8008d52:	a30b      	add	r3, pc, #44	; (adr r3, 8008d80 <__kernel_sin+0x148>)
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	4606      	mov	r6, r0
 8008d5a:	460f      	mov	r7, r1
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	4649      	mov	r1, r9
 8008d60:	f7f7 fc52 	bl	8000608 <__aeabi_dmul>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fa96 	bl	800029c <__adddf3>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4620      	mov	r0, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7f7 fa8e 	bl	8000298 <__aeabi_dsub>
 8008d7c:	e7c4      	b.n	8008d08 <__kernel_sin+0xd0>
 8008d7e:	bf00      	nop
 8008d80:	55555549 	.word	0x55555549
 8008d84:	3fc55555 	.word	0x3fc55555
 8008d88:	3fe00000 	.word	0x3fe00000
 8008d8c:	5acfd57c 	.word	0x5acfd57c
 8008d90:	3de5d93a 	.word	0x3de5d93a
 8008d94:	8a2b9ceb 	.word	0x8a2b9ceb
 8008d98:	3e5ae5e6 	.word	0x3e5ae5e6
 8008d9c:	57b1fe7d 	.word	0x57b1fe7d
 8008da0:	3ec71de3 	.word	0x3ec71de3
 8008da4:	19c161d5 	.word	0x19c161d5
 8008da8:	3f2a01a0 	.word	0x3f2a01a0
 8008dac:	1110f8a6 	.word	0x1110f8a6
 8008db0:	3f811111 	.word	0x3f811111

08008db4 <fabs>:
 8008db4:	ec51 0b10 	vmov	r0, r1, d0
 8008db8:	ee10 2a10 	vmov	r2, s0
 8008dbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008dc0:	ec43 2b10 	vmov	d0, r2, r3
 8008dc4:	4770      	bx	lr
	...

08008dc8 <floor>:
 8008dc8:	ec51 0b10 	vmov	r0, r1, d0
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008dd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008dd8:	2e13      	cmp	r6, #19
 8008dda:	ee10 5a10 	vmov	r5, s0
 8008dde:	ee10 8a10 	vmov	r8, s0
 8008de2:	460c      	mov	r4, r1
 8008de4:	dc32      	bgt.n	8008e4c <floor+0x84>
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	da14      	bge.n	8008e14 <floor+0x4c>
 8008dea:	a333      	add	r3, pc, #204	; (adr r3, 8008eb8 <floor+0xf0>)
 8008dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df0:	f7f7 fa54 	bl	800029c <__adddf3>
 8008df4:	2200      	movs	r2, #0
 8008df6:	2300      	movs	r3, #0
 8008df8:	f7f7 fe96 	bl	8000b28 <__aeabi_dcmpgt>
 8008dfc:	b138      	cbz	r0, 8008e0e <floor+0x46>
 8008dfe:	2c00      	cmp	r4, #0
 8008e00:	da57      	bge.n	8008eb2 <floor+0xea>
 8008e02:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008e06:	431d      	orrs	r5, r3
 8008e08:	d001      	beq.n	8008e0e <floor+0x46>
 8008e0a:	4c2d      	ldr	r4, [pc, #180]	; (8008ec0 <floor+0xf8>)
 8008e0c:	2500      	movs	r5, #0
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	e025      	b.n	8008e60 <floor+0x98>
 8008e14:	4f2b      	ldr	r7, [pc, #172]	; (8008ec4 <floor+0xfc>)
 8008e16:	4137      	asrs	r7, r6
 8008e18:	ea01 0307 	and.w	r3, r1, r7
 8008e1c:	4303      	orrs	r3, r0
 8008e1e:	d01f      	beq.n	8008e60 <floor+0x98>
 8008e20:	a325      	add	r3, pc, #148	; (adr r3, 8008eb8 <floor+0xf0>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fa39 	bl	800029c <__adddf3>
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f7f7 fe7b 	bl	8000b28 <__aeabi_dcmpgt>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d0eb      	beq.n	8008e0e <floor+0x46>
 8008e36:	2c00      	cmp	r4, #0
 8008e38:	bfbe      	ittt	lt
 8008e3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008e3e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008e42:	19a4      	addlt	r4, r4, r6
 8008e44:	ea24 0407 	bic.w	r4, r4, r7
 8008e48:	2500      	movs	r5, #0
 8008e4a:	e7e0      	b.n	8008e0e <floor+0x46>
 8008e4c:	2e33      	cmp	r6, #51	; 0x33
 8008e4e:	dd0b      	ble.n	8008e68 <floor+0xa0>
 8008e50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008e54:	d104      	bne.n	8008e60 <floor+0x98>
 8008e56:	ee10 2a10 	vmov	r2, s0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	f7f7 fa1e 	bl	800029c <__adddf3>
 8008e60:	ec41 0b10 	vmov	d0, r0, r1
 8008e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e68:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e70:	fa23 f707 	lsr.w	r7, r3, r7
 8008e74:	4207      	tst	r7, r0
 8008e76:	d0f3      	beq.n	8008e60 <floor+0x98>
 8008e78:	a30f      	add	r3, pc, #60	; (adr r3, 8008eb8 <floor+0xf0>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fa0d 	bl	800029c <__adddf3>
 8008e82:	2200      	movs	r2, #0
 8008e84:	2300      	movs	r3, #0
 8008e86:	f7f7 fe4f 	bl	8000b28 <__aeabi_dcmpgt>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d0bf      	beq.n	8008e0e <floor+0x46>
 8008e8e:	2c00      	cmp	r4, #0
 8008e90:	da02      	bge.n	8008e98 <floor+0xd0>
 8008e92:	2e14      	cmp	r6, #20
 8008e94:	d103      	bne.n	8008e9e <floor+0xd6>
 8008e96:	3401      	adds	r4, #1
 8008e98:	ea25 0507 	bic.w	r5, r5, r7
 8008e9c:	e7b7      	b.n	8008e0e <floor+0x46>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ea4:	fa03 f606 	lsl.w	r6, r3, r6
 8008ea8:	4435      	add	r5, r6
 8008eaa:	4545      	cmp	r5, r8
 8008eac:	bf38      	it	cc
 8008eae:	18e4      	addcc	r4, r4, r3
 8008eb0:	e7f2      	b.n	8008e98 <floor+0xd0>
 8008eb2:	2500      	movs	r5, #0
 8008eb4:	462c      	mov	r4, r5
 8008eb6:	e7aa      	b.n	8008e0e <floor+0x46>
 8008eb8:	8800759c 	.word	0x8800759c
 8008ebc:	7e37e43c 	.word	0x7e37e43c
 8008ec0:	bff00000 	.word	0xbff00000
 8008ec4:	000fffff 	.word	0x000fffff

08008ec8 <scalbn>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	ec55 4b10 	vmov	r4, r5, d0
 8008ece:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	b99a      	cbnz	r2, 8008f00 <scalbn+0x38>
 8008ed8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008edc:	4323      	orrs	r3, r4
 8008ede:	d036      	beq.n	8008f4e <scalbn+0x86>
 8008ee0:	4b39      	ldr	r3, [pc, #228]	; (8008fc8 <scalbn+0x100>)
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	ee10 0a10 	vmov	r0, s0
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f7f7 fb8d 	bl	8000608 <__aeabi_dmul>
 8008eee:	4b37      	ldr	r3, [pc, #220]	; (8008fcc <scalbn+0x104>)
 8008ef0:	429e      	cmp	r6, r3
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	460d      	mov	r5, r1
 8008ef6:	da10      	bge.n	8008f1a <scalbn+0x52>
 8008ef8:	a32b      	add	r3, pc, #172	; (adr r3, 8008fa8 <scalbn+0xe0>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	e03a      	b.n	8008f76 <scalbn+0xae>
 8008f00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008f04:	428a      	cmp	r2, r1
 8008f06:	d10c      	bne.n	8008f22 <scalbn+0x5a>
 8008f08:	ee10 2a10 	vmov	r2, s0
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f7f7 f9c4 	bl	800029c <__adddf3>
 8008f14:	4604      	mov	r4, r0
 8008f16:	460d      	mov	r5, r1
 8008f18:	e019      	b.n	8008f4e <scalbn+0x86>
 8008f1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f1e:	460b      	mov	r3, r1
 8008f20:	3a36      	subs	r2, #54	; 0x36
 8008f22:	4432      	add	r2, r6
 8008f24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f28:	428a      	cmp	r2, r1
 8008f2a:	dd08      	ble.n	8008f3e <scalbn+0x76>
 8008f2c:	2d00      	cmp	r5, #0
 8008f2e:	a120      	add	r1, pc, #128	; (adr r1, 8008fb0 <scalbn+0xe8>)
 8008f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f34:	da1c      	bge.n	8008f70 <scalbn+0xa8>
 8008f36:	a120      	add	r1, pc, #128	; (adr r1, 8008fb8 <scalbn+0xf0>)
 8008f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f3c:	e018      	b.n	8008f70 <scalbn+0xa8>
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	dd08      	ble.n	8008f54 <scalbn+0x8c>
 8008f42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f4e:	ec45 4b10 	vmov	d0, r4, r5
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008f58:	da19      	bge.n	8008f8e <scalbn+0xc6>
 8008f5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008f5e:	429e      	cmp	r6, r3
 8008f60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008f64:	dd0a      	ble.n	8008f7c <scalbn+0xb4>
 8008f66:	a112      	add	r1, pc, #72	; (adr r1, 8008fb0 <scalbn+0xe8>)
 8008f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e2      	bne.n	8008f36 <scalbn+0x6e>
 8008f70:	a30f      	add	r3, pc, #60	; (adr r3, 8008fb0 <scalbn+0xe8>)
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	f7f7 fb47 	bl	8000608 <__aeabi_dmul>
 8008f7a:	e7cb      	b.n	8008f14 <scalbn+0x4c>
 8008f7c:	a10a      	add	r1, pc, #40	; (adr r1, 8008fa8 <scalbn+0xe0>)
 8008f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0b8      	beq.n	8008ef8 <scalbn+0x30>
 8008f86:	a10e      	add	r1, pc, #56	; (adr r1, 8008fc0 <scalbn+0xf8>)
 8008f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f8c:	e7b4      	b.n	8008ef8 <scalbn+0x30>
 8008f8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f92:	3236      	adds	r2, #54	; 0x36
 8008f94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	4b0c      	ldr	r3, [pc, #48]	; (8008fd0 <scalbn+0x108>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	e7e8      	b.n	8008f76 <scalbn+0xae>
 8008fa4:	f3af 8000 	nop.w
 8008fa8:	c2f8f359 	.word	0xc2f8f359
 8008fac:	01a56e1f 	.word	0x01a56e1f
 8008fb0:	8800759c 	.word	0x8800759c
 8008fb4:	7e37e43c 	.word	0x7e37e43c
 8008fb8:	8800759c 	.word	0x8800759c
 8008fbc:	fe37e43c 	.word	0xfe37e43c
 8008fc0:	c2f8f359 	.word	0xc2f8f359
 8008fc4:	81a56e1f 	.word	0x81a56e1f
 8008fc8:	43500000 	.word	0x43500000
 8008fcc:	ffff3cb0 	.word	0xffff3cb0
 8008fd0:	3c900000 	.word	0x3c900000

08008fd4 <_init>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	bf00      	nop
 8008fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fda:	bc08      	pop	{r3}
 8008fdc:	469e      	mov	lr, r3
 8008fde:	4770      	bx	lr

08008fe0 <_fini>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	bf00      	nop
 8008fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fe6:	bc08      	pop	{r3}
 8008fe8:	469e      	mov	lr, r3
 8008fea:	4770      	bx	lr
